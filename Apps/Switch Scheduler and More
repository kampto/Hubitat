/* Switch/Valve Schedule Controller and More
*  
*	2023 T. K. (kampto)
*	NOTES: Generate a schedule to Automate multiple Lights, Outlets, Switches, Relays, Sprinklers, Valves.... Use custom time, Sunset/Sunrise, other actions or triggers. 
*   
*    Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at
*    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS,
*    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
*
*	Change Revision History:  
*   Ver		Date:		Who:		What:
*   2.2.3	2025-09-18	kampto    	Add Paase Case #6 using Hub Variables. Clean up some Options labeling. Add Last time device active coloumn, !!requires remiving and re-adding devices.
*	2.2.0	2025-08-22	kampto    	Seperated Triggers from Actions. Added Temperatiure trigger. Added option to clear start time if seledcted. Some clean up. 
*   2.1.5	2025-07-18	kampto    	Added trigger by Mode action. Icons in Option selections 
*   2.1.2	2025-07-11	kampto    	Fixed some spelling, addded icons to status area below table.Code clean up 
*   2.1.0	2025-06-20	kampto    	Added off at Sunrise option. Changed IgnoreCase to several SpecialPause cases. Add color to status bar values. Able to toggle device state in table. 
*									Add contact pause case. Added action options including blink, contact and switch triggers
*   1.6.2	2025-05-20	kampto    	Added; Leak Detect option, Off @Sunrise, Modes per device, Motion sensor trig, Notification options. Other app enhancements. Improved notes.
*   1.5.2	2025-05-11	kampto    	Add option ignore a pause from rain or moisture sensors. Modes for all. Other app enhancements. Improved notes.
*   1.4.6	2024-07-16	kampto    	Fixed app error when removing a device, fixed null value error for run twice offset, fixed remove device unsubscribe
*   1.4.2	2024-04-15	kampto    	Fixed 2nd run time and 'wet' pause bug
*   1.4.0	2024-02-28	kampto    	Added all Off time user input
*   1.3.1	2023-09-26	kampto    	Added Humidity/Moisture sensor to pause sprinkler schedule. Add status of sprinker pause sensors below table
*   1.2.2	2023-07-28	kampto    	Added Valve capability and 2nd run time per day Hr offset per device, Bug fix on run twice a day. Added table display total time in days option.
*   1.1.0	2023-05-18	kampto    	Add sunset/sunrise start options, format changes.
*   1.0.3	2023-05-13	kampto    	Odd days only option. Sprinkler Options with moisture sensor. Pause a single device checkbox. Added Modes. More usage notes.
*   1.0.0	2023-05-09	kampto    	First Build from scratch.
*/
import groovy.time.TimeCategory
import java.text.SimpleDateFormat

def titleVersion() {state.name = "Switch/Valve Controller (Schedule/Control On/Off: Lights, Outlets, Sprinklers, Switches, Relays, Valves...)"; state.version = "2.2.3" }
definition (
	name: "Switch/Valve Scheduler and More", namespace: "kampto", author: "T. K.",
	description: "Automate/Schedule/Control Switches, Relays, Outlets, Sprinklers, Valves",
	category: "Control",
   	iconUrl: "",
	iconX2Url: "",
    importUrl: "https://raw.githubusercontent.com/kampto/Hubitat/main/Apps/Switch%20Scheduler%20and%20More",
    documentationLink: "https://community.hubitat.com/t/app-switch-scheduler-and-more-schedule-lights-outlets-switches-relays-sprinklers-valves-and-more/118720",
	singleThreaded: true	
)
preferences { page(name: "mainPage") }

////////////////////////////////////////////////////////////  Main Page Inputs/Set-Up /////////////////////////////////////////////////////////////
def mainPage() {
    if (app.getInstallationState() != "COMPLETE") {hide=false} else {hide=true}  
    if (state.DeVices == null) state.DeVices = [:]
    if (state.DeVicesList == null) state.DeVicesList = []
    if (pauseHumidValue == null) {pauseHumidValue = 50}
    if (runTwiceOffset == null) {runTwiceOffset = 12}
    if (state.sensorPause == null) {state.sensorPause = false}
    if (allOffTime == null) {allOffTime = "000000000000000000000000000000"}
            
  dynamicPage(name: "mainPage", title: "", install: true, uninstall: true) {
  displayTitle() 
  section (getFormat("header","Initial Set-Up:"),hideable: true, hidden: hide){  
       label title: "<b>1. Name this App</b>", required: true, submitOnChange: true, width: 3
       input "DeVices", "capability.switch, capability.valve", title: "<b>2. Select Devices to Turn On/Off and Track Time</b>", required: true, multiple: true, submitOnChange: true, width: 6
       paragraph "Available capabilities include Switches and Valves. Combine multiple devices in single App table or create multiple instances of this App with differnt names. Hit Update/Store button to load the Icons if you see 'null'"
                   
       DeVices.each {dev ->
	   if(!state.DeVices["$dev.id"]) {    
            state.DeVices["$dev.id"] = [start: dev.currentSwitch == "on" || dev.currentValve == "open" ? now() : 0, 
            	total: 0, sunTime: false, sunrise: false, sunset: true, offset: 0, modes: "Any", blink: false, actions: 0, trigger: 0,
            	sun: false, mon: false, tue: false, wed: false, thu: false, fri: false, sat: false, odd: false, onTime: "NotYet",
            	startTime: "000000000000000000000000000000", durTime: 0, cron: "", days: "", zone: 0, counts: 0, runsDay: 1, pause: false, specialPause: 0, sensorPause: false, motionCase: 0]  
            state.DeVicesList += dev.id 
           }
       }
  }
  section {                         
    if(DeVices) {
       if(DeVices.id.sort() != state.DeVicesList.sort()) { 
	    state.DeVicesList = DeVices.id
		Map newState = [:]
		DeVices.each{dev ->  newState["$dev.id"] = state.DeVices["$dev.id"]} 
        state.DeVices = newState
        }
  
    refreshHandler()  // get latest times at app open
    paragraph displayTable()
       input "refresh", "button", title: "<b>REFRESH</b> Table Times, Counts, & States", width: 4
       input "allOff", "button", title: "<b>TURN OFF</b> all switches/valves", width: 3 
       input name: "inDaysCBool", type: "bool", title:getFormat("important","Display Total Time in Days?"), defaultValue:false, submitOnChange:true, width: 3   //// ver1.1.6  
    statusBar()  
      }
  }
//////////////////////////////////////////////////////////////  Advanced Inputs /////////////////////////////////////////////////////////////      
   section(getFormat("header","Advanced Options:"),hideable: true, hidden: false) {
        input "updateButton", "button", title: "<b>Update/Store Schedules</b> without hitting Done exiting App" 
        input name: "pauseAllBool", type: "bool", title: getFormat("important","<b>Pause All Devices upcoming Schedules and Triggers? &nbsp Overrides All Cases, Nothing will run</b>"), defaultValue:false, submitOnChange:true, style: 'margin-left:10px' 
   		input name: "allOffBool", type: "bool", title: getFormat("important","<b>Switch All Off at a Specific daily time?</b><br><small>This will not pause upcoming schedules, only turn Off what is currently On. This must remain checked ON to enable.</small>"), defaultValue:false, submitOnChange:true, style: 'margin-left:10px' 
            if (allOffBool) {
            input name: "allOffTime", type: "time", title:getFormat("blueRegular","<b>Enter All Off time, Applies to all.</b> &nbsp <small>Uses 24hr time, &nbsp Hit Update</small>"), defaultValue: "", required: false,  submitOnChange:true, width: 5, newLineAfter: true, style: 'margin-left:70px'
           	}
        input name: "remoteSwitchBool", type: "bool", title: getFormat("important","<b>Remote Switch All Off and Pause/Resume Capability? &nbsp Overrides All Cases</b><br><small>Use dashboard or virtual switch. This must remain checked ON to enable</small>"), defaultValue:false, submitOnChange:true, style: 'margin-left:10px' 
            if (remoteSwitchBool) {
            input "remoteSwitch", "capability.switch", title: getFormat("important", "<b>Select a Switch to Remotely turn Off all switches and Pause/Resume all schedules (Optional)</b><br><small>Real or Virtual Switch, Switch On is Off/Pause</small>"), required: false, multiple: false, submitOnChange: true, width: 8, style: 'margin-left:160px'   
            }
       	input name: "runTwiceOffset", type: "enum", title: getFormat("important","<b>If device 'Runs per Day' = 2 in table; Select hours after 1st run start to start 2nd run of day</b><br><small>Default = 12hr, &nbsp Only applies to all devices with 2 'Runs a day' selected, max 2nd run time is at hr 23:00</small>"), defaultValue: "12", submitOnChange: true,  options: ["1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16"], required: false, width: 7, newLineAfter: true, style: 'margin-left:10px'
       	input name: "sunriseOffset", type: "number", title: getFormat("important","<b>If using 'Off @ Sunrise', &nbsp Enter +/- Sunrise Offset minutes to adjust Off time</b><small>&nbsp &nbsp Enter -360 to 360min, Default = -30min</small>"), defaultValue: "-30", submitOnChange: true, required: false, width: 7, accepts: "-360 to 360", range: "-360..360", newLineAfter: true, style: 'margin-left:10px'	
   		input name: "pushBool", type: "bool", title: getFormat("important","<b>Get Push Notifications from selected actions? &nbsp </b><small>This must remain checked ON to recieve notifications, Off to stop all notifications</small>"), defaultValue:false, submitOnChange:true, style: 'margin-left:10px'   //// ver2.0.1
            if (pushBool) {input "pushDevice", "capability.notification", title: "<b>Select device(s) to send notification to</b>", multiple: true, required: false, submitOnChange: true, width: 5, newLineAfter: true, style: 'margin-left:160px'       
             	input name: "pushOnBool", type: "bool", title: getFormat("blueRegular","<b>Get Notificans about any Device Scheduled Turn On Event?</b>"), defaultValue:false, submitOnChange:true, style: 'margin-left:160px'             
             	input name: "pushMotionBool", type: "bool", title: getFormat("blueRegular","<b>Get Notificans about Motion Events (If Used)?</b>"), defaultValue:false, submitOnChange:true, style: 'margin-left:160px'
                input name: "pushLeakBool", type: "bool", title: getFormat("blueRegular","<b>Get Notificans about Leak Detection Events (If Used)?</b>"), defaultValue:false, submitOnChange:true, style: 'margin-left:160px'
               }
       	input name: "formatBool", type: "bool", title: getFormat("important","<b>Enable Alternative UI formatting, dark screen mode?</b>"), defaultValue:false, submitOnChange:true, style: 'margin-left:10px'
        input name: "logEnableBool", type: "bool", title: getFormat("important","<b>Enable Debug Logging of App based device activity and refreshes?</b><br><small>Shuts off in 1hr</small>"), defaultValue:true, submitOnChange:true, style: 'margin-left:10px'
   		} 
///////////// Triggers           
    section(getFormat("header","TRIGGER Options: &nbsp <small><b>Use devices/sensors to trigger On/Off switches or valves</b></small>"),hideable: true, hidden: false) {  
    	input name: "contactTrigger", type: "capability.contactSensor", title: getFormat("important","<b>Trigger $state.triggerIcon1: Select a Contact sensor to trigger device On. &nbsp </b><small>Device will stay On as long as Contact is 'open'. Applies to devices with 'Trigger' case #1 in table. Will not run if Paused, Incorrect mode, or Special Pause case. Will work on devices with or without a start time/schedule defined in table.</small>"), multiple: true, width: 8, submitOnChange:true, style: 'margin-left:10px'   //// ver2.1.0
    	input name: "switchTrigger", type: "capability.switch", title: getFormat("important","<b>Trigger $state.triggerIcon2: Select a Switch to turn On a seperate device. &nbsp </b><small>Device will stay On as long as selected Switch is 'on'. Applies to devices with 'Trigger' case #2 in table. Will not run if Paused, Incorrect mode, or Special Pause case. Will work on devices with or without a start time/schedule defined in table.</small>"), multiple: true, width: 8, submitOnChange:true, style: 'margin-left:10px'   //// ver2.1.0
    	input name: "tempTrigger", type: "capability.temperatureMeasurement", title: getFormat("important","<b>Trigger $state.triggerIcon3: Select a Temperature sensor to Trigger device. &nbsp </b><small>Device will stay On(or Off) as long as selected Temperature Sensor is >= set Temperature. Applies to devices with 'Trigger' case #3 in table. Will not run if Paused, Incorrect mode, or Special Pause case. Will work on devices with or without a start time/schedule defined in table.</small>"), multiple: true, width: 8, newLineAfter: true, submitOnChange:true, style: 'margin-left:10px'   //// ver2.1.0
        	if (tempTrigger) {input name: "tempTrigDeg", type: "number", title: getFormat("blueRegular","<b>Trigger Temperature, &nbsp</b><small>Default = 40</small>"), defaultValue: "40", required: false, submitOnChange: true, width: 3, style: 'margin-left:30px' 
        	  //input name: "tempTrigOnTime", type: "number", title: getFormat("blueRegular","<b>Input Device Ontime after Triggered in minutes &nbsp</b><small>Default = 0, 0 means no timer is applied. Enter 0 to 360 minutes</small>"), defaultValue: "0", required: false, submitOnChange: true, accepts: "0 to 360", range: "0..360", width: 3, style: 'margin-left:30px' 
              input name: "tempTrigInvertBool", type: "bool", title: getFormat("blueRegular","<b>Turn Device ON if goes Below Temperature instead?</b>"), defaultValue:false, width: 4, submitOnChange:true 
              }
        paragraph getFormat("important","<b>Trigger $state.triggerIcon4: Select Mode to trigger Device On/Off. &nbsp </b><small>Applies to Devices with 'Trigger' case #4 in table. &nbsp Switches/Valves will turn On/Off when mode changes to the Selected<br>unless paused. Will toggle back when mode changes back to not selected mode. Will work on devices with or without a start time/schedule defined in table.</small>")
              input name: "modeTrigger", type: "mode", title: getFormat("blueRegular","<b>Select Mode</b>"), width: 2, submitOnChange:true, style: 'margin-left:60px'   
              input name: "modeOnTime", type: "number", title: getFormat("blueRegular","<b>Input Device Ontime after triggered by Mode in minutes &nbsp</b><small>Default = 0, 0 means no timer is applied. Enter 0 to 360 minutes</small>"), defaultValue: "0", required: false, submitOnChange: true, accepts: "0 to 360", range: "0..360", width: 3, style: 'margin-left:30px' 
        	  input name: "modeInvertBool", type: "bool", title: getFormat("blueRegular","<b>Turn Device Off if On with mode instaed?</b>"), defaultValue:false, width: 3, submitOnChange:true, style: 'margin-left:30px'     
 }      
///////////// Motion Detection         
    section(getFormat("header","MOTION DETECTION Options: &nbsp <small><b>For Switches & Valves</b></small>"),hideable: true, hidden: false) {     
       	input "motionSensor1", "capability.motionSensor", title: getFormat("important", "<b>Select Motion Sensor(s) Group $state.motionIcon1 to trigger switch (Optional)</b><br><small>Applies to all devices with this Case # selected. Will not run if Paused, Incorrect mode, or Special Pause case. You can use Motion On triggers with or without an entered schedule. Will not use Blink Actions Cases.</small>"), required: false, multiple: true, submitOnChange: true, width: 8, style: 'margin-left:10px' 
        	if (motionSensor1) {
        		input name: "motionActive1", type: "bool", title: getFormat("blueRegular","<b>Keep Device On until motion is Inactive instead of using duration time?</b>&nbsp &nbsp<small>Will ignore entered time</small>"), defaultValue:false, submitOnChange:true, style: 'margin-left:60px' 
       			if (!motionActive1) {input name: "motionRunTime1", type: "decimal", title: getFormat("blueRegular","<b>Enter switch run time after Motion triggered</b><small>&nbsp &nbsp Enter 0.1 to 120min, Default = 3min</small>"), defaultValue: "3", submitOnChange: true, required: false, width: 7, accepts: ".1 to 120", range: ".1..120", newLineAfter: true, style: 'margin-left:60px'}
       			input name: "invertBool1", type: "bool", title: getFormat("blueRegular","<b>If Motion and a Switch/Valve is currently On, switch Off instead?</b> &nbsp <small> Off devices will still switch On <br>Will switch Off for run time or active entered above then back On. Toggle a night light to alert intruders!</small>"), defaultValue:false, submitOnChange:true, newLineAfter: true, style: 'margin-left:60px' 
    			} 
        input "motionSensor2", "capability.motionSensor", title: getFormat("important", "<b>Select Motion Sensor(s) Group $state.motionIcon2 to trigger switch (Optional)</b><br><small>Applies to all devices with this Case # selected. Will not run if Paused, Incorrect mode, or Special Pause case. You can use Motion On triggers with or without an entered schedule. Will not use Blink Actions Cases.</small>"), required: false, multiple: true, submitOnChange: true, width: 8, style: 'margin-left:10px' 
        	if (motionSensor2) {
        		input name: "motionActive2", type: "bool", title: getFormat("blueRegular","<b>Keep Device On until motion is Inactive instead of using duration time?</b>&nbsp &nbsp<small>Will ignore entered time</small>"), defaultValue:false, submitOnChange:true, style: 'margin-left:60px' 
       			if (!motionActive2) {input name: "motionRunTime2", type: "decimal", title: getFormat("blueRegular","<b>Enter switch run time after Motion triggered</b><small>&nbsp &nbsp Enter 0.1 to 120min, Default = 3min</small>"), defaultValue: "3", submitOnChange: true, required: false, width: 7, accepts: ".1 to 120", range: ".1..120", newLineAfter: true, style: 'margin-left:60px'}
       			input name: "invertBool2", type: "bool", title: getFormat("blueRegular","<b>If Motion and a Switch/Valve is currently On, switch Off instead?</b> &nbsp <small> Off devices will still switch On <br>Will switch Off for run time or active entered above then back On. Toggle a night light to alert intruders!</small>"), defaultValue:false, submitOnChange:true, newLineAfter: true, style: 'margin-left:60px' 
            	} }
///////////// Actions           
    section(getFormat("header","ACTION Switch Options: &nbsp <small><b>For Switches, not Valves</b></small>"),hideable: true, hidden: false) {        
      	paragraph getFormat("important","<b>Actions $state.actionsIcon1: Blink Timer1 device On/Off feature? &nbsp </b><small>Applies to scheduled devices with 'Actions' case #1 in table. &nbsp &nbsp Enter 0.1 to 60min, Default = 1min</small>")
              input name: "blinkOn1", type: "decimal", title: getFormat("blueRegular","<b>Input blink 'ON' time minutes</b>"), defaultValue: "1", required: false, submitOnChange: true, accepts: "0.1 to 60", range: "0.1..60", width: 3, style: 'margin-left:60px'       
              input name: "blinkOff1", type: "decimal", title: getFormat("blueRegular","<b>Input blink 'OFF' time minutes</b></small>"), defaultValue: "1", required: false, submitOnChange: true, accepts: "0.1 to 60", range: "0.1..60", width: 3, style: 'margin-left:60px'       
        paragraph getFormat("important","<b>Actions $state.actionsIcon2: Blink Timer2 device On/Off feature? &nbsp </b><small>Applies to scheduled devices with 'Actions' case #2 in table. &nbsp &nbsp Enter 0.1 to 60min, Default = 1min</small>")
              input name: "blinkOn2", type: "decimal", title: getFormat("blueRegular","<b>Input blink 'ON' time minutes</b>"), defaultValue: "1", required: false, submitOnChange: true, accepts: "0.1 to 60", range: "0.1..60", width: 3, style: 'margin-left:60px'       
              input name: "blinkOff2", type: "decimal", title: getFormat("blueRegular","<b>Input blink 'OFF' time minutes</b>"), defaultValue: "1", required: false, submitOnChange: true, accepts: "0.1 to 60", range: "0.1..60", width: 3, style: 'margin-left:60px'       
 }
///////////// Pause Cases      
  	section(getFormat("header","PAUSE CASE Options: &nbsp <small><b>Schedule pause via; Wet, Moisture, Contact state, Voltage, ... For Switches & Valves</b></small>"),hideable: true, hidden: false) {    
          input "humidSensor", "capability.relativeHumidityMeasurement", title: getFormat("important", "<b>Pause Case $state.pauseCaseIcon1 Humidity/Moisture: Select Humidity sensor(s) to Pause Schedules/Triggers</b><br><small>If Humidity above (or below) selected % Will pause upcoming, Applies to devices with 'Pause Case' #1 in table. Typically used to pause Sprinklers.</small>"), required: false, multiple: true, newLineAfter: true, submitOnChange: true, width: 8, style: 'margin-left:10px'  
            if (humidSensor) {input name: "pauseHumidValue", type: "number", title: getFormat("blueRegular","<b>Select Humidity level % to Pause</b><small>&nbsp &nbsp Default = 50%</small>"), defaultValue: "50", submitOnChange: true, required: false, width: 4, style: 'margin-left:60px'
             input name: "invertHumidBool", type: "bool", title: getFormat("blueRegular","<b>Pause if Humidity % is below selected level instead?</b>"), defaultValue: false, submitOnChange: true, required: false, width: 3, newLineAfter: true
                             }
          input "wetSensor", "capability.waterSensor", title: getFormat("important", "<b>Pause Case $state.pauseCaseIcon2 Wet/Dry: Select Wet/Dry sensor(s) to Pause Schedules/Triggers</b><br><small>'Wet' will pause upcoming, Applies to devices with 'Pause Case' #2 in table.  Typically used to pause Sprinklers.</small>"), required: false, multiple: true, submitOnChange: true, width: 8, style: 'margin-left:10px'  
          input "voltageSensor", "capability.voltageMeasurement", title: getFormat("important", "<b>Pause Case $state.pauseCaseIcon3 Voltage: Select Voltage sensor(s) to Pause Schedules/Triggers</b><br><small>Typically use for Solar situations. If <= threshold will pause upcoming, Applies to devices with 'Pause Case' #3 in table</small>"), required: false, multiple: true, submitOnChange: true, width: 8, style: 'margin-left:10px'  
            if (voltageSensor) {input name: "voltageThreshold", type: "decimal", title: getFormat("blueRegular","<b>Enter Voltage to pause schedule if below</b><small>&nbsp &nbsp Default = 52.2v</small>"), defaultValue: "52.2", submitOnChange: true, required: false, width: 6, newLineAfter: true, style: 'margin-left:60px'
             }
          input "contactSensor", "capability.contactSensor", title: getFormat("important", "<b>Pause Case $state.pauseCaseIcon4 Contacts: Select Contact sensor(s) to Pause Schedules/Triggers</b><br><small>Doors, Windows, other.. Will pasue if Open (or closed). Applies to devices with 'Pause Case' #4 in table</small>"), required: false, multiple: true, submitOnChange: true, width: 8, style: 'margin-left:10px'  
            if (contactSensor) {input name: "invertContactBool", type: "bool", title: getFormat("blueRegular","<b>Change logic to Pause if contact Closed instead?</b>"), defaultValue:false, submitOnChange:true, newLineAfter: true, style: 'margin-left:60px'
             } 
          input "tempSensor", "capability.temperatureMeasurement", title: getFormat("important", "<b>Pause Case $state.pauseCaseIcon5 Temperature: Select Temperature sensor(s) to Pause Schedules/Triggers</b><br><small>If Temperature is above (or below) selected Value Will pause upcoming, Applies to devices with 'Pause Case' #5 in table.</small>"), required: false, multiple: true, newLineAfter: true, submitOnChange: true, width: 8, style: 'margin-left:10px'  
          	if (tempSensor) {input name: "pauseTempValue", type: "number", title: getFormat("blueRegular","<b>Select Temperature to Pause</b><small>&nbsp &nbsp Default = 50deg</small>"), defaultValue: "50", submitOnChange: true, required: false, width: 4, style: 'margin-left:60px'
               input name: "invertTempBool", type: "bool", title: getFormat("blueRegular","<b>Pause if Temperature is below selected level instead?</b>"), defaultValue: false, submitOnChange: true, required: false, width: 3, newLineAfter: true
            }
        
   /////// Get all variables just incase needed    
   HashMap varList = getAllGlobalVars()
                ArrayList selectList = []
                varList.each {
                    selectList.add("${it.key}")
                }
        input "varConnect", "enum", options:selectList , description:"Select Variable", title:"<b>Pause Case $state.pauseCaseIcon6 Variable: Select Variable(s) to Pause Schedules/Triggers</b> &nbsp <small>Must be a numerical value, Number or String. Not Decimal or Text</small> ", submitOnChange:true, required: false, multiple: true, newLineAfter: true, width: 8, style: 'margin-left:10px'    
            if (varConnect) {input name: "pauseVarValue", type: "number", title: getFormat("blueRegular","<b>Enter Number to Pause if selected Variable(s) are Above/Below it</b><br><small>Default = 0, Integers only</small>"), defaultValue: "0", submitOnChange: true, required: false, width: 4, style: 'margin-left:60px'
               input name: "invertVarBool", type: "bool", title: getFormat("blueRegular","<b>Check this Off to Pause if Variable(s) are above entered Number, Check On to Pause if below</b>"), defaultValue: false, submitOnChange: true, required: false, width: 3, newLineAfter: true
             }     
        input name: "leakBool", type: "bool", title: getFormat("important","<b>Leak Detect: Use Wet/Dry sensor as leak detect to turn Off All Devices and Pause All upcoming Schedules/Triggers?</b><br><small>Applies to all switches/valves, This must remain checked ON to work. See Usage Notes for more info</small>"), defaultValue:false, submitOnChange:true, newLineAfter: true, style: 'margin-left:10px'
       	    if (leakBool) {
            input "wetLeakSensor", "capability.waterSensor", title: getFormat("important", "<b>Select Wet/Dry sensor(s) to detect leak and trigger Shutdown</b><br><small>'Wet' will trigger, Not recommended to share same sensor with selected Sprinker wet/dry sensor</small>"), required: false, multiple: true, submitOnChange: true, width: 6, newLineAfter: true, style: 'margin-left:60px'  
            }  
}      
///////////////////////////////////////////////////////////////  Usage Notes Section  //////////////////////////////////////////////////////////////
   section(getFormat("header","Usage Notes / Instructions:"), hideable: true, hidden: hide) {  
      paragraph getFormat("lessImportant","<ul>"+    
      "<li>Use for any switch or valve capability; switches, outlets, relays, lights, security lights, sprinklers, etc.. Add as many as you want on table.</li>"+
      "<li>Table will not auto refresh values or states, you must hit in App Refresh button.</li>"+
      "<li>If you make/change a schedule change it wont take unless you hit 'Done' exiting the App or hitting the 'Update/Store' button.</li>"+    
      "<li>Trigger and Pause cases will only act when the selected Sensor changes state. It subscribes to the Sensor and needs to see a change in order to act on the new state.</li>"+
      "<li><b>State:</b> Shows current device state after hitting in app Refresh. Clicking to toggle device state will not effect scheduleing or use the set Run time.</li>"+
      "<li><b>Use Sunset/Sunrise:</b> Option for start time, if checcked combine with selectable sunrise or sunset icon and with start +/- offset time in minutes. New Set/Rise times will auto update daily.</li>"+                       
      "<li><b>Select day(s):</b> Or odd days check boxes, enter Start time and Run Duration. Start times are in 24 hour format. Run Time in Minutes only.</li>"+
      "<li><b>Odd Days:</b> Will run days 1st, 3rd, 5th,...29th, if 31st, then 1st again of month.</li>"+ 
      "<li><b>Last Active:</b> Time the device was last turned On or Off.</li>"+                    
	  "<li><b>Total On Time and Counts:</b> Will track all switch activity, from app and outside app.</li>"+
 	  "<li><b>Reset:</b> From table per row Will reset the total On Time and Counts. It does not reset schedule or turn off the device</li>"+	
      "<li><b>Off @ Sunrise:</b> Instead of setting a time duration, use Sunrise time. Set the Sunrise offset in advanced options. Easier option for all night lights. Run time will appear in Minutes.</li>"+		                     
      "<li><b>Modes:</b> If your not using modes keep at 'Any'. If you want to only run during a specific Mode click and select that mode <br> If changed and need to get back to 'Any', go to Hub settings / Modes, and add new mode 'Any'"+	                     
      "<li><b>Motion:</b> Selecting a motion group # will toggle a device if Motion device is triggerd. Select Motion device in Options below table, Run or while active time in Advanced options. Will not change the scheduled on times if any.<br>If On to Off enabled the, the switch if On will turn Off for the time selected then back On. Makes it look like someone is Home!<br>For both Off-On-Off or On-Off-On cases the Motion Sensor needs to clear back to inactive to trigger again. Can use Motion triggers with or without a schedule start time entered."+	
      "<li><b>Pause Case:</b> Select 'None' or case # in table, set up in Options below table to pause upcoming schedule for that device only.</li>"+   
      "<li><b>Actions Case:</b> Select 'None' or case # in table, set up in Option below table. Cases 1 - 2 (blink) will work with startime defined schedules. Cases 3+ will not use start times, they will trigger on the selected action.</li>"+    	                     
      "<li><b>Remote Switch:</b> Optional, Select a virtual or real switch to remotely turn off all switches and pause/resume schedules (optional). Use case EX: Rain delay for spinklers, dashboard access.</li>"+
      "<li><b>Leak Detect:</b> This will shut off and stop every device schedule and actions permanently until a user unchecks 'Pause All Devices' in advanced options. <br> Use case: if you have a water leak in house, can shut off an installed water valve listed in table. Not recommended to use if using 'wet' (rain) sensor for sprinklers.<br> Only triggers if sensor goes from Dry to Wet. If still 'wet' this will not prevent the valve from being manually turned on outside of app.</li>"+
      "<li><b>Runs Per Day:</b> Optional, Typically for sprinklers to run in morning and evening. Select 2 in table. Then select Hours after 1st run start in advanced options. <br>Note: If start time plus 2nd run offset exceeds hour 24 it will run at hour 23 2nd time. Start will not roll over into next day.</li>"+                    
      "<li><b>Pause Case 6 Variables:</b> Select Hub varibale(s), These variables must be a set up as a Number or String Datatype. Will only pause when variable value 'changes' and then pause criteria is met</li>"+   
      "<li><b>You must hit DONE at page bottom to save App after first making.</b></li>"+                    
      "</ul>")
      }
  }
}
//////////////////////////////////////////////////////////////////  Main Table Build ///////////////////////////////////////////////////////////////
String displayTable() {
    //////////////////////////// Table Input Fields /////////////////////////////
    if(state.newStartTime) {/////// Input Start Time 
      input name: "newStartTime", type: "time", title:getFormat("noticable","<b>Enter Start/On Time, Applies to all checked days for Switch.</b><br><small>Uses 24hr time, &nbsp Hit Update</small>"), defaultValue: "", required: false,  submitOnChange:true, width: 5, newLineAfter: true, style: 'margin-left:10px'
      input "clearStartTime", "bool", title: "<b>Clear Start Time</b>" + getFormat("blueRegular","Clearing Start time resets it to 'Select'. Triggers and Motion cases (if using) will still operate the device regardless if no Days or Start time has been set."), submitOnChange:true, style: 'margin-left:30px'
        if(newStartTime || clearStartTime) {
           state.DeVices[state.newStartTime].startTime = newStartTime 
           if (clearStartTime) {state.DeVices[state.newStartTime].startTime = "000000000000000000000000000000"; app?.updateSetting("clearStartTime",[value:"false",type:"bool"])}
     	   state.remove("newStartTime")
           app.removeSetting("newStartTime")
           paragraph "<script>{changeSubmit(this)}</script>"
	    } 
	} 
   if(state.newDurTime) {//////// Input Run Duration 
      input name: "newDurTime", type: "number", title:getFormat("noticable","<b>Enter Run/On Duration in Minutes, Applies to all checked days for Switch.</b> &nbsp <small>Hit Enter</small>"), defaultValue: 0, required: false,  submitOnChange:true, width: 8, newLineAfter: true, style: 'margin-left:10px'
        if(newDurTime) {
          state.DeVices[state.newDurTime].durTime = newDurTime
          state.remove("newDurTime")
	      app.removeSetting("newDurTime")
          paragraph "<script>{changeSubmit(this)}</script>"
	     }
	} 
    if(state.newOffsetTime) { ///////// Sunrise / Sunset Offset time  //// ver1.1.0
     input name: "newOffsetTime", type: "number", title:getFormat("noticable","<b>Enter +/- Offset time from Sunrise or Sunset in minutes, Applies to all checked days for Switch.</b><br><small>EX: 30, -30, or -90, &nbsp Hit Enter</small>"), defaultValue: 0, required: false,  submitOnChange:true, accepts: "-1000 to 1000", range: "-1000..1000", width: 8, newLineAfter: true, style: 'margin-left:10px'
       if(newOffsetTime) {
          state.DeVices[state.newOffsetTime].offset = newOffsetTime
          state.remove("newOffsetTime")
	      app.removeSetting("newOffsetTime")
          paragraph "<script>{changeSubmit(this)}</script>"
	     }
	} 
    if(state.newMode) { //////// Input Modes  
      input name: "newMode", type: "mode", title: getFormat("noticable","<b>Select during which mode this device will only run.</b><br> <small> Home, Away, etc.. &nbsp Or Any if No Selection</small>"), defaultValue: "", submitOnChange:true, width: 7, required: false, newLineAfter: true, style: 'margin-left:10px'
          if(newMode) {
          state.DeVices[state.newMode].modes = newMode
          state.remove("newMode")
	      app.removeSetting("newMode")
          paragraph "<script>{changeSubmit(this)}</script>"
	     }
	}   
    ////////////////////////////// Table Buttons / Entries /////////////////////////////
    if(state.resetTotal) { def dev = DeVices.find{"$it.id" == state.resetTotal}  //// Reset Cumulative time and counts per device Button       
		state.DeVices[state.resetTotal].start = now()
        state.DeVices[state.resetTotal].total = 0
        state.DeVices[state.resetTotal].counts = 0
        state.remove("resetTotal")
	    }
    if(state.deviceState) { def dev = DeVices.find{"$it.id" == state.deviceState}  ////ver2.0.3 Toggle device state  
        //log.debug "${app.label} -- TEST state.deviceState = ${state.deviceState}, dev = ${dev}"
        if (dev.currentSwitch == "on") {dev.off()}
        else if (dev.currentSwitch == "off") {dev.on()}
       	else if (dev.currentValve == "closed") {dev.open()}
		else if (dev.currentValve == "open") {dev.close()}
          endif
        state.remove("deviceState")                          
        app.removeSetting("deviceState")
        paragraph "<script>{changeSubmit(this)}</script>"                   
        }
    if(state.sunCheckedBox) { def dev = DeVices.find{"$it.id" == state.sunCheckedBox}  //// Sunday - Saturday, odd day, Check Boxes
        state.DeVices[state.sunCheckedBox].sun = true; state.remove("sunCheckedBox") }
	else if(state.sunUnCheckedBox) {def dev = DeVices.find{"$it.id" == state.sunUnCheckedBox}  
	    state.DeVices[state.sunUnCheckedBox].sun = false; state.remove("sunUnCheckedBox") }
     endif
    if(state.monCheckedBox) {def dev = DeVices.find{"$it.id" == state.monCheckedBox}  
	    state.DeVices[state.monCheckedBox].mon = true; state.remove("monCheckedBox") }
	else if(state.monUnCheckedBox) {def dev = DeVices.find{"$it.id" == state.monUnCheckedBox}  
	    state.DeVices[state.monUnCheckedBox].mon = false; state.remove("monUnCheckedBox") }
     endif
    if(state.tueCheckedBox) {def dev = DeVices.find{"$it.id" == state.tueCheckedBox}  
	    state.DeVices[state.tueCheckedBox].tue = true; state.remove("tueCheckedBox") }
	else if(state.tueUnCheckedBox) {def dev = DeVices.find{"$it.id" == state.tueUnCheckedBox}  
	    state.DeVices[state.tueUnCheckedBox].tue = false; state.remove("tueUnCheckedBox") }
     endif
    if(state.wedCheckedBox) {def dev = DeVices.find{"$it.id" == state.wedCheckedBox}  
	    state.DeVices[state.wedCheckedBox].wed = true; state.remove("wedCheckedBox") }
	else if(state.wedUnCheckedBox) {def dev = DeVices.find{"$it.id" == state.wedUnCheckedBox}  
	    state.DeVices[state.wedUnCheckedBox].wed = false; state.remove("wedUnCheckedBox") }
     endif
    if(state.thuCheckedBox) {def dev = DeVices.find{"$it.id" == state.thuCheckedBox}  
	    state.DeVices[state.thuCheckedBox].thu = true; state.remove("thuCheckedBox") }
	else if(state.thuUnCheckedBox) {def dev = DeVices.find{"$it.id" == state.thuUnCheckedBox}  
	    state.DeVices[state.thuUnCheckedBox].thu = false; state.remove("thuUnCheckedBox") }
     endif
    if(state.friCheckedBox) {def dev = DeVices.find{"$it.id" == state.friCheckedBox}  
	    state.DeVices[state.friCheckedBox].fri = true; state.remove("friCheckedBox") }
	else if(state.friUnCheckedBox) {def dev = DeVices.find{"$it.id" == state.friUnCheckedBox}  
	    state.DeVices[state.friUnCheckedBox].fri = false; state.remove("friUnCheckedBox") }
     endif
    if(state.satCheckedBox) {def dev = DeVices.find{"$it.id" == state.satCheckedBox}  
	    state.DeVices[state.satCheckedBox].sat = true; state.remove("satCheckedBox") }
	else if(state.satUnCheckedBox) {def dev = DeVices.find{"$it.id" == state.satUnCheckedBox}  
	    state.DeVices[state.satUnCheckedBox].sat = false; state.remove("satUnCheckedBox") }
     endif
    if(state.oddCheckedBox) {def dev = DeVices.find{"$it.id" == state.oddCheckedBox}  //// ver1.0.2
	    state.DeVices[state.oddCheckedBox].odd = true; state.remove("oddCheckedBox") }
	else if(state.oddUnCheckedBox) {def dev = DeVices.find{"$it.id" == state.oddUnCheckedBox}  
	    state.DeVices[state.oddUnCheckedBox].odd = false; state.remove("oddUnCheckedBox") }
     endif
    if(state.sunriseCheckedBox) {def dev = DeVices.find{"$it.id" == state.sunriseCheckedBox}  //// ver2.0.3 Off at Sunrise
    	state.DeVices[state.sunriseCheckedBox].sunrise = true; state.remove("sunriseCheckedBox") }
	else if(state.sunriseUnCheckedBox) {def dev = DeVices.find{"$it.id" == state.sunriseUnCheckedBox} 
  		state.DeVices[state.sunriseUnCheckedBox].sunrise = false; state.remove("sunriseUnCheckedBox") }
     endif
    if(state.pauseCase0) {def dev = DeVices.find{"$it.id" == state.pauseCase0}  
	    state.DeVices[state.pauseCase0].specialPause = 0; state.remove("pauseCase0") }
    else if(state.pauseCase1) {def dev = DeVices.find{"$it.id" == state.pauseCase1}  
	    state.DeVices[state.pauseCase1].specialPause = 1; state.remove("pauseCase1") }
	else if(state.pauseCase2) {def dev = DeVices.find{"$it.id" == state.pauseCase2}  
	    state.DeVices[state.pauseCase2].specialPause = 2; state.remove("pauseCase2") }
    else if(state.pauseCase3) {def dev = DeVices.find{"$it.id" == state.pauseCase3}  
	    state.DeVices[state.pauseCase3].specialPause = 3; state.remove("pauseCase3") }
    else if(state.pauseCase4) {def dev = DeVices.find{"$it.id" == state.pauseCase4}  
	    state.DeVices[state.pauseCase4].specialPause = 4; state.remove("pauseCase4") }
    else if(state.pauseCase5) {def dev = DeVices.find{"$it.id" == state.pauseCase5}  
	    state.DeVices[state.pauseCase5].specialPause = 5; state.remove("pauseCase5") }
    else if(state.pauseCase6) {def dev = DeVices.find{"$it.id" == state.pauseCase6}  
	    state.DeVices[state.pauseCase6].specialPause = 6; state.remove("pauseCase6") }
     endif
    if(state.motionCase0) {def dev = DeVices.find{"$it.id" == state.motionCase0}  
	    state.DeVices[state.motionCase0].motionCase = 0; state.remove("motionCase0") }
    else if(state.motionCase1) {def dev = DeVices.find{"$it.id" == state.motionCase1}  
	    state.DeVices[state.motionCase1].motionCase = 1; state.remove("motionCase1") }
	else if(state.motionCase2) {def dev = DeVices.find{"$it.id" == state.motionCase2}  
	    state.DeVices[state.motionCase2].motionCase = 2; state.remove("motionCase2") }
     endif
    if(state.actions0) {def dev = DeVices.find{"$it.id" == state.actions0}  
	    state.DeVices[state.actions0].actions = 0; state.remove("actions0") }
    else if(state.actions1) {def dev = DeVices.find{"$it.id" == state.actions1}  
	    state.DeVices[state.actions1].actions = 1; state.remove("actions1") }
    else if(state.actions2) {def dev = DeVices.find{"$it.id" == state.actions2}  
	    state.DeVices[state.actions2].actions = 2; state.remove("actions2") }
    else if(state.actions3) {def dev = DeVices.find{"$it.id" == state.actions3}  
	    state.DeVices[state.actions3].actions = 3; state.remove("actions3") }
     endif
    if(state.trigger0) {def dev = DeVices.find{"$it.id" == state.trigger0}  
	    state.DeVices[state.trigger0].trigger = 0; state.remove("trigger0") }
    else if(state.trigger1) {def dev = DeVices.find{"$it.id" == state.trigger1}  
	    state.DeVices[state.trigger1].trigger = 1; state.remove("trigger1") }
    else if(state.trigger2) {def dev = DeVices.find{"$it.id" == state.trigger2}  
	    state.DeVices[state.trigger2].trigger = 2; state.remove("trigger2") }
    else if(state.trigger3) {def dev = DeVices.find{"$it.id" == state.trigger3}  
	    state.DeVices[state.trigger3].trigger = 3; state.remove("trigger3") }
    else if(state.trigger4) {def dev = DeVices.find{"$it.id" == state.trigger4}  
	    state.DeVices[state.trigger4].trigger = 4; state.remove("trigger4") }
     endif
    if(state.pauseCheckedBox) {def dev = DeVices.find{"$it.id" == state.pauseCheckedBox}  //// ver1.0.2
	    state.DeVices[state.pauseCheckedBox].pause = true; state.remove("pauseCheckedBox") }
	else if(state.pauseUnCheckedBox) {def dev = DeVices.find{"$it.id" == state.pauseUnCheckedBox}  
	    state.DeVices[state.pauseUnCheckedBox].pause = false; state.remove("pauseUnCheckedBox") }
     endif 
    if(state.sunTimeCheckedBox) {def dev = DeVices.find{"$it.id" == state.sunTimeCheckedBox}   ///// Sunrise / Sunset //// ver1.1.0
        state.DeVices[state.sunTimeCheckedBox].sunTime = true; state.remove("sunTimeCheckedBox") }
	else if(state.sunTimeUnCheckedBox) {def dev = DeVices.find{"$it.id" == state.sunTimeUnCheckedBox}  
	    state.DeVices[state.sunTimeUnCheckedBox].sunTime = false; state.remove("sunTimeUnCheckedBox") }
     endif
    if(state.sunsetCheckedBox) {def dev = DeVices.find{"$it.id" == state.sunsetCheckedBox}  
	    state.DeVices[state.sunsetCheckedBox].sunset = true; state.remove("sunsetCheckedBox") }
	else if(state.sunsetUnCheckedBox) {def dev = DeVices.find{"$it.id" == state.sunsetUnCheckedBox}  
	    state.DeVices[state.sunsetUnCheckedBox].sunset = false; state.remove("sunsetUnCheckedBox") }
     endif
    if(state.runsDayBox1) {def dev = DeVices.find{"$it.id" == state.runsDayBox1}  //// ver1.2.1
	    state.DeVices[state.runsDayBox1].runsDay = 1; state.remove("runsDayBox1") }
	else if(state.runsDayBox2) {def dev = DeVices.find{"$it.id" == state.runsDayBox2}  
	    state.DeVices[state.runsDayBox2].runsDay = 2; state.remove("runsDayBox2") }
     endif
 /////////////////////////////// Table Header Build
	String str = "<script src='https://code.iconify.design/iconify-icon/1.0.0/iconify-icon.min.js'></script>"   //////// font-weight: bold !important; word-wrap: break-word !important; white-space: normal!important
        str += "<style>.mdl-data-table tbody tr:hover{background-color:inherit} .tstat-col td, .tstat-col th {font-size:15px !important; padding:1px 3px;text-align:center} + .tstat-col td {font-size:13px  }" +
        "</style><div style='overflow-x:auto'><table class='mdl-data-table tstat-col' style='border:3px solid black'>" + 
        "<thead><tr style='border-bottom:2px solid black'><th>#</th>" +	
        "<th style='border-right:2px solid black'><small><small>App ver${state.version}</small></small><br>Device</th>" +
        "<th style='border-right:2px solid black'>State</th>" +     
		"<th style='width: 40px !important'>Start<br>Time</th>" +
        "<th>Use Sun<br>Set/Rise?</th>" +  //// ver1.1.0
        "<th>Rise or<br>Set?</th>" +  //// ver1.1.0    
        "<th style='width: 60px !important; border-right:2px solid black'>Offset<br>+/-Min</th>" +  //// ver1.1.0
        "<th style='width: 60px !important; border-right:2px solid black'>Off @<br>Sunrise</th>" +  //// ver2.0.3    
        "<th style='border-right:2px solid black'>Run<br>Time</th>" +  
        "<th style='border-right:2px solid black'>Runs<br>A Day</th>" +  //// ver1.2.1    
        "<th>Sun</th>" + "<th>Mon</th>" + "<th>Tue</th>" + "<th>Wed</th>" + "<th>Thu</th>" + "<th>Fri</th>" + "<th>Sat</th>" +       
        "<th style='border-right:2px solid black'>Odd<br>Days?</th>"+  //// ver1.0.3
        "<th style='border-right:2px solid black'>Run<br>Mode</th>"+  //// ver1.4.7  
        "<th style='border-right:2px solid black'>Use<br>Motion</th>"+  //// ver2.0.1 
        "<th style='border-right:2px solid black'>Use<br>Trigger</th>"+    
        "<th style='border-right:2px solid black'>Use<br>Actions</th>"+    
        "<th style='border-right:2px solid black'>Pause<br>Case?</th>"+  //// ver1.4.7 
        "<th style='border-right:2px solid black'>Sensor<br>Paused</th>"+    //// ver1.0.3     
        "<th style='border-right:2px solid black'>Manual<br>Pause?</th>"+    //// ver1.0.3    
        "<th>Last<br>Active" + 
        "<th>On<br>Counts" +    
        "<th>Total<br>OnTime</th>"+
        "<th>Reset<br>OnTime</th></tr></thead>"
        
    sunHandler() // Get latest Sunrise/Sunset times and apply offset
    int zone = 0
    DeVices.sort{it.displayName.toLowerCase()}.each {dev ->
        zone += 1
        state.DeVices["$dev.id"].zone = zone
        String thisStartTime
        	if (state.DeVices["$dev.id"].startTime == "000000000000000000000000000000") {thisStartTime = "Select"} // For app first load
        	else  thisStartTime = state.DeVices["$dev.id"].startTime.substring(11, state.DeVices["$dev.id"].startTime.length() - 12) 
        String thisDurTime = state.DeVices["$dev.id"].durTime 
        String thisOffsetTime = state.DeVices["$dev.id"].offset
        String thisCron = state.DeVices["$dev.id"].cron
                
        ////////////////////////// Active/On Time Calc
        int counts = state.DeVices["$dev.id"].counts   
        int total = state.DeVices["$dev.id"].total / 1000
        float totalDays = (total / 86400) as float //// ver1.1.1
        int hours = total / 3600
        total = total % 3600
	    int mins = total / 60
	    int secs = total % 60
        String time = "$hours:${mins < 10 ? "0" : ""}$mins:${secs < 10 ? "0" : ""}$secs"
         if (inDaysCBool) {time = String.format("%.3f", totalDays)} // For table Only  //// ver1.1.1
	     if (state.DeVices["$dev.id"].sunTime) {startTime = thisStartTime} //// ver1.1.0
         else {startTime = buttonLink("o$dev.id", thisStartTime, "MediumBlue")}
         endif
        
        String devLink = "<a href='/device/edit/$dev.id' target='_blank' title='Open Device Page for $dev'>$dev"
        String deviceStateT  //// Toggle Device State button
        	if (dev.currentSwitch) {deviceStateT = buttonLink("Z$dev.id", dev.currentSwitch)} 
        	else if (dev.currentValve) {deviceStateT = buttonLink("Z$dev.id", dev.currentValve)} 
       	String resetTotal = buttonLink("z$dev.id", state.resetIcon) 
        String durTime = buttonLink("q$dev.id", thisDurTime, "MediumBlue") 
        String mode = buttonLink("1$dev.id", state.DeVices["$dev.id"].modes, "MediumBlue") 
        String sunCheckBoxT = (state.DeVices["$dev.id"].sun) ? buttonLink("a$dev.id", state.greenCheckBox) : buttonLink("b$dev.id", state.unCheckedBox)  
        String monCheckBoxT = (state.DeVices["$dev.id"].mon) ? buttonLink("c$dev.id", state.greenCheckBox) : buttonLink("d$dev.id", state.unCheckedBox)
        String tueCheckBoxT = (state.DeVices["$dev.id"].tue) ? buttonLink("e$dev.id", state.greenCheckBox) : buttonLink("f$dev.id", state.unCheckedBox)
        String wedCheckBoxT = (state.DeVices["$dev.id"].wed) ? buttonLink("g$dev.id", state.greenCheckBox) : buttonLink("h$dev.id", state.unCheckedBox)
        String thuCheckBoxT = (state.DeVices["$dev.id"].thu) ? buttonLink("i$dev.id", state.greenCheckBox) : buttonLink("j$dev.id", state.unCheckedBox)
        String friCheckBoxT = (state.DeVices["$dev.id"].fri) ? buttonLink("k$dev.id", state.greenCheckBox) : buttonLink("l$dev.id", state.unCheckedBox)
        String satCheckBoxT = (state.DeVices["$dev.id"].sat) ? buttonLink("m$dev.id", state.greenCheckBox) : buttonLink("n$dev.id", state.unCheckedBox)
        String oddCheckBoxT = (state.DeVices["$dev.id"].odd) ? buttonLink("r$dev.id", state.steelBlueCheckBox) : buttonLink("s$dev.id", state.unCheckedBox)  //// ver1.0.3
        String runsPerDayT = (state.DeVices["$dev.id"].runsDay == 1) ? buttonLink("u$dev.id", state.steelBlueCircle1) : buttonLink("p$dev.id", state.darkOrangeCircle2)  //// ver1.2.1
        String motionCaseT
        	if (state.DeVices["$dev.id"].motionCase == 0) {motionCaseT = buttonLink("A$dev.id", "None", "blue", "14px")}
        	else if (state.DeVices["$dev.id"].motionCase == 1) {motionCaseT = buttonLink("B$dev.id", state.motionIcon1)}
        	else if (state.DeVices["$dev.id"].motionCase == 2) {motionCaseT = buttonLink("C$dev.id", state.motionIcon2)}  //// ver1.2.1
             endif
       String specialPauseT 
        	if (state.DeVices["$dev.id"].specialPause == 0) {specialPauseT = buttonLink("4$dev.id", "None", "blue", "14px")}
        	else if (state.DeVices["$dev.id"].specialPause == 1) {specialPauseT = buttonLink("5$dev.id", state.pauseCaseIcon1)}
        	else if (state.DeVices["$dev.id"].specialPause == 2) {specialPauseT = buttonLink("6$dev.id", state.pauseCaseIcon2)} //// ver1.2.1
        	else if (state.DeVices["$dev.id"].specialPause == 3) {specialPauseT = buttonLink("7$dev.id", state.pauseCaseIcon3)} //// ver2.0.4
        	else if (state.DeVices["$dev.id"].specialPause == 4) {specialPauseT = buttonLink("8$dev.id", state.pauseCaseIcon4)} 
            else if (state.DeVices["$dev.id"].specialPause == 5) {specialPauseT = buttonLink("9$dev.id", state.pauseCaseIcon5)}
        	else if (state.DeVices["$dev.id"].specialPause == 6) {specialPauseT = buttonLink("aa$dev.id", state.pauseCaseIcon6)}
             endif
		String actionsT 
        	if (state.DeVices["$dev.id"].actions == 0) {actionsT = buttonLink("G$dev.id", "None", "blue", "14px")}
        	else if (state.DeVices["$dev.id"].actions == 1) {actionsT = buttonLink("H$dev.id", state.actionsIcon1)}  
        	else if (state.DeVices["$dev.id"].actions == 2) {actionsT = buttonLink("I$dev.id", state.actionsIcon2)}
        	else if (state.DeVices["$dev.id"].actions == 3) {actionsT = buttonLink("J$dev.id", state.actionsIcon3)}
        	 endif
        String triggerT
        	if (state.DeVices["$dev.id"].trigger == 0) {triggerT = buttonLink("K$dev.id", "None", "blue", "14px")}
        	else if (state.DeVices["$dev.id"].trigger == 1) {triggerT = buttonLink("L$dev.id", state.triggerIcon1)}
        	else if (state.DeVices["$dev.id"].trigger == 2) {triggerT = buttonLink("M$dev.id", state.triggerIcon2)}
        	else if (state.DeVices["$dev.id"].trigger == 3) {triggerT = buttonLink("N$dev.id", state.triggerIcon3)}
        	else if (state.DeVices["$dev.id"].trigger == 4) {triggerT = buttonLink("O$dev.id", state.triggerIcon4)}
        	 endif
        String pauseCheckBoxT = (state.DeVices["$dev.id"].pause) ? buttonLink("t$dev.id", state.pauseIcon) : buttonLink("v$dev.id", state.playIcon) 
        String sunTimeCheckBoxT = (state.DeVices["$dev.id"].sunTime) ? buttonLink("w$dev.id", state.purpleCheckBox) : buttonLink("x$dev.id", state.unCheckedBox)  //// ver1.1.0
        String sunsetCheckBoxT = (state.DeVices["$dev.id"].sunset) ? buttonLink("D$dev.id", state.moonIcon) : buttonLink("E$dev.id", state.sunIcon)  //// ver1.1.0
       	String sunriseCheckBoxT = (state.DeVices["$dev.id"].sunrise) ? buttonLink("2$dev.id", state.steelBlueCheckBox) : buttonLink("3$dev.id", state.unCheckedBox)  //// ver2.0.3
        String offset = buttonLink("F$dev.id", thisOffsetTime, "MediumBlue")  //// ver1.1.0
        //// if (logEnableBool) {log.debug "${app.label} -- Page Refresh, **${dev}**, StartTime-${thisStartTime}...Duration-${thisDurTime}...Counts-${counts}...Cron-${thisCron}"}
        
  /////////////////////////////// Table Rows Build
        str += "<tr style='color:black'><td>${state.DeVices["$dev.id"].zone}</td>" +     
        "<td style='border-right:2px solid black'>$devLink</td>" 
       	if (dev.currentSwitch) {str += "<td style='font-weight:bold; border-right:2px solid black; color:${dev.currentSwitch == "on" ? "green" : "red"}'title='Click to Change State'>$deviceStateT</td>"}   //////xxxxxxxxxxxxxxxxxxxxxx/////////
        else if (dev.currentValve) {str += "<td style='font-weight:bold; border-right:2px solid black; color:${dev.currentValve == "open" ? "green" : "red"}'title='Click to Change State'>$deviceStateT</td>"}    //////xxxxxxxxxxxxxxxxxxxxx/////////
        	endif    
       	if (state.DeVices["$dev.id"].sunTime) {str +="<td title='Start Time with Sunset or Sunrise +/- offset'>$startTime</td>"}  //// ver1.1.0
    	else str += "<td style='font-weight:bold !important' title='${thisStartTime ? "Click to Change Start Time, Or leave as Select if Motion trigger Only" : "Select"}'>$startTime</td>"
     		endif    
      	str += "<td title='Use Sunrise or Sunset for Start time'>$sunTimeCheckBoxT</td>"  //// ver1.0.4    
      	if (state.DeVices["$dev.id"].startTime == "000000000000000000000000000000" && state.DeVices["$dev.id"].motionCase != 0) {str += "<td style='border-right:2px solid black'; colspan=2 title='No Start time was entered and using motion only'>Start @ Motion</td>"}  ////ver2.0.3
    	else if (state.DeVices["$dev.id"].sunTime) {str += "<td title='Sunset start (moon), otherwise Sunrise start(sun)'>$sunsetCheckBoxT</td>" +  //// ver1.1.0
      	"<td style='font-weight:bold; border-right:2px solid black'title='${thisOffsetTime ? "Click to set +/- minutes for Sunset or Sunrise start time" : "Select"}'>$offset</td>"  }
      	else {str += "<td style='border-right:2px solid black'; colspan=2 title='User Entered time (not sunset/sunrise)'>User Time</td>"}   //// ver1.0.4   
      		endif
     	str += "<td style='border-right:2px solid black' title='Check Box to turn Device Off at Sunrise'>$sunriseCheckBoxT</td>"  ////ver2.0.3
      	if (state.DeVices["$dev.id"].startTime == "000000000000000000000000000000" && state.DeVices["$dev.id"].motionCase == 1 && !motionActive1) {str += "<td style='border-right:2px solid black' title='Change Motion On duration time in advanced Options'>$motionRunTime1</td>" }  ////ver2.0.3
     	else if (state.DeVices["$dev.id"].startTime == "000000000000000000000000000000" && state.DeVices["$dev.id"].motionCase == 2 && !motionActive2) {str += "<td style='border-right:2px solid black' title='Change Motion On duration time in advanced Options'>$motionRunTime2</td>" }  ////ver2.0.4
        else if (state.DeVices["$dev.id"].motionCase == 1 && motionActive1) {str += "<td style='border-right:2px solid black' title='Runs while motion still Active'>Active</td>" }  ////ver2.1.0
        else if (state.DeVices["$dev.id"].motionCase == 2 && motionActive2) {str += "<td style='border-right:2px solid black' title='Runs while motion still Active'>Active</td>" } 
        else if (state.DeVices["$dev.id"].trigger == 4) {str += "<td style='border-right:2px solid black' title='Runs with Mode Trigger'>Other</td>" } 
        else if (state.DeVices["$dev.id"].trigger == 1 || state.DeVices["$dev.id"].trigger == 2 || state.DeVices["$dev.id"].trigger == 3) {str += "<td style='border-right:2px solid black' title='Runs with Triggers'>Other</td>" } 
        else if (!state.DeVices["$dev.id"].sunrise) {str += "<td style='font-weight:bold; border-right:2px solid black' title='Click to Change Run Duration Minutes'>$durTime</td>" }  ////ver2.03
     	else {str += "<td style='border-right:2px solid black' >$thisDurTime</td>"} 
     		endif
        str += "<td style='border-right:2px solid black' title='${thisDurTime ? "Click to Change to run Once or Twice a day" : "Select"}'>$runsPerDayT</td>"   //// ver1.2.1
     	if (state.DeVices["$dev.id"].startTime == "000000000000000000000000000000" && state.DeVices["$dev.id"].motionCase != 0) {str += "<td colspan=7 title='Using Motion Trigger Only, No Start time selected'>Using Motion Only, All days</td>"}  //// ver2.0.3
       	else if (state.DeVices["$dev.id"].startTime == "000000000000000000000000000000" && state.DeVices["$dev.id"].motionCase == 0 && (state.DeVices["$dev.id"].trigger == 1 || state.DeVices["$dev.id"].trigger == 2 || state.DeVices["$dev.id"].trigger == 3 || state.DeVices["$dev.id"].trigger == 4))
                {str += "<td colspan=7 title='Using unscheduled Trigger Cases Only, No Start time selected'>Using unscheduled Trigger Case</td>"} 
        else if (state.DeVices["$dev.id"].odd) {str += "<td colspan=7 title='Run Every Odd Day of Month'>Run Every Odd day of Month</td>"}  //// ver1.0.2
     	else {str +=   
            "<td title='Check Box to select Day'>$sunCheckBoxT</td>" +  
            "<td title='Check Box to select Day'>$monCheckBoxT</td>" +  
            "<td title='Check Box to select Day'>$tueCheckBoxT</td>" +  
            "<td title='Check Box to select Day'>$wedCheckBoxT</td>" +  
            "<td title='Check Box to select Day'>$thuCheckBoxT</td>" +  
            "<td title='Check Box to select Day'>$friCheckBoxT</td>" +  
            "<td title='Check Box to select Day'>$satCheckBoxT</td>"
            }
      	str += "<td style='border-right:2px solid black' title='Check Box to Run on Odd Days only'>$oddCheckBoxT</td>" +
        "<td style='border-right:2px solid black' title='Click to Change Mode'>$mode</td>" +     
        "<td style='border-right:2px solid black' title='Select None or which set of Motion sensors(s) from advanced options to use for this device'>$motionCaseT</td>" +
        "<td style='border-right:2px solid black' title='Select None or which set of Triggers to use for this device'>$triggerT</td>"     
        if (dev.currentValve) {str += "<td style='border-right:2px solid black' title='Valves Cant use special Actions'>N/A</td>"} // Valve cant use Actions
        	else  {str += "<td style='border-right:2px solid black' title='Select device actions or none'>$actionsT</td>"}     
        str += "<td style='border-right:2px solid black' title='Check Box to have this device use the special schedule pause cases like Wet/Moisture sched pause'>$specialPauseT</td>"
        if (state.DeVices["$dev.id"].sensorPause) {str += "<td style='border-right:2px solid black' title='Shows if device is Paused by a sensor pause case, Red is paused, Green is run'>$state.pauseIconGrey</td>"} 
        	else {str += "<td style='border-right:2px solid black' title='Shows if device is Paused by a sensor pause case, Red is paused, Green is run'>$state.playIconGrey</td>"} 
        str += "<td style='border-right:2px solid black' title='Click to Pause this device schedule, Red is paused, Green is run'>$pauseCheckBoxT</td>" + 
        "<td style='width: 70px; font-size:11px !important' title='Last Time Device was Active' >${state.DeVices["$dev.id"].onTime}</td>"+
        "<td style='font-weight:bold' title='Total On Counts' >${state.DeVices["$dev.id"].counts}</td>" 
        if (dev.currentSwitch) {str += "<td style='font-weight:bold; color:${dev.currentSwitch == "on" ? "green" : "red"}'>$time</td>" }  
        	else if (dev.currentValve) {str += "<td style='font-weight:bold; color:${dev.currentValve == "open" ? "green" : "red"}'>$time</td>" }   //// ver1.20 
        endif 
        str += "<td style='border-right:3px solid black' title='Reset Total On Time & Counts for $dev' style='padding:0px 0px'>$resetTotal</td></tr>" 
        }
   	str += "</table></div>"
}
String buttonLink(String btnName, String linkText, color = SteelBlue, font = "13px") { //// Device Link Format
  	"<div class='form-group'><input type='hidden' name='${btnName}.type' value='button'></div><div><div class='submitOnChange' onclick='buttonClick(this)' style='color:$color;cursor:pointer;font-size:$font'>$linkText</div></div><input type='hidden' name='settings[$btnName]' value=''>"
	}
/////////////////////////////////////////////////////////// Schedules and Subscribes //////////////////////////////////////////////////////////
void initialize() {
     subscribe(DeVices, "switch.on", onTimeHandler)
	 subscribe(DeVices, "switch.off", offTimeHandler)
     subscribe(DeVices, "valve.open", onTimeHandler)  //// ver1.20
	 subscribe(DeVices, "valve.closed", offTimeHandler)  //// ver1.20
     subscribe(remoteSwitch, "switch.on", remoteOffHandler)
     subscribe(remoteSwitch, "switch.off", remoteOffHandler)
     subscribe(wetLeakSensor, "water.wet", remoteOffHandler)  //// ver2.0.1
     subscribe(wetLeakSensor, "water.dry", remoteOffHandler)  
     subscribe(motionSensor1, "motion.active", motionHandler1)  //// ver2.0.1 
   	 subscribe(motionSensor2, "motion.active", motionHandler2)  
     subscribe(motionSensor1, "motion.inactive", motionHandler1)  //// ver2.1.0 
   	 subscribe(motionSensor2, "motion.inactive", motionHandler2)
     subscribe(wetSensor, "water.wet", sensorUpdate)  //// ver1.0.1
     subscribe(wetSensor, "water.dry", sensorUpdate)  
     subscribe(contactSensor, "contact.open",  sensorUpdate) 
     subscribe(contactSensor, "contact.closed",  sensorUpdate)	
     subscribe(humidSensor, "humidity", sensorUpdate)  //// ver1.3.0
     subscribe(voltageSensor, "voltage", sensorUpdate)  //// ver2.0.3
     subscribe(contactTrigger, "contact.open", contactTrigHandler) 
     subscribe(contactTrigger, "contact.closed", contactTrigHandler)
     subscribe(switchTrigger, "switch.on", switchTrigHandler) 
     subscribe(switchTrigger, "switch.off", switchTrigHandler)
     subscribe(tempTrigger, "temperature", tempTrigHandler) 
     subscribe(location, "mode", modeTrigHandler)
     if(varConnect) {varConnect.each{ subscribe(location,"variable:${it.toString()}","sensorUpdate") } }
     	//else unsubscribe (sensorUpdate)
    
     schedule("0 0 1 ? * * *", sunHandler)   // Every day at 1am to get new sunrise/sunset times  //// ver1.1.0
     if (allOffBool) {schedule("${state.allOffCron}", allOffHandler)} // Set All off Time  //// ver1.4.0
     else {unschedule (allOffHandler)}	 
    
  ////////////// Set device cron schedules
     DeVices.sort{it.displayName.toLowerCase()}.each {dev ->
         zone = state.DeVices["$dev.id"].zone
         if (state.DeVices["$dev.id"].cron && state.DeVices["$dev.id"].durTime != 0) {
            schedule("${state.DeVices["$dev.id"].cron}", switchOnHandler, [data:zone, overwrite:false]) 
            if (logEnableBool) {log.debug "${app.label} -- SCHEDULED Device **${dev}**......duration = ${state.DeVices["$dev.id"].durTime}.....cronString = ${state.DeVices["$dev.id"].cron}"}
         }
}  }
/////////////////////////////////////////////////////////////// Sensor Updates //////////////////////////////////////////////////////////////////
def sensorUpdate(evt) {
    if (logEnableBool) {log.debug "${app.label} -- sensorUpdate() CALLED, ${evt.device}"} /// to ${evt}" 
    sensorScan() // Update all sensor array states/values
}
//////////////////////////////////////////////?//////////// All Sensor State Scan //////////////////////////////////////////////////////////////
def sensorScan() { //// Scan all sensors and multiples and update status  //// ver2.1.0
    if (logEnableBool) {log.debug "${app.label} -- sensorScan() CALLED"}
    if (humidSensor) {for(int i = 0; i < humidSensor.currentHumidity.size(); i++) { // Scan arrary
        if (humidSensor.currentHumidity[i] >= pauseHumidValue && !invertHumidBool) {state.humidStateDisplay = "<text style='color:red; font-weight: bold' >${humidSensor.currentHumidity}%, </text>" + "&nbsp Pause schedules if >= ${pauseHumidValue}%"; state.humidPauseBool = true; break}  
        else if (humidSensor.currentHumidity[i] <= pauseHumidValue && invertHumidBool) {state.humidStateDisplay = "<text style='color:red; font-weight: bold' >${humidSensor.currentHumidity}%, </text>" + "&nbsp Pause schedules if < ${pauseHumidValue}%"; state.humidPauseBool = true; break}  
       	else if (!invertHumidBool) {state.humidStateDisplay = "<text style='color:green' >${humidSensor.currentHumidity}%, </text>" + "&nbsp Pause schedules if >= ${pauseHumidValue}%"; state.humidPauseBool = false}
        else {state.humidStateDisplay = "<text style='color:green' >${humidSensor.currentHumidity}%, </text>" + "&nbsp Pause schedules if <= ${pauseHumidValue}%";  state.humidPauseBool = false}
        } }
    if (tempSensor) {for(int i = 0; i < tempSensor.currentTemperature.size(); i++) { // Scan arrary
       	if (tempSensor.currentTemperature[i] >= pauseTempValue && !invertTempBool) {state.tempStateDisplay = "<text style='color:red; font-weight: bold' >${tempSensor.currentTemperature}deg, </text>" + "&nbsp Pause schedules if >= ${pauseTempValue}deg"; state.tempPauseBool = true; break} 
        else if (tempSensor.currentTemperature[i] <= pauseTempValue && invertTempBool) {state.tempStateDisplay = "<text style='color:red; font-weight: bold' >${tempSensor.currentTemperature}deg, </text>" + "&nbsp Pause schedules if < ${pauseTempValue}deg"; state.tempPauseBool = true; break}  
       	else if (!invertTempBool) {state.tempStateDisplay = "<text style='color:green' >${tempSensor.currentTemperature}deg, </text>" + "&nbsp Pause schedules if >= ${pauseTempValue}deg"; state.tempPauseBool = false}
        else {state.tempStateDisplay = "<text style='color:green' >${tempSensor.currentTemperature}deg, </text>" + "&nbsp Pause schedules if <= ${pauseTempValue}deg"; state.tempPauseBool = false}
        } }
    if (varConnect) {
        varList = new ArrayList<String>();
        varConnect.each {
    		varItem = getGlobalVar("$it")
            int varInt = Integer.valueOf("${varItem.value}")
            varList.add(varInt);
            }
        for(int i = 0; i < varList.size(); i++) { // Scan arrary
        //log.debug "TEST1 Variable-EACH: varList = ${varList[i]}...varListSize = ${varList.size()}"    
       	if (varList[i] >= pauseVarValue && !invertVarBool) {state.varStateDisplay = "<text style='color:red; font-weight: bold' >${varList}, </text>" + "&nbsp Pause schedules if >= ${pauseVarValue}"; state.varPauseBool = true; break} 
    	else if (varList[i] <= pauseVarValue && invertVarBool) {state.varStateDisplay = "<text style='color:red; font-weight: bold' >${varList}, </text>" + "&nbsp Pause schedules if < ${pauseVarValue}"; state.varPauseBool = true; break}  
     	else if (!invertVarBool) {state.varStateDisplay = "<text style='color:green' >${varList}, </text>" + "&nbsp Pause schedules if >= ${pauseVarValue}"; state.varPauseBool = false}
      	else {state.varStateDisplay = "<text style='color:green' >${varList}, </text>" + "&nbsp Pause schedules if <= ${pauseVarValue}"; state.varPauseBool = false}    
        } }
    if (wetSensor) {for(int i = 0; i < wetSensor.currentWater.size(); i++) { 
       	if (wetSensor.currentWater[i] == "wet") {state.wetStateDisplay = "<text style='color:red; font-weight: bold' >${wetSensor.currentWater}</text>"; state.wetPauseBool = true; break}
       	else {state.wetStateDisplay = "<text style='color:green' >${wetSensor.currentWater} </text>"; state.wetPauseBool = false}
        } }        
    if (voltageSensor) {for(int i = 0; i < voltageSensor.currentVoltage.size(); i++) { 
       	if (voltageSensor.currentVoltage[i] <= voltageThreshold) {state.voltageStateDisplay = "<text style='color:red; font-weight: bold' >${voltageSensor.currentVoltage} </text>"; state.voltPauseBool = true; break}
       	else {state.voltageStateDisplay = "<text style='color:green' >${voltageSensor.currentVoltage} </text>"; state.voltPauseBool = false}
        } } 
    if (contactSensor) {for(int i = 0; i < contactSensor.currentContact.size(); i++) { 
       if (contactSensor.currentContact[i] == "open" && !invertContactBool) {state.contactStateDisplay = "<text style='color:red; font-weight: bold' >${contactSensor.currentContact}, </text>" + "&nbsp Pause schedules if Open"; state.contactPauseBool = true; break}
      	else if (contactSensor.currentContact[i] == "closed" && invertContactBool) {state.contactStateDisplay = "<text style='color:red; font-weight: bold' >${contactSensor.currentContact}, </text>" + "&nbsp Pause schedules if Closed"; state.contactPauseBool = true; break}
       	else if (!invertContactBool) {state.contactStateDisplay = "<text style='color:green' >${contactSensor.currentContact}, </text>" + "&nbsp Pause schedules if Open"; state.contactPauseBool = false}
        else {state.contactStateDisplay = "<text style='color:green' >${contactSensor.currentContact}, </text>" + "&nbsp Pause schedules if Closed"; state.contactPauseBool = false}
        } }
    if (leakBool && wetLeakSensor) {for(int i = 0; i < wetLeakSensor.currentWater.size(); i++) {
       	if (wetLeakSensor.currentWater[i] == "wet") {state.wetLeakStateDisplay =  "<text style='color:red; font-weight: bold' >${wetLeakSensor.currentWater} </text>"; break}
        else {state.wetLeakStateDisplay = "<text style='color:green' >${wetLeakSensor.currentWater} </text>"}  
        } }
    //////// Triggers
    if (motionSensor1) {for(int i = 0; i < motionSensor1.currentMotion.size(); i++) {
       	if (motionSensor1.currentMotion[i] == "active") {state.motionState1Display = "<text style='color:red; font-weight: bold' >${motionSensor1.currentMotion} </text>"; break}
        else {state.motionState1Display = "<text style='color:green' >${motionSensor1.currentMotion} </text>"}  
    	} }    
    if (motionSensor2) {for(int i = 0; i < motionSensor2.currentMotion.size(); i++) {
      	if (motionSensor2.currentMotion[i] == "active") {state.motionState2Display = "<text style='color:red; font-weight: bold' >${motionSensor2.currentMotion} </text>"; break}
        else {state.motionState2Display = "<text style='color:green' >${motionSensor2.currentMotion} </text>"}  
    	} }
    if (tempTrigger) {for(int i = 0; i < tempTrigger.currentTemperature.size(); i++) { // Scan arrary
       	if (tempTrigger.currentTemperature[i] >= tempTrigDeg && !tempTrigInvertBool) {state.tempTrigStateDisplay = "<text style='color:red; font-weight: bold' >${tempTrigger.currentTemperature}deg, </text>" + "&nbsp Trigger if Temp >= ${tempTrigDeg}deg"; state.tempTrigBool = true; break} 
        else if (tempTrigger.currentTemperature[i] < tempTrigDeg && tempTrigInvertBool) {state.tempTrigStateDisplay = "<text style='color:red; font-weight: bold' >${tempTrigger.currentTemperature}deg, </text>" + "&nbsp Trigger if Temp < ${tempTrigDeg}deg"; state.tempTrigBool = true; break} 
        else if (!tempTrigInvertBool) {state.tempTrigStateDisplay = "<text style='color:green' >${tempTrigger.currentTemperature}deg, </text>" + "&nbsp Trigger if Temp >= ${tempTrigDeg}deg"; state.tempTrigBool = false}
        else {state.tempTrigStateDisplay = "<text style='color:green' >${tempTrigger.currentTemperature}deg, </text>" + "&nbsp Trigger if Temp < ${tempTrigDeg}deg"; state.tempTrigBool = false}
        } }
    if (contactTrigger) {for(int i = 0; i < contactTrigger.currentContact.size(); i++) { // Scan arrary
       	if (contactTrigger.currentContact[i] == "open") {state.contactTrigStateDisplay = "<text style='color:red; font-weight: bold' >${contactTrigger.currentContact}, </text>" + "&nbsp Trigger if Contact = Open"; state.contactTrigBool = true; break} 
        else {state.contactTrigStateDisplay = "<text style='color:green' >${contactTrigger.currentContact}, </text>" + "&nbsp Trigger if Contact(s) = Open"; state.contactTrigBool = false}
        } }
    if (switchTrigger) {for(int i = 0; i < switchTrigger.currentSwitch.size(); i++) { // Scan arrary
       	if (switchTrigger.currentSwitch[i] == "on") {state.switchTrigStateDisplay = "<text style='color:red; font-weight: bold' >${switchTrigger.currentSwitch}, </text>" + "&nbsp Trigger if Switch = On"; state.switchTrigBool = true; break} 
        else {state.switchTrigStateDisplay = "<text style='color:green' >${switchTrigger.currentSwitch}, </text>" + "&nbsp Trigger if Switch(s) = On"; state.switchTrigBool = false}
        } }
 
    DeVices.each { dev ->  //// Impliment Device Pauses by case
      	if ((state.humidPauseBool && state.DeVices["$dev.id"].specialPause == 1) || (state.wetPauseBool && state.DeVices["$dev.id"].specialPause == 2) 
            || (state.voltPauseBool && state.DeVices["$dev.id"].specialPause == 3) || (state.contactPauseBool && state.DeVices["$dev.id"].specialPause == 4) || (state.tempPauseBool && state.DeVices["$dev.id"].specialPause == 5) 
            || (state.varPauseBool && state.DeVices["$dev.id"].specialPause == 6)) {state.DeVices["$dev.id"].sensorPause = true}  //// ver 2.0.4
      	else {state.DeVices["$dev.id"].sensorPause = false}
  	}
}
////////////////////////////////////////////////////////////////// Handlers //////////////////////////////////////////////////////////////////
def onTimeHandler(evt) {//// Called by; Subscribes only
    state.DeVices[evt.device.id].start = now()
    state.DeVices[evt.device.id].counts += 1  
    state.DeVices[evt.device.id].onTime = new Date().format("MM-dd-yyyy ${location.timeFormat == "12" ? "h:mm:ss a" : "HH:mm:ss"}")  // Last Update
    if (logEnableBool) {log.debug "${app.label} -- ONtime HANDLER, Device **${evt.device}**.....start= ${state.DeVices[evt.device.id].start}.....Last Ative = ${state.DeVices[evt.device.id].onTime}" }
}
def offTimeHandler(evt) {//// Called by; Subscribes only
    state.DeVices[evt.device.id].total += now() - state.DeVices[evt.device.id].start
    state.DeVices[evt.device.id].onTime = new Date().format("MM-dd-yyyy ${location.timeFormat == "12" ? "h:mm:ss a" : "HH:mm:ss"}")  // Last Update
    if (logEnableBool) {log.debug "${app.label} -- OFFtime HANDLER, Device **${evt.device}**.....total= ${state.DeVices[evt.device.id].total}.....Last Ative = ${state.DeVices[evt.device.id].onTime}"} 
}
void switchOnHandler(data) {//// Called by; Scheduled Cron's 
    sensorScan() // Update (Wet, Humid, Motion, ...) values 
    if (pauseAllBool) {return} // All paused, get out, dont run  //// ver1.4.7  revised  
       	DeVices.each { dev -> 
          if (!state.DeVices["$dev.id"].pause && !state.DeVices["$dev.id"].sensorPause && ((state.DeVices["$dev.id"].modes == location.mode) || state.DeVices["$dev.id"].modes == "Any")) { //// Pasued and Mode per device in table //// ver1.4.7
          		zone = state.DeVices["$dev.id"].zone
               	if (data.value == state.DeVices["$dev.id"].zone ) {
             		if (state.DeVices["$dev.id"].actions == 1 || state.DeVices["$dev.id"].actions == 2) {  //// Blink ON
                        if (pushBool && pushOnBool) {pushDevice.deviceNotification("App: ${app.label} -- Scheduled Action, Device **${dev}** Blinking ON/Off for ${state.DeVices["$dev.id"].durTime}min")} //// ver2.0.1 
                        state.DeVices["$dev.id"].blink = true
                   		runIn(1, blinkOnHandler, [data:zone, overwrite:false])
                        runIn(60 * state.DeVices["$dev.id"].durTime, switchOffHandler, [data:zone, overwrite:false])
                        }
                    else {  //// ON
                        log.info "${app.label} -- Device **${dev}** Scheduled Turn ON for duration ${state.DeVices["$dev.id"].durTime}min"
                        if (pushBool && pushOnBool) {pushDevice.deviceNotification("App: ${app.label} -- Scheduled Action, Device **${dev}** turning ON for ${state.DeVices["$dev.id"].durTime}min")} //// ver2.0.1 
                    	if (dev.currentSwitch)  {dev.on()}
                		if (dev.currentValve)  {dev.open()}  //// ver1.20
                    	runIn(60 * state.DeVices["$dev.id"].durTime, switchOffHandler, [data:zone, overwrite:false])
                    	}	
                }
            }
} }
void switchOffHandler(data) {//// Called by; End of Cron Sched Dur time, and various on handlers. 
    DeVices.each { dev -> 
        if (data.value == state.DeVices["$dev.id"].zone ) {
           if (dev.currentSwitch)  {dev.off()} 
           if (dev.currentValve)  {dev.close()}  //// ver1.20
           if (state.DeVices["$dev.id"].blink) {state.DeVices["$dev.id"].blink = false} // cancel a blink session
           log.info "${app.label} -- **${dev}** Turning OFF, SwitchOffHandler"
           } 
}  }
void contactTrigHandler(evt) {
   if (pauseAllBool) {return}
   sensorScan() // Grab sensor states 
    	DeVices.each { dev -> 
         if (!state.DeVices["$dev.id"].pause && !state.DeVices["$dev.id"].sensorPause &&  state.DeVices["$dev.id"].trigger == 1
               && (state.DeVices["$dev.id"].modes == location.mode || state.DeVices["$dev.id"].modes == "Any")) { //// Pasued per device in table and motion enabled
           	zone = state.DeVices["$dev.id"].zone
            if (state.DeVices["$dev.id"].actions == 0) { 
             	if (state.contactTrigBool && dev.currentSwitch == "off") {dev.on(); log.info "${app.label} -- **${dev}** Turning ON triggered by Contact **${evt.device}**"}
                else if (state.contactTrigBool && dev.currentValve == "closed") {dev.open(); log.info "${app.label} -- **${dev}** Turning ON triggered by Contact **${evt.device}**"}
                else if (!state.contactTrigBool && (dev.currentSwitch == "on" || dev.currentValve == "open")) {runIn(1, switchOffHandler, [data:zone, overwrite:true])}
            	}
           	else if ((state.DeVices["$dev.id"].actions == 1 || state.DeVices["$dev.id"].actions == 2) && dev.currentSwitch) {  // Switches Only
				if (state.contactTrigBool) {state.DeVices["$dev.id"].blink = true; runIn(1, blinkOnHandler, [data:zone, overwrite:true])}
                else {runIn(1, switchOffHandler, [data:zone, overwrite:true])}
                } 
         }
}  }         
void switchTrigHandler(evt) { ////ver2.1.0
   if (pauseAllBool) {return}
   sensorScan() // Grab sensor states 
       	DeVices.each { dev -> 
         if (!state.DeVices["$dev.id"].pause && !state.DeVices["$dev.id"].sensorPause && state.DeVices["$dev.id"].trigger == 2
               && (state.DeVices["$dev.id"].modes == location.mode || state.DeVices["$dev.id"].modes == "Any")) { //// Pasued per device in table and motion enabled
         	zone = state.DeVices["$dev.id"].zone
            if (state.DeVices["$dev.id"].actions == 0) { 
             	if (state.switchTrigBool && dev.currentSwitch == "off") {dev.on(); log.info "${app.label} -- **${dev}** Turning ON triggered by Switch **${evt.device}**"}
                else if (state.switchTrigBool && dev.currentValve == "closed") {dev.open(); log.info "${app.label} -- **${dev}** Turning ON triggered by Switch **${evt.device}**"}
                else if (!state.switchTrigBool && (dev.currentSwitch == "on" || dev.currentValve == "open")) {runIn(1, switchOffHandler, [data:zone, overwrite:true])}
            	}
           	else if ((state.DeVices["$dev.id"].actions == 1 || state.DeVices["$dev.id"].actions == 2) && dev.currentSwitch) {  // Switches Only
				if (state.switchTrigBool) {state.DeVices["$dev.id"].blink = true; runIn(1, blinkOnHandler, [data:zone, overwrite:true])}
                else {runIn(1, switchOffHandler, [data:zone, overwrite:true])}
            	} 
         }
}  }         
void tempTrigHandler(evt) {  
   if (pauseAllBool) {return} 
   sensorScan() // Grab sensor states
    	DeVices.each { dev -> 
         if (!state.DeVices["$dev.id"].pause && !state.DeVices["$dev.id"].sensorPause && state.DeVices["$dev.id"].trigger == 3
               && (state.DeVices["$dev.id"].modes == location.mode || state.DeVices["$dev.id"].modes == "Any")) { //// Pasued per device in table
         	zone = state.DeVices["$dev.id"].zone 
            if (state.DeVices["$dev.id"].actions == 0) { 
             	if (state.tempTrigBool && dev.currentSwitch == "off") {dev.on(); log.info "${app.label} -- **${dev}** Turning ON triggered by Temperature **${evt.device}**"}
                else if (state.tempTrigBool && dev.currentValve == "closed") {dev.open(); log.info "${app.label} -- **${dev}** Turning ON triggered by Temperature **${evt.device}**"}
                else if (!state.tempTrigBool && (dev.currentSwitch == "on" || dev.currentValve == "open")) {runIn(1, switchOffHandler, [data:zone, overwrite:true])}
            	}
           	else if ((state.DeVices["$dev.id"].actions == 1 || state.DeVices["$dev.id"].actions == 2) && dev.currentSwitch)  {  // Switches Only
				if (state.tempTrigBool) {state.DeVices["$dev.id"].blink = true; runIn(1, blinkOnHandler, [data:zone, overwrite:true])}
                else {runIn(1, switchOffHandler, [data:zone, overwrite:true])}
            	}
         }
}  }       
void modeTrigHandler(evt) { //// Called by; Subscribes only. ////ver2.1.3
   if (pauseAllBool || !modeTrigger) {return} 
    	DeVices.each { dev -> 
         if (!state.DeVices["$dev.id"].pause && !state.DeVices["$dev.id"].sensorPause && state.DeVices["$dev.id"].trigger == 4) { //// Pasued per device in table and motion enabled
           	zone = state.DeVices["$dev.id"].zone
            if (modeTrigger == location.mode && !modeInvertBool && (dev.currentSwitch == "off" || dev.curentValve == "closed")) {
                if (state.DeVices["$dev.id"].actions == 0) { 
                    if (dev.currentSwitch) {dev.on()} 
           			if (dev.currentValve) {dev.open()}  
                    if (modeOnTime !=0) {runIn(60 * modeOnTime, switchOffHandler, [data:zone, overwrite:false]) }
                }
                else if (state.DeVices["$dev.id"].actions == 1 || state.DeVices["$dev.id"].actions == 2) {state.DeVices["$dev.id"].blink = true
                    if (modeOnTime != 0) {
                        runIn(1, blinkOnHandler, [data:zone, overwrite:false])
                        runIn(60 * modeOnTime, switchOffHandler, [data:zone, overwrite:false])
                    }
                    else runIn(1, blinkOnHandler, [data:zone, overwrite:false])
                	}
              }
            else if (modeTrigger == location.mode && modeInvertBool) {
               	if (dev.currentSwitch && dev.currentSwitch == "on")  {dev.off()} 
           		if (dev.currentValve && dev.curentValve == "open") {dev.close()}    
       			}
            else if (modeTrigger != location.mode && modeInvertBool && (dev.currentSwitch == "off" || dev.curentValve == "closed")) {
                if (state.DeVices["$dev.id"].actions == 0) { 
                    if (dev.currentSwitch) {dev.on()} 
           			if (dev.currentValve) {dev.open()}  
                    if (modeOnTime !=0) {runIn(60 * modeOnTime, switchOffHandler, [data:zone, overwrite:false]) }
                }
                else if (state.DeVices["$dev.id"].actions == 1 || state.DeVices["$dev.id"].actions == 2) {state.DeVices["$dev.id"].blink = true
                    if (modeOnTime != 0) {
                        runIn(1, blinkOnHandler, [data:zone, overwrite:false])
                        runIn(60 * modeOnTime, switchOffHandler, [data:zone, overwrite:false])
                    }
                    else runIn(1, blinkOnHandler, [data:zone, overwrite:false])
                	}
              }
            else if (modeTrigger != location.mode && !modeInvertBool) {
               	if (dev.currentSwitch && dev.currentSwitch == "on")  {dev.off()} 
           		if (dev.currentValve && dev.curentValve == "open") {dev.close()}    
       			}  
            endif
           log.info "${app.label} -- ModeHandler, **${dev}** Triggered by Mode change to **${location.mode}**"  
         }
}  }         
void motionHandler1(evt) { //// Called by; Subscribes only.  //// ver 2.0.1
    if (pauseAllBool) {return} // All paused, get out, dont run
       	DeVices.each { dev -> 
          if (!state.DeVices["$dev.id"].pause && !state.DeVices["$dev.id"].sensorPause &&  state.DeVices["$dev.id"].motionCase == 1 && ((state.DeVices["$dev.id"].modes == location.mode) || state.DeVices["$dev.id"].modes == "Any")) { //// Pasued per device in table and motion enabled
               	zone = state.DeVices["$dev.id"].zone; int xRun = Math.round(60 * motionRunTime1)
            if (!motionActive1 && evt.device.currentMotion == "active") {
                   	if (pushBool && pushMotionBool) { pushDevice.deviceNotification("App: ${app.label} -- Motion Detected by **${evt.device}** is '${evt.device.currentMotion}', Toggling Device **${dev}** for ${xRun/60}min")} //// ver2.0.1
					log.info "${app.label} -- Motion Detected by **${evt.device}** is ${evt.device.currentMotion}, Toggling Device **${dev}** for ^${xRun/60}min^ .. (MotionGroup=${state.DeVices["$dev.id"].motionCase}..Invert=${invertBool1})" 
                       	if (dev.currentSwitch && dev.currentSwitch == "off") {dev.on(); runIn(xRun, switchOffHandler, [data:zone, overwrite:false])} ////  Turn On if Off
                       	else if (dev.currentSwitch && dev.currentSwitch == "on" && invertBool1) {dev.off(); runIn(xRun, motionBackOnHandler, [data:zone, overwrite:false])} ////  Turn Off if On
                		else if (dev.currentValve && dev.currentValve == "closed") {dev.open(); runIn(xRun, switchOffHandler, [data:zone, overwrite:false])}  ////  Turn On if Off /// ver1.20
                        else if (dev.currentValve && dev.currentValve == "open" && invertBool1) {dev.close(); runIn(xRun, motionBackOnHandler, [data:zone, overwrite:false])}  ////  Turn Off if On  //// ver1.20
                    		endif
                    } 
         	else if (motionActive1 && evt.device.currentMotion == "active")	{  //// ver2.1.0
                   	if (pushBool && pushMotionBool) { pushDevice.deviceNotification("App: ${app.label} -- Motion Detected by **${evt.device}** is '${evt.device.currentMotion}', Toggling Device **${dev}**") } //// ver2.0.1
					log.info "${app.label} -- Motion Detected by **${evt.device}** is ${evt.device.currentMotion}, Toggling Device **${dev}**.. (MotionGroup=${state.DeVices["$dev.id"].motionCase}..Invert=${invertBool1})" 
                    	if (dev.currentSwitch && dev.currentSwitch == "off") {dev.on()}  ////  Turn On if Off  ////ver 2.1.0
                		else if (dev.currentSwitch && dev.currentSwitch == "on" && invertBool1) {dev.off()}  ////  Turn Off if On                		
                        else if (dev.currentValve && dev.currentValve == "closed") {dev.open()}  ////  Turn On if Off
 						else if (dev.currentValve && dev.currentValve == "open" && invertBool1) {dev.close()}   ////  Turn Off if On
                    		endif
	                } 
           	else if (motionActive1 && evt.device.currentMotion == "inactive") { ////ver 2.1.0
                	log.info "${app.label} -- Motion Detected by **${evt.device}** is '${evt.device.currentMotion}', Toggling Device **${dev}**.. (MotionGroup=${state.DeVices["$dev.id"].motionCase}..Invert=${invertBool1})" 
              			if (dev.currentSwitch && dev.currentSwitch == "on") {dev.off()} ////  Turn back Off after inactive  ////ver 2.1.0
                        else if (dev.currentSwitch && dev.currentSwitch == "off" && invertBool1) {dev.on()}  ////  Turn back On after inactive
                		else if (dev.currentValve && dev.currentValve == "open") {dev.close()} ////  Turn back Off after inactive 
     					else if (dev.currentValve && dev.currentValve == "closed" && invertBool1) {dev.open()}  ////  Turn back On after inactive
                    		endif
                   }
              	endif
         } 
}  }
void motionHandler2(evt) { //// Called by; Subscribes only.  //// ver 2.1.0
    if (pauseAllBool) {return} // All paused, get out, dont run
       	DeVices.each { dev -> 
          if (!state.DeVices["$dev.id"].pause && !state.DeVices["$dev.id"].sensorPause && state.DeVices["$dev.id"].motionCase == 2 && ((state.DeVices["$dev.id"].modes == location.mode) || state.DeVices["$dev.id"].modes == "Any")) { //// Pasued per device in table and motion enabled
               	zone = state.DeVices["$dev.id"].zone; int xRun = Math.round(60 * motionRunTime2)
            if (!motionActive2 && evt.device.currentMotion == "active") {
                   	if (pushBool && pushMotionBool) { pushDevice.deviceNotification("App: ${app.label} -- Motion Detected by **${evt.device}** is ${evt.device.currentMotion}, Toggling Device **${dev}** for ${xRun/60}min")} //// ver2.0.1
					log.info "${app.label} -- Motion Detected by **${evt.device}** is '${evt.device.currentMotion}', Toggling Device **${dev}** for ^${xRun/60}min^ .. (MotionGroup=${state.DeVices["$dev.id"].motionCase}..Invert=${invertBool2})" 
                       	if (dev.currentSwitch && dev.currentSwitch == "off") {dev.on(); runIn(xRun, switchOffHandler, [data:zone, overwrite:false])} ////  Turn On if Off
                       	else if (dev.currentSwitch && dev.currentSwitch == "on" && invertBool2) {dev.off(); runIn(xRun, motionBackOnHandler, [data:zone, overwrite:false])} ////  Turn Off if On
                		else if (dev.currentValve && dev.currentValve == "closed") {dev.open(); runIn(xRun, switchOffHandler, [data:zone, overwrite:false])}  ////  Turn On if Off /// ver1.20
                        else if (dev.currentValve && dev.currentValve == "open" && invertBool2) {dev.close(); runIn(xRun, motionBackOnHandler, [data:zone, overwrite:false])}  ////  Turn Off if On  //// ver1.20
                    		endif
                    } 
         	else if (motionActive2 && evt.device.currentMotion == "active")	{  //// ver2.1.0
                   	if (pushBool && pushMotionBool) { pushDevice.deviceNotification("App: ${app.label} -- Motion Detected by **${evt.device}** is ${evt.device.currentMotion}, Toggling Device **${dev}**") } //// ver2.0.1
					log.info "${app.label} -- Motion Detected by **${evt.device}** is '${evt.device.currentMotion}', Toggling Device **${dev}**.. (MotionGroup=${state.DeVices["$dev.id"].motionCase}..Invert=${invertBool2})" 
                    	if (dev.currentSwitch && dev.currentSwitch == "off") {dev.on()}  ////  Turn On if Off  ////ver 2.1.0
                		else if (dev.currentSwitch && dev.currentSwitch == "on" && invertBool2) {dev.off()}  ////  Turn Off if On                		
                        else if (dev.currentValve && dev.currentValve == "closed") {dev.open()}  ////  Turn On if Off
 						else if (dev.currentValve && dev.currentValve == "open" && invertBool2) {dev.close()}   ////  Turn Off if On
                    		endif
	                } 
           	else if (motionActive2 && evt.device.currentMotion == "inactive") { ////ver 2.1.0
                	log.info "${app.label} -- Motion Detected by **${evt.device}** is '${evt.device.currentMotion}', Toggling Device **${dev}**.. (MotionGroup=${state.DeVices["$dev.id"].motionCase}..Invert=${invertBool2})" 
              			if (dev.currentSwitch && dev.currentSwitch == "on") {dev.off()} ////  Turn back Off after inactive  ////ver 2.1.0
                        else if (dev.currentSwitch && dev.currentSwitch == "off" && invertBool2) {dev.on()}  ////  Turn back On after inactive
                		else if (dev.currentValve && dev.currentValve == "open") {dev.close()} ////  Turn back Off after inactive
     					else if (dev.currentValve && dev.currentValve == "closed" && invertBool2) {dev.open()}  ////  Turn back On after inactive
                    		endif
                   }
              	endif
         } 
}  }
void motionBackOnHandler(data) {//// Called by; MotionHandler Invert mode.  //// ver2.0.1
    if (pauseAllBool) {return} // All paused, get out, dont run
    DeVices.each { dev ->
        if (!state.DeVices["$dev.id"].pause && !state.DeVices["$dev.id"].sensorPause && state.DeVices["$dev.id"].motion != 0) {
        	if (data.value == state.DeVices["$dev.id"].zone ) {
           		if (dev.currentSwitch && dev.currentSwitch == "off")  {dev.on()}
           		if (dev.currentValve && dev.currentValve == "closed")  {dev.open()}
                if (logEnableBool) {log.debug "${app.label} -- Motion Back On handler... Device: *${dev}*...zone = ${data.value}"} 
            }
        }
}  }
def blinkOnHandler(data) {  ////ver2.1.0 
    if (pauseAllBool) {return} // All paused, get out, dont run
    int xRun
    DeVices.each { dev -> 
      if (state.DeVices["$dev.id"].blink == false || state.DeVices["$dev.id"].sensorPause || dev.currentValve) {return}  // do not blink valves, exit .each routine
        log.debug "BlinkOn2 ....**${dev}** ... dev-currentValve **${dev.currentValve}**...dev-currentSwitch **${dev.currentSwitch}**"
        if (state.DeVices["$dev.id"].actions == 1) {xRun = Math.round(60 * blinkOn1)}
        else {xRun = Math.round(60 * blinkOn2)}
        zone = state.DeVices["$dev.id"].zone
        if (data.value == state.DeVices["$dev.id"].zone ) {
           if (dev.currentSwitch == "off") {dev.on(); runIn(xRun, blinkOffHandler, [data:zone, overwrite:true])} 
           if (logEnableBool) {log.info "${app.label} -- BlnikONHandler **${dev}**, Turning ON"} 
        } }
}
def blinkOffHandler(data) {  ////ver2.1.0  
    int xRun
    DeVices.each { dev -> 
      if (state.DeVices["$dev.id"].blink == false || dev.currentValve) {return}  // do not blink valves, exit .each routine
        if (state.DeVices["$dev.id"].actions == 1) {xRun = Math.round(60 * blinkOff1)}
        else {xRun = Math.round(60 * blinkOff2)}
        zone = state.DeVices["$dev.id"].zone
        if (data.value == state.DeVices["$dev.id"].zone ) {
           if (dev.currentSwitch == "on") {dev.off(); runIn(xRun, blinkOnHandler, [data:zone, overwrite:true])} 
            if (logEnableBool) {log.info "${app.label} -- BlnikOFFHandler **${dev}**, Turning OFF"} 
        } }
}
def allOffHandler(evt) {//// Called by; Sched All off time, Leak, Remote SW, in App Off button
    DeVices.each { dev ->
    	if (dev.currentSwitch == "on") {dev.off()}  
    	else if (dev.currentValve == "open") {dev.close()}  //// ver1.20
    	endif
        if (state.DeVices["$dev.id"].blink) {state.DeVices["$dev.id"].blink = false}
    }
    log.info "${app.label} -- All Devices OFF Pushed/Triggered" 
}
def remoteOffHandler(evt) {//// Called by; Subscribes only.  // Handles remote off/pause and Leak Sensor off
    if (evt.device.currentSwitch == "on" && remoteSwitchBool) { // remote switch control to turn off and pause everything
        	state.pauseAllBool = true; app?.updateSetting("pauseAllBool",[value:"true",type:"bool"])  
        	log.info "${app.label} -- All Devices Triggered Off from Remote Switch" 
        	allOffHandler()  /// Shut all Off
            }
    else if (leakBool && wetLeakSensor && evt.device.currentWater == "wet") { // Leak Detect turn off and pause everything
        	state.pauseAllBool = true; app?.updateSetting("pauseAllBool",[value:"true",type:"bool"])  
        	if (pushBool && pushLeakBool && leakBool) {pushDevice.deviceNotification("${app.label} -- LEAK Detected by **${evt.device}**, turning all Devices OFF and Pause all schedules")} /// ver2.0.1
        	log.info "${app.label} -- All Devices Triggered Off by Leak Detect" 
        	allOffHandler()  /// Shut all Off	
    		}
    else if (evt.device.currentSwitch == "off" && remoteSwitchBool) {state.pauseAllBool = false; app?.updateSetting("pauseAllBool",[value:"false",type:"bool"])} // Unpause permanent pause
}
def sunHandler(evt) {//// Called by; Scheduled Cron and within functions. // update new sunrise/sunset times every day  //// ver1.1.0
    DeVices.each { dev -> 
    if (!state.DeVices["$dev.id"].sunTime) {state.DeVices["$dev.id"].offset = 0} ////ver2.0.3
    state.offsetRiseAndSet = getSunriseAndSunset(sunriseOffset: state.DeVices["$dev.id"].offset, sunsetOffset: state.DeVices["$dev.id"].offset)  //// ver1.1.0
   	if (state.DeVices["$dev.id"].sunTime) {  //// ver1.0.4
          if (state.DeVices["$dev.id"].sunset) {state.DeVices["$dev.id"].startTime = state.offsetRiseAndSet.sunset.toString() }
          else {state.DeVices["$dev.id"].startTime = state.offsetRiseAndSet.sunrise.toString() }
    }
    if (state.DeVices["$dev.id"].sunrise) {  ////ver2.0.3  Calculate @ Sunrise Off time and duration
    	int startHours = Integer.valueOf(state.DeVices["$dev.id"].startTime.substring(11, state.DeVices["$dev.id"].startTime.length() - 15))  
       	int startMin = Integer.valueOf(state.DeVices["$dev.id"].startTime.substring(14, state.DeVices["$dev.id"].startTime.length() - 12))  
       	String strSunriseTime = state.offsetRiseAndSet.sunrise
      	int sunriseHours = Integer.valueOf(strSunriseTime.substring(11, strSunriseTime.length() - 15))  
      	int sunriseMin = Integer.valueOf(strSunriseTime.substring(14, strSunriseTime.length() - 12))  
        	if (startHours > sunriseHours) {state.DeVices["$dev.id"].durTime = (24 - startHours + sunriseHours)*60 - startMin + sunriseMin + sunriseOffset - state.DeVices["$dev.id"].offset}
        	else {state.DeVices["$dev.id"].durTime = (sunriseHours*60) + sunriseMin + sunriseOffset - state.DeVices["$dev.id"].offset}
        	if (state.DeVices["$dev.id"].durTime < 0) {state.DeVices["$dev.id"].durTime = 0} // Prevent negative times
      	 }
    }
   updated()  // Rebuild cron with new sunSet/Rise schedules
}
void appButtonHandler(btn) {//// Called by; In app Button pushes
    	if (btn == "refresh") refreshHandler()   
    	else if (btn == "allOff") allOffHandler()  
    	else if (btn == "updateButton") updated() 
    else if (btn.startsWith("a")) state.sunUnCheckedBox = btn.minus("a") 
    else if (btn.startsWith("b")) state.sunCheckedBox = btn.minus("b")
    else if (btn.startsWith("c")) state.monUnCheckedBox = btn.minus("c") 
    else if (btn.startsWith("d")) state.monCheckedBox = btn.minus("d")
    else if (btn.startsWith("e")) state.tueUnCheckedBox = btn.minus("e") 
    else if (btn.startsWith("f")) state.tueCheckedBox = btn.minus("f")
    else if (btn.startsWith("g")) state.wedUnCheckedBox = btn.minus("g") 
    else if (btn.startsWith("h")) state.wedCheckedBox = btn.minus("h")
    else if (btn.startsWith("i")) state.thuUnCheckedBox = btn.minus("i") 
    else if (btn.startsWith("j")) state.thuCheckedBox = btn.minus("j")
    else if (btn.startsWith("k")) state.friUnCheckedBox = btn.minus("k") 
    else if (btn.startsWith("l")) state.friCheckedBox = btn.minus("l")
    else if (btn.startsWith("m")) state.satUnCheckedBox = btn.minus("m") 
    else if (btn.startsWith("n")) state.satCheckedBox = btn.minus("n")
    	else if (btn.startsWith("o")) state.newStartTime = btn.minus("o") 
   	 	else if (btn.startsWith("q")) state.newDurTime = btn.minus("q") 
    else if (btn.startsWith("r")) state.oddUnCheckedBox = btn.minus("r") 
    else if (btn.startsWith("s")) state.oddCheckedBox = btn.minus("s")
    	else if (btn.startsWith("t")) state.pauseUnCheckedBox = btn.minus("t") 
    	else if (btn.startsWith("v")) state.pauseCheckedBox = btn.minus("v")
    else if (btn.startsWith("w")) state.sunTimeUnCheckedBox = btn.minus("w")  //// ver1.1.0
    else if (btn.startsWith("x")) state.sunTimeCheckedBox = btn.minus("x")  //// ver1.1.0 
    	else if (btn.startsWith("p")) state.runsDayBox1 = btn.minus("p")  //// ver1.2.1
    	else if (btn.startsWith("u")) state.runsDayBox2 = btn.minus("u")  //// ver1.2.1    
    else if (btn.startsWith("z")) state.resetTotal = btn.minus("z")  
    	else if (btn.startsWith("1")) state.newMode = btn.minus("1")  //// ver1.5.2 
    else if (btn.startsWith("2")) state.sunriseUnCheckedBox = btn.minus("2")  //// ver2.0.3 
    else if (btn.startsWith("3")) state.sunriseCheckedBox = btn.minus("3")  //// ver2.0.3  
    	else if (btn.startsWith("aa")) state.pauseCase0 = btn.minus("aa")  //// ver2.0.3
    	else if (btn.startsWith("4")) state.pauseCase1 = btn.minus("4")  //// ver2.0.3
    	else if (btn.startsWith("5")) state.pauseCase2 = btn.minus("5")  //// ver2.0.3    
    	else if (btn.startsWith("6")) state.pauseCase3 = btn.minus("6")  
    	else if (btn.startsWith("7")) state.pauseCase4 = btn.minus("7")     
    	else if (btn.startsWith("8")) state.pauseCase5 = btn.minus("8")   
        else if (btn.startsWith("9")) state.pauseCase6 = btn.minus("9")    
    else if (btn.startsWith("C")) state.motionCase0 = btn.minus("C")  //// ver2.1.0    
    else if (btn.startsWith("A")) state.motionCase1 = btn.minus("A")  //// ver2.1.0
    else if (btn.startsWith("B")) state.motionCase2 = btn.minus("B")  //// ver2.1.0 
    	else if (btn.startsWith("D")) state.sunsetUnCheckedBox = btn.minus("D")  //// ver1.1.0
    	else if (btn.startsWith("E")) state.sunsetCheckedBox = btn.minus("E")  //// ver1.1.0
    	else if (btn.startsWith("F")) state.newOffsetTime = btn.minus("F")  //// ver1.1.0    
 		else if (btn.startsWith("Z")) state.deviceState = btn.minus("Z")  ////ver2.0.3 
   	else if (btn.startsWith("J")) state.actions0 = btn.minus("J")    
    else if (btn.startsWith("G")) state.actions1 = btn.minus("G")   //// ver2.1.0 
   	else if (btn.startsWith("H")) state.actions2 = btn.minus("H")    
    else if (btn.startsWith("I")) state.actions3 = btn.minus("I")
    	else if (btn.startsWith("O")) state.trigger0 = btn.minus("O") 
    	else if (btn.startsWith("K")) state.trigger1 = btn.minus("K")
  		else if (btn.startsWith("L")) state.trigger2 = btn.minus("L")
  		else if (btn.startsWith("M")) state.trigger3 = btn.minus("M")
    	else if (btn.startsWith("N")) state.trigger4 = btn.minus("N")  
    //else if (btn.startsWith("P")) state.actions10 = btn.minus("P")    
    endif    
}
def refreshHandler() {//// Called by; In App Button push and within functions  // Update Times if Active/On
    state.DeVices.each {k, v ->
        def dev = DeVices.find{"$it.id" == k}
        if (dev.currentSwitch == "on" || dev.currentValve == "open") {  //////////////////  
          state.DeVices[k].total += now() - state.DeVices[k].start
		  state.DeVices[k].start = now()
          }
 	}
    sensorScan() // Update sensor readings if any
}
/////////////////////////////////////////////////////////////// Functions //////////////////////////////////////////////////////////////////
def buildCron() {//// Called by; updated() function, via install or in App refresh/store buttons or within functions
  state.DeVices.each {k, v ->
     def dev = DeVices.find{"$it.id" == k}
        if(state.DeVices[k].startTime) {
            if (runTwiceOffset == null) {runTwiceOffset = 12}
            String formattedTime = state.DeVices[k].startTime.substring(11, state.DeVices[k].startTime.length() - 12)
            String hours = formattedTime.substring(0, formattedTime.length() - 3) // Chop off the last 3 in string
            String minutes = formattedTime.substring(3) // Chop off the first 3 in string
                int runTwoHour = Integer.valueOf(hours) + Integer.valueOf(runTwiceOffset)  // Add the 2nd run offset to the first run to get next run time
                if  (runTwoHour >= 24) {runTwoHour = 23} // force 2nd run to be in same day, 23:00 max
            if (state.DeVices[k].odd && state.DeVices[k].runsDay == 1) { state.DeVices[k].cron = "0 ${minutes} ${hours} 1/2 * ? * "  }   //// ver1.2.1
            else if (state.DeVices[k].odd && state.DeVices[k].runsDay == 2) {state.DeVices[k].cron = "0 ${minutes} ${hours},${runTwoHour} 1/2 * ? * "}
            else { String days = ""
                if (state.DeVices[k].sun) {days = "SUN,"}
                if (state.DeVices[k].mon) {days += "MON,"}
                if (state.DeVices[k].tue) {days += "TUE,"}
                if (state.DeVices[k].wed) {days += "WED,"}
                if (state.DeVices[k].thu) {days += "THU,"}
                if (state.DeVices[k].fri) {days += "FRI,"}
                if (state.DeVices[k].sat) {days += "SAT,"}
                    if (days != "") {
                    days = days.substring(0, days.length() - 1) // Chop off last ","
                    state.DeVices[k].days = days
                        if (state.DeVices[k].runsDay == 1) {state.DeVices[k].cron = "0 ${minutes} ${hours} ? * ${days} *"}   //// ver1.2.1
                        else if (state.DeVices[k].runsDay == 2) {state.DeVices[k].cron = "0 ${minutes} ${hours},${runTwoHour} ? * ${days} *"}
                        endif
                    }   
            }
            endif
           }
   }
  //// Build All Off time Cron ////ver1.4.0
    if (allOffBool) {
        String formattedTimeOff = allOffTime.substring(11, allOffTime.length() - 12)
        String hoursOff = formattedTimeOff.substring(0, formattedTimeOff.length() - 3) // Chop off the last 3 in string
        String minutesOff = formattedTimeOff.substring(3) // Chop off the first 3 in string
        state.allOffCron = "0 ${minutesOff} ${hoursOff} * * ? * "  
    }
    if (logEnableBool) {log.debug "${app.label} -- All Cron Schedules Successfully Built"} 
}
//////////////////////////////////////////////////////////////  Status Bar  //////////////////////////////////////////////////////////////////// 
String statusBar() {
    if (pauseAllBool) {paragraph getFormat("noticable","<b>All Upcoming Schedules, Triggers, and Motion Paused!!!</b>")}
   	paragraph getFormat("smallLineSpace","<b>Current Hub Mode:</b> &nbsp ${location.mode}")
    if (humidSensor) {paragraph getFormat("smallLineSpace","<b>Pause Moisture/Humidity Sensor(s):</b> &nbsp ${humidSensor} = ${state.humidStateDisplay}" + ", Case" + "<text style='position:absolute; top:-.48em'>${state.pauseCaseIcon1}</text>")} 
    if (wetSensor) {paragraph getFormat("smallLineSpace","<b>Pause Wet/Dry Sensor(s):</b> &nbsp ${wetSensor} = ${state.wetStateDisplay}, &nbsp Pause schedules if 'wet'"  + ", Case" + "<text style='position:absolute; top:-.48em'>${state.pauseCaseIcon2}</text>" )}
    if (leakBool && wetLeakSensor) {paragraph getFormat("smallLineSpace","<b>Pause Leak Detect Sensor(s):</b> &nbsp ${wetLeakSensor} = ${state.wetLeakStateDisplay}, &nbsp Shutdown All if 'wet'" )}
    if (voltageSensor) {paragraph getFormat("smallLineSpace","<b>Pause Voltage Sensor(s):</b> &nbsp ${voltageSensor} = ${state.voltageStateDisplay} &nbsp Pause schedules if <${voltageThreshold}V" + ", Case" + "<text style='position:absolute; top:-.48em'>${state.pauseCaseIcon3}</text>")}
    if (contactSensor) {paragraph getFormat("smallLineSpace","<b>Pause Contact Sensor(s):</b> &nbsp ${contactSensor} = ${state.contactStateDisplay}" + ", Case" + "<text style='position:absolute; top:-.48em'>${state.pauseCaseIcon4}</text>")} 
    if (tempSensor) {paragraph getFormat("smallLineSpace","<b>Pause Temperature Sensor(s):</b> &nbsp ${tempSensor} = ${state.tempStateDisplay}" + ", Case" + "<text style='position:absolute; top:-.48em'>${state.pauseCaseIcon5}</text>")} 
	if (varConnect) {paragraph getFormat("smallLineSpace","<b>Pause Variable(s) Value:</b> &nbsp ${varConnect} = ${state.varStateDisplay}" + ", Case" + "<text style='position:absolute; top:-.48em'>${state.pauseCaseIcon6}</text>")} 
	if (motionSensor1) { paragraph getFormat("smallLineSpace","<b>Trigger Motion Sensor(s)</b>" + "&nbsp ${motionSensor1} = ${state.motionState1Display}" + ", Group" + "<text style='position:absolute; top:-.48em'>${state.motionIcon1}</text>")}
    if (motionSensor2) { paragraph getFormat("smallLineSpace","<b>Trigger Motion Sensor(s)</b>" + "&nbsp ${motionSensor2} = ${state.motionState2Display}" + ", Group" + "<text style='position:absolute; top:-.48em'>${state.motionIcon2}</text>")}
    if (contactTrigger) {paragraph getFormat("smallLineSpace","<b>Trigger Contact Sensor(s):</b> &nbsp ${contactTrigger} = ${state.contactTrigStateDisplay}" + ", Case" + "<text style='position:absolute; top:-.48em'>${state.triggerIcon1}</text>")} 
    if (switchTrigger) {paragraph getFormat("smallLineSpace","<b>Trigger Switch Sensor(s):</b> &nbsp ${switchTrigger} = ${state.switchTrigStateDisplay}" + ", Case" + "<text style='position:absolute; top:-.48em'>${state.triggerIcon2}</text>")} 
	if (tempTrigger) {paragraph getFormat("smallLineSpace","<b>Trigger Temperature Sensor(s):</b> &nbsp ${tempTrigger} = ${state.tempTrigStateDisplay}" + ", Case" + "<text style='position:absolute; top:-.48em'>${state.triggerIcon3}</text>")} 
}
///////////////////////////////////////////////////////////  Icon Graphics  ////////////////////////////////////////////////////////////////// 
def icons() { ////ver2.1.1
////Boxes - Circles
    state.unCheckedBox = "<iconify-icon inline style='color:black; font-size:23px' icon='material-symbols:check-box-outline-blank'></iconify-icon>"  
    state.greenCheckBox = "<iconify-icon inline style='color:green; font-size:23px' icon='material-symbols:check-box'></iconify-icon>"
    state.steelBlueCheckBox = "<iconify-icon inline style='color:SteelBlue; font-size:23px' icon='material-symbols:check-box'></iconify-icon>"
    state.darkOrangeCheckBox = "<iconify-icon inline style='color:darkorange; font-size:23px' icon='material-symbols:check-box'></iconify-icon>"
    state.purpleCheckBox = "<iconify-icon inline style='color:purple; font-size:23px' icon='material-symbols:check-box'></iconify-icon>"
    state.steelBlueCircle1 = "<iconify-icon inline style='color:SteelBlue; font-size:23px' icon='tabler:circle-1-filled'></iconify-icon>"
    state.darkOrangeCircle2 = "<iconify-icon inline style='color:darkorange; font-size:23px' icon='tabler:circle-2-filled'></iconify-icon>"
////Other  
    state.sunIcon = "<iconify-icon inline style='color:orange; font-size:23px' icon='ph:sun-duotone'></iconify-icon>"
    state.moonIcon = "<iconify-icon inline style='color:DodgerBlue; font-size:23px' icon='ph:moon-stars-duotone'></iconify-icon>"
    state.playIcon = "<iconify-icon inline style='color:green; font-size:23px' icon=ic:baseline-play-circle></iconify-icon>"
    state.pauseIcon = "<iconify-icon inline style='color:red; font-size:23px' icon=ic:sharp-pause-circle-filled></iconify-icon>" 
    state.playIconGrey = "<iconify-icon inline style='color:grey; font-size:23px' icon=ic:baseline-play-circle></iconify-icon>"
    state.pauseIconGrey = "<iconify-icon inline style='color:grey; font-size:23px' icon=ic:sharp-pause-circle-filled></iconify-icon>" 
    state.resetIcon = "<iconify-icon inline style='color:black; font-size:23px' icon='bx:reset'></iconify-icon>" 
////PauseCase    
    state.pauseCaseIcon1 = "<iconify-icon inline style='color:#5f3d0c; font-size:23px' icon='tabler:circle-1-filled'></iconify-icon>"
    state.pauseCaseIcon2 = "<iconify-icon inline style='color:#8a6634; font-size:23px' icon='tabler:circle-2-filled'></iconify-icon>"
    state.pauseCaseIcon3 = "<iconify-icon inline style='color:#848710; font-size:23px' icon='tabler:circle-3-filled'></iconify-icon>"
    state.pauseCaseIcon4 = "<iconify-icon inline style='color:#800b35; font-size:23px' icon='tabler:circle-4-filled'></iconify-icon>"
    state.pauseCaseIcon5 = "<iconify-icon inline style='color:#C00030; font-size:23px' icon='tabler:circle-5-filled'></iconify-icon>"
    state.pauseCaseIcon6 = "<iconify-icon inline style='color:#C11C84; font-size:23px' icon='tabler:circle-6-filled'></iconify-icon>"
////Actions
 	state.actionsIcon1 = "<iconify-icon inline style='color:#241571; font-size:23px' icon='tabler:circle-1-filled'></iconify-icon>"
    state.actionsIcon2 = "<iconify-icon inline style='color:#0F52BA; font-size:23px' icon='tabler:circle-2-filled'></iconify-icon>"
    state.actionsIcon3 = "<iconify-icon inline style='color:#48AAAD; font-size:23px' icon='tabler:circle-3-filled'></iconify-icon>"
////Triggers
    state.triggerIcon1 = "<iconify-icon inline style='color:#E34234; font-size:23px' icon='tabler:circle-1-filled'></iconify-icon>"
    state.triggerIcon2 = "<iconify-icon inline style='color:#FF5F1F; font-size:23px' icon='tabler:circle-2-filled'></iconify-icon>"
    state.triggerIcon3 = "<iconify-icon inline style='color:#B7410E; font-size:23px' icon='tabler:circle-3-filled'></iconify-icon>"
    state.triggerIcon4 = "<iconify-icon inline style='color:#F28500; font-size:23px' icon='tabler:circle-4-filled'></iconify-icon>"
////Motion
    state.motionIcon1 = "<iconify-icon inline style='color:#097969; font-size:23px' icon='tabler:circle-1-filled'></iconify-icon>"
    state.motionIcon2 = "<iconify-icon inline style='color:#50C878; font-size:23px' icon='tabler:circle-2-filled'></iconify-icon>"
}    
//////////////////////////////////////////////////////////////  Other Stuff //////////////////////////////////////////////////////////////////
def updated() {  // runs every 'Done' on already installed app 
    unsubscribe()  ////   
    unschedule(switchOnHandler)  // cancels all(or one) scheduled jobs including runIn
    icons()
    buildCron()  // build schedules
    initialize()  // set schedules and subscribes
    if(logEnableBool) runIn(3600, logsOff)  // Disable all debug Logging after time elapsed
}
def installed() { updated() }  // only runs once for new app 'Done' or first time open 
def logsOff() {log.info "${app.label} -- All App 'debug' logging auto disabling itself"; app?.updateSetting("logEnableBool",[value:"false",type:"bool"]) }
def getFormat(type, myText="") {		
    if(type == "title") return "<h3 style='color:SteelBlue; line-height: 50%; font-weight: bold'>${myText}</h3>"  // Steel-Blue
    if(type == "blueRegular") return "<div style='color:SteelBlue; font-weight: bold; line-height: 97%'>${myText}</div>"  // Steel-Blue
    if(type == "noticable") return "<div style='color:#CC5500'>${myText}</div>"  // Burnt-Orange
    if(type == "lessImportant") return "<div style='color:green'>${myText}</div>" // Green
    if(type == "smallLineSpace") return "<div style='line-height: 50%; white-space:nowrap; '>${myText}</div>" // smallLineSpace
        
    if (formatBool) {if(type == "header") {return "<div style='color:#660000;font-weight: bold'>${myText}</div>"}  // Burgandy-Red //// ver1.2.0
                    if(type == "important") return "<div style='color:#5a8200; line-height: 97%'>${myText}</div>"  // Lime-Green
    	}
    else {if(type == "header") return "<div style='color:#000000;font-weight: bold'>${myText}</div>"  // Black
          if(type == "important") return "<div style='color:#000000; line-height: 97%'>${myText}</div>"   // Black
    	}
}
def displayTitle() {titleVersion();  section (getFormat("title",  "App: ${state.name} - ${"ver " + state.version}")) {} }

