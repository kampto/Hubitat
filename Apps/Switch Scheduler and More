/* Switch Scheduler and More
*  
*	2023 T. K. (kampto)
*	NOTES: Generate a schedule to Automate multiple Lights, Outlets, Switches, Relays, Sprinklers, Valves.... Use custom time or Sunste/Sunrise times with offsets. 
*   
*    Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at
*    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS,
*    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
*
*	Change Revision History:  
*   Ver		Date:		Who:		What:
*   2.0.1	2025-05-20	kampto    	Added; Leak Detect option, Modes per device, Motion sensor trig, Notification options. Other app enhancements. Improved notes.
*   1.5.2	2025-05-11	kampto    	Add option ignore a pause from rain or moisture sensors. Modes for all. Other app enhancements. Improved notes.
*   1.4.6	2024-07-16	kampto    	Fixed app error when removing a device, fixed null value error for run twice offset, fixed remove device unsubscribe
*   1.4.2	2024-04-15	kampto    	Fixed 2nd run time and 'wet' pause bug
*   1.4.0	2024-02-28	kampto    	Added all Off time user input
*   1.3.1	2023-09-26	kampto    	Added Humidity/Moisture sensor to pause sprinkler schedule. Add status of sprinker pause sensors below table
*   1.2.2	2023-07-28	kampto    	Added Valve capability and 2nd run time per day Hr offset per device, Bug fix on run twice a day
*   1.1.1	2023-06-13	kampto    	Added table display total time in days option.
*   1.1.0	2023-05-18	kampto    	Add sunset/sunrise start options, format changes.
*   1.0.3	2023-05-13	kampto    	Odd days only option. Sprinkler Options with moisture sensor. Pause a single device checkbox. Added Modes. More usage notes.
*   1.0.0	2023-05-09	kampto    	First Build from scratch.
*/

import groovy.time.TimeCategory
import java.text.SimpleDateFormat

def titleVersion() { state.name = "Switch/Valve Scheduler (Schedule On/Off: Lights, Outlets, Sprinklers, Switches, Relays, Valves...)"; state.version = "2.0.1" }
definition (
	name: "Switch/Valve Scheduler and More", namespace: "kampto", author: "T. K.",
	description: "Automate/Schedule Switches, Relays, Outlets, Sprinklers, Valves",
	category: "Control",
   	iconUrl: "",
	iconX2Url: "",
    importUrl: "https://raw.githubusercontent.com/kampto/Hubitat/main/Apps/Switch%20Scheduler%20and%20More",
    documentationLink: "https://community.hubitat.com/t/app-switch-scheduler-and-more-schedule-lights-outlets-switches-relays-sprinklers-valves-and-more/118720"
	)
preferences { page(name: "mainPage") }

////////////////////////////////////////////////////////////  Main Page Inputs/Set-Up /////////////////////////////////////////////////////////////
def mainPage() {
    if (app.getInstallationState() != "COMPLETE") {hide=false} else {hide=true}  
    if (state.DeVices == null) state.DeVices = [:]
    if (state.DeVicesList == null) state.DeVicesList = []
    if (pauseHumidValue == null) {pauseHumidValue = 50}
    if (runTwiceOffset == null) {runTwiceOffset = 12}
            
  dynamicPage(name: "mainPage", title: "", install: true, uninstall: true) {
  displayTitle() 
   section (getFormat("header","Initial Set-Up:"),hideable: true, hidden: hide){  
        label title: "<b>1. Name this App</b>", required: true, submitOnChange: true, width: 3
        input "DeVices", "capability.switch, capability.valve", title: "<b>2. Select Devices to Turn On/Off and Track Time</b>", required: true, multiple: true, submitOnChange: true, width: 6
        //input "DeVices2", "capability.switch, capability.valve", title: "<b>3. Optional: If you want same device to 2 differnt schedules then select it again</b>", required: false, multiple: true, submitOnChange: true, width: 6
        //input "DeVices3", "capability.switch, capability.valve", title: "<b>4. Optional: If you want same device to 3 differnt schedules then select it again</b>", required: false, multiple: true, submitOnChange: true, width: 6 
       paragraph "Availible capabilites include Switches and Valves. Combine multiple devices in single App table or create multiple instances of this App with differnt names."
      
       // DeVices = [DeVices, DeVices2, DeVices3].flatten().findAll{it}  //Combine Arrays
       
       	DeVices.each {dev ->
	   if(!state.DeVices["$dev.id"]) {    
            state.DeVices["$dev.id"] = [start: dev.currentSwitch == "on" || dev.currentValve == "open" ? now() : 0, total: 0, sunTime: false, sunset: true, offset: 0, sun: false, mon: false, tue: false, wed: false, thu: false, fri: false, sat: false, odd: false, startTime: "00000000000Select000000000000", durTime: 0, cron: "", days: "", zone: 0, counts: 0, runsDay: 1, pause: false, pauseCase: false, modes: "Any", motion: false]  
            state.DeVicesList += dev.id   
           }
       }
  }
  section {                         
     if(DeVices) {
         if(DeVices.id.sort() != state.DeVicesList.sort()) { 
		    state.DeVicesList = DeVices.id
			Map newState = [:]
			DeVices.each{dev ->  newState["$dev.id"] = state.DeVices["$dev.id"]} 
            state.DeVices = newState
            }
         
    refreshHandler()  // get latest times at app open
    paragraph displayTable()
	  ///////////////////////// Input Start Time 
      if(state.newStartTime) {
        input name: "newStartTime", type: "time", title:getFormat("noticable","<b>Enter Start/On Time, Applies to all checked days for Switch.<br><small>Uses 24hr time, &nbsp Hit Update</small>"), defaultValue: "", required: false,  submitOnChange:true, width: 5, newLineAfter: true, style: 'margin-left:10px'
          if(newStartTime) {
             state.DeVices[state.newStartTime].startTime = newStartTime
             state.remove("newStartTime")
		     app.removeSetting("newStartTime")
             paragraph "<script>{changeSubmit(this)}</script>"
		     }
	    } 
       ///////////////////////// Input Run Duration  
       if(state.newDurTime) {
        input name: "newDurTime", type: "number", title:getFormat("noticable","<b>Enter Run/On Duration in Minutes, Applies to all checked days for Switch. &nbsp <small>Hit Enter</small>"), defaultValue: 0, required: false,  submitOnChange:true, width: 8, newLineAfter: true, style: 'margin-left:10px'
          if(newDurTime) {
             state.DeVices[state.newDurTime].durTime = newDurTime
             state.remove("newDurTime")
		     app.removeSetting("newDurTime")
             paragraph "<script>{changeSubmit(this)}</script>"
		     }
		} 
       ///////////////////////// Sunrise / Sunset Offset time  //// ver1.1.0
       if(state.newOffsetTime) {
        input name: "newOffsetTime", type: "number", title:getFormat("noticable","<b>Enter +/- Offset time from Sunrise or Sunset in minutes, Applies to all checked days for Switch.<br><small>EX: 30, -30, or -90, &nbsp Hit Enter</small>"), defaultValue: 0, required: false,  submitOnChange:true, accepts: "-1000 to 1000", range: "-1000..1000", width: 8, newLineAfter: true, style: 'margin-left:10px'
          if(newOffsetTime) {
             state.DeVices[state.newOffsetTime].offset = newOffsetTime
             state.remove("newOffsetTime")
		     app.removeSetting("newOffsetTime")
             paragraph "<script>{changeSubmit(this)}</script>"
		     }
		} 
       ///////////////////////// Input Modes  
       if(state.newMode) {
       input name: "newMode", type: "mode", title: getFormat("noticable","<b>Select during which mode this device will only run.</b> <br> <small> Home, Away, etc.. &nbsp Or if alway select No Selection</small>"), defaultValue: "", submitOnChange:true, width: 7, required: false, newLineAfter: true, style: 'margin-left:10px'
             if(newMode) {
             state.DeVices[state.newMode].modes = newMode
             state.remove("newMode")
		     app.removeSetting("newMode")
             paragraph "<script>{changeSubmit(this)}</script>"
		     }
		}     
       input "refresh", "button", title: "<b>REFRESH</b> Table Times, Counts, & States", width: 4
       input "allOff", "button", title: "<b>TURN OFF</b> all switches/valves", width: 3 
       input name: "inDaysCBool", type: "bool", title:getFormat("important","Display Total Time in Days?"), defaultValue:false, submitOnChange:true, width: 3   //// ver1.1.6  
       
       statusBar()  
      }
  }
////////////////////////////////////////////////////////////  Advanced Inputs //////////////////////////////////////////////////////////////////      
   section(getFormat("header","Advanced Options:"),hideable: true, hidden: false) {
        input "updateButton", "button", title: "Update/Store Schedules without hitting Done exiting App" 
        input name: "pauseBool", type: "bool", title: getFormat("important","<b>Pause all Devices upcoming schedules? &nbsp Overrides Ignore Cases, Nothing will run</b>"), defaultValue:false, submitOnChange:true, style: 'margin-left:10px' 
        input name: "sprinklerBool", type: "bool", title: getFormat("important","<b>Are these Sprinkler switches/valves using a Wet or Moisture sensor(s)? &nbsp Open Sprinkler Case Options</b>"), defaultValue:false, submitOnChange:true, style: 'margin-left:10px' 
            if (sprinklerBool) {
                input "wetSensor", "capability.waterSensor", title: getFormat("important", "<b>Pause Case: Select Wet/Dry sensor(s) to Pause all Schedules (Optional)</b><br><small>'Wet' will pause upcoming, Applies to all devices with Ignore unchecked</small>"), required: false, multiple: true, submitOnChange: true, width: 7, style: 'margin-left:70px'  
                input "humidSensor", "capability.relativeHumidityMeasurement", title: getFormat("important", "<b>Pause Case: Select Moisture (humidity) sensor(s) to Pause all Schedules (Optional)</b><br><small>If >Humidity % Will pause upcoming, Applies to all devices with Ignore unchecked</small>"), required: false, multiple: true, submitOnChange: true, width: 7, style: 'margin-left:70px'  
                 if (humidSensor) {input name: "pauseHumidValue", type: "number", title: getFormat("blueRegular","<b>Select Humidity level % to Pause upcoming schedules</b><small>&nbsp &nbsp Default = 50%</small>"), defaultValue: "50", submitOnChange: true, required: false, width: 6, newLineAfter: true, style: 'margin-left:160px'
                }
             }
        input name: "allOffBool", type: "bool", title: getFormat("important","<b>Switch All Off at a Specific daily time?</b><br><small>This will not pause upcoming schedules, only turn off what is currently on</small>"), defaultValue:false, submitOnChange:true, style: 'margin-left:10px' 
            if (allOffBool) {
                input name: "allOffTime", type: "time", title:getFormat("blueRegular","<b>Enter All off time, Applies to all.&nbsp <small>Uses 24hr time, &nbsp Hit Update</small>"), defaultValue: "", required: false,  submitOnChange:true, width: 5, newLineAfter: true, style: 'margin-left:70px'
            }
        input name: "remoteSwitchBool", type: "bool", title: getFormat("important","<b>Remote Switch All Off and Pause/Resume Capability? &nbsp Overrides Ignore Cases</b><br><small>Use dashboard or virtual switch. This must remain checked ON to enable</small>"), defaultValue:false, submitOnChange:true, style: 'margin-left:10px' 
            if (remoteSwitchBool) {
                input "remoteSwitch", "capability.switch", title: getFormat("important", "<b>Select a Switch to Remotely turn Off all switches and Pause/Resume all schedules (Optional)</b><br><small>Real or Virtual Switch, Switch On is Off/Pause</small>"), required: false, multiple: false, submitOnChange: true, width: 8, style: 'margin-left:70px'   
            }
       	input name: "runTwiceOffset", type: "enum", title: getFormat("important","<b>If device 'Runs per Day' = 2 in table; Select hours after 1st run start to start 2nd run of day</b><br><small>Default = 12hr, &nbsp Only applies to all devices with 2 'Runs a day' selected, max 2nd run time is at hr 23:00</small>"), defaultValue: "12", submitOnChange: true,  options: ["1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16"], required: false, width: 7, newLineAfter: true, style: 'margin-left:10px'
       	input "motionSensor", "capability.motionSensor", title: getFormat("important", "<b>Select Motion Sensor(s) to trigger switch (Optional)</b><br><small>Applies to all devices with Motion checked in table. Will not run if paused or incorrect mode</small>"), required: false, multiple: true, submitOnChange: true, width: 7, style: 'margin-left:10px' 
       		if (motionSensor) {input name: "motionRunTime", type: "number", title: getFormat("blueRegular","<b>Enter minutes to run switch after Motion triggered</b><small>&nbsp &nbsp Enter 1 to 60min, Default = 3min</small>"), defaultValue: "3", submitOnChange: true, required: false, width: 6, accepts: "1 to 60", range: "1..60", newLineAfter: true, style: 'margin-left:160px'
       		input name: "invertBool", type: "bool", title: getFormat("important","<b>Invert to Off, If Motion and Switch currently On, switch Off instead?</b><br><small>Will switch Off for run time entered above then back On. Toggle a night light to alert intruders!</small>"), defaultValue:false, submitOnChange:true, style: 'margin-left:160px' 
            }
        input name: "leakBool", type: "bool", title: getFormat("important","<b>Leak Detect: Use Wet/Dry sensor as leak detect to turn Off all devices(valves) and pause all schedules (Optional)?</b><br><small>Applies to all switches/valves, This must remain checked ON to work. See Usage Notes for more info</small>"), defaultValue:false, submitOnChange:true, style: 'margin-left:10px'
       	    if (leakBool) {
                input "wetLeakSensor", "capability.waterSensor", title: getFormat("important", "<b>Select Wet/Dry sensor(s) to detect leak and trigger Shutdown</b><br><small>'Wet' will trigger, Not recommended to share same sensor with selected Sprinker wet/dry sensor</small>"), required: false, multiple: true, submitOnChange: true, width: 7, style: 'margin-left:70px'  
            }
        input name: "pushBool", type: "bool", title: getFormat("important","<b>Get Push Notifications from selected actions? &nbsp </b><small>This must remain checked ON to recieve notifications, Off to stop all notifications</small>"), defaultValue:false, submitOnChange:true, style: 'margin-left:10px'   //// ver2.0.1
             if (pushBool) {input "pushDevice", "capability.notification", title: "<b>Select device(s) to send notification to</b>", multiple: true, required: false, submitOnChange: true, width: 4, newLineAfter: true, style: 'margin-left:160px'       
             	input name: "pushMotionBool", type: "bool", title: getFormat("important","<b>Get Notificans about Motion Events?</b>"), defaultValue:false, submitOnChange:true, style: 'margin-left:160px'
                input name: "pushLeakBool", type: "bool", title: getFormat("important","<b>Get Notificans about Leak Detection Events?</b>"), defaultValue:false, submitOnChange:true, style: 'margin-left:160px'
                input name: "pushOnBool", type: "bool", title: getFormat("important","<b>Get Notificans about any Device Scheduled Turn On Event?</b>"), defaultValue:false, submitOnChange:true, style: 'margin-left:160px'             
             }
       	input name: "formatBool", type: "bool", title: getFormat("important","<b>Enable Alternative UI formatting, dark screen mode?</b>"), defaultValue:false, submitOnChange:true, style: 'margin-left:10px'
        input name: "logEnableBool", type: "bool", title: getFormat("important","<b>Enable Debug Logging of App based device activity and refreshes?</b><br><small>Shuts off in 1hr</small>"), defaultValue:true, submitOnChange:true, style: 'margin-left:10px'
        }
/////////////////////////////////////////////////////////////  Usage Notes Section  /////////////////////////////////////////////////////////////////
   section(getFormat("header","Usage Notes:"), hideable: true, hidden: hide) {  
      paragraph getFormat("lessImportant","<ul>"+    
      "<li>Use for any switch or valve capability; switches, outlets, relays, lights, security lights, sprinklers, etc.. Add as many as you want on table.</li>"+
      "<li>Table will not auto refresh values or states, you must hit in App Refresh button.</li>"+
      "<li>Select day(s) or odd days check boxes, enter Start time and Run Duration. Start times are in 24 hour format. Run Time in Minutes only.</li>"+
      "<li><b>Odd Days:</b> will run days 1st, 3rd, 5th,...29th, if 31st, then 1st again of month.</li>"+    
      "<li>To use Sunset/Sunrise with +/- offset, check box, check sunrise or sunset icon, click number to enter offset.</li>"+                    
	  "<li>If you make/change a schedule change it wont take unless you hit 'Done' exiting the App or hitting the 'Update/Store' button.</li>"+                    
      "<li><b>Total On Time and Counts:</b> will track all switch activity, from app and outside app.</li>"+
 	  "<li><b>Reset:</b> From table per row will reset the total On Time and Counts. It does not reset schedule or turn off the device</li>"+	
      "<li><b>Modes:</b> If your not using modes keep at 'Any'. If you want to only run during a specific Mode click and select that mode <br> If changed and need to get back to 'Any', go to Hub settings / Modes, and add new mode 'Any'"+	                     
      "<li><b>Motion:</b> Checking this box will turn On the switch if Motion device is triggerd. Select Motion device and run time in Advanced options. Will not change the scheduled on times if any.<br>If already On will turn off after Motion timer. If Invert enabled the, if On will switch Off for the time selected then back On. Makes it look like someone is Home!<br>For both Normal and Invert cases the Sensor needs to clear back to inactive to trigger again. Can use Motion triggers with or without a time schedule entered."+	
      "<li><b>Ignore Case</b> If this box is checked this device with ignore special pause cases and continue to run, Like Sprinker pause options. <br>This is paticular usefull if you mix light switches with sprinklers in same table and dont want your lighting schedules paused becuase of a sprinkler moisture sensor outside.</li>"+                     
      "<li><b>Remote Switch:</b> Optional, Select a virtual or real switch to remotely turn off all switches and pause/resume schedules (optional). Use case EX: Rain delay for spinklers, dashboard access.</li>"+
      "<li><b>Sprinklers:</b> Optional, Wet/Dry sensor if 'wet' will pause all schedules until turns to 'dry'. Does not pause Devices with Igonre Case checked</li>"+
      "<li><b>Sprinklers:</b> Optional, Moisture (humidity) sensor, Enter Humidity %, if exceeded will pause all schedules. Does not pause Devices with Igonre Case checked.</li>"+                    
      "<li><b>Leak Detect:</b> This will shut off and stop every device schedule permanently until a user unchecks 'Pause All Devices' Ignores modes and 'Ignore Case'. <br> Use case: if you have a water leak in house, can shut off an installed water valve listed in table. Not recommended to use if using 'wet' (rain) sensor for sprinklers.<br> Only triggers if sensor goes from Dry to Wet. If still 'wet' this will not prevent the valve from being manually turned on outside of app.</li>"+
      "<li><b>Runs Per Day:</b> Optional, Typically for sprinklers to run in morning and evening. Select 2 in table. Then select Hours after 1st run start in advanced options. <br>Note: If start time plus 2nd run offset exceeds hour 24 it will run at hour 23 2nd time. Start will not roll over into next day.</li>"+                    
      "<li><b>You must hit DONE at page bottom to save App after first making.</b></li>"+                    
      "</ul>")
      }
  }
}
//////////////////////////////////////////////////////////////  Main Table ////////////////////////////////////////////////////////////////////
String displayTable() {
    if(state.resetTotal) {  //// Reset Cumulative time and counts per device Button       
		def dev = DeVices.find{"$it.id" == state.resetTotal}
        state.DeVices[state.resetTotal].start = now()
        state.DeVices[state.resetTotal].total = 0
        state.DeVices[state.resetTotal].counts = 0
        state.remove("resetTotal")
	    }
    /////////////////////// Sunday - Saturday, odd day, Check Boxes
    if(state.sunCheckedBox) { def dev = DeVices.find{"$it.id" == state.sunCheckedBox}
        state.DeVices[state.sunCheckedBox].sun = true
        state.remove("sunCheckedBox") }
	else if(state.sunUnCheckedBox) {def dev = DeVices.find{"$it.id" == state.sunUnCheckedBox}  
	    state.DeVices[state.sunUnCheckedBox].sun = false
        state.remove("sunUnCheckedBox") }
    endif
    if(state.monCheckedBox) {def dev = DeVices.find{"$it.id" == state.monCheckedBox}  
	    state.DeVices[state.monCheckedBox].mon = true
        state.remove("monCheckedBox") }
	else if(state.monUnCheckedBox) {def dev = DeVices.find{"$it.id" == state.monUnCheckedBox}  
	    state.DeVices[state.monUnCheckedBox].mon = false
        state.remove("monUnCheckedBox") }
    endif
    if(state.tueCheckedBox) {def dev = DeVices.find{"$it.id" == state.tueCheckedBox}  
	    state.DeVices[state.tueCheckedBox].tue = true
        state.remove("tueCheckedBox") }
	else if(state.tueUnCheckedBox) {def dev = DeVices.find{"$it.id" == state.tueUnCheckedBox}  
	    state.DeVices[state.tueUnCheckedBox].tue = false
        state.remove("tueUnCheckedBox") }
    endif
    if(state.wedCheckedBox) {def dev = DeVices.find{"$it.id" == state.wedCheckedBox}  
	    state.DeVices[state.wedCheckedBox].wed = true
        state.remove("wedCheckedBox") }
	else if(state.wedUnCheckedBox) {def dev = DeVices.find{"$it.id" == state.wedUnCheckedBox}  
	    state.DeVices[state.wedUnCheckedBox].wed = false
        state.remove("wedUnCheckedBox") }
    endif
    if(state.thuCheckedBox) {def dev = DeVices.find{"$it.id" == state.thuCheckedBox}  
	    state.DeVices[state.thuCheckedBox].thu = true
        state.remove("thuCheckedBox") }
	else if(state.thuUnCheckedBox) {def dev = DeVices.find{"$it.id" == state.thuUnCheckedBox}  
	    state.DeVices[state.thuUnCheckedBox].thu = false
        state.remove("thuUnCheckedBox") }
    endif
    if(state.friCheckedBox) {def dev = DeVices.find{"$it.id" == state.friCheckedBox}  
	    state.DeVices[state.friCheckedBox].fri = true
        state.remove("friCheckedBox") }
	else if(state.friUnCheckedBox) {def dev = DeVices.find{"$it.id" == state.friUnCheckedBox}  
	    state.DeVices[state.friUnCheckedBox].fri = false
        state.remove("friUnCheckedBox") }
    endif
    if(state.satCheckedBox) {def dev = DeVices.find{"$it.id" == state.satCheckedBox}  
	    state.DeVices[state.satCheckedBox].sat = true
        state.remove("satCheckedBox") }
	else if(state.satUnCheckedBox) {def dev = DeVices.find{"$it.id" == state.satUnCheckedBox}  
	    state.DeVices[state.satUnCheckedBox].sat = false
        state.remove("satUnCheckedBox") }
    endif
    if(state.oddCheckedBox) {def dev = DeVices.find{"$it.id" == state.oddCheckedBox}  //// ver1.0.2
	    state.DeVices[state.oddCheckedBox].odd = true
        state.remove("oddCheckedBox") }
	else if(state.oddUnCheckedBox) {def dev = DeVices.find{"$it.id" == state.oddUnCheckedBox}  
	    state.DeVices[state.oddUnCheckedBox].odd = false
        state.remove("oddUnCheckedBox") }
    endif
   	if(state.motionCheckedBox) {def dev = DeVices.find{"$it.id" == state.motionCheckedBox}  //// ver1.4.7   Modes
    	state.DeVices[state.motionCheckedBox].motion = true
       	state.remove("motionCheckedBox") }
	else if(state.motionUnCheckedBox) {def dev = DeVices.find{"$it.id" == state.motionUnCheckedBox} 
  		state.DeVices[state.motionUnCheckedBox].motion = false
      	state.remove("motionUnCheckedBox") }
    endif
    if(state.pauseCaseCheckedBox) {def dev = DeVices.find{"$it.id" == state.pauseCaseCheckedBox}  //// ver1.4.7   Ignore Case
	    state.DeVices[state.pauseCaseCheckedBox].pauseCase = true
        state.remove("pauseCaseCheckedBox") }
	else if(state.pauseCaseUnCheckedBox) {def dev = DeVices.find{"$it.id" == state.pauseCaseUnCheckedBox}  
	    state.DeVices[state.pauseCaseUnCheckedBox].pauseCase = false
        state.remove("pauseCaseUnCheckedBox") }
    endif
    if(state.pauseCheckedBox) {def dev = DeVices.find{"$it.id" == state.pauseCheckedBox}  //// ver1.0.2
	    state.DeVices[state.pauseCheckedBox].pause = true
        state.remove("pauseCheckedBox") }
	else if(state.pauseUnCheckedBox) {def dev = DeVices.find{"$it.id" == state.pauseUnCheckedBox}  
	    state.DeVices[state.pauseUnCheckedBox].pause = false
        state.remove("pauseUnCheckedBox") }
    endif 
    /////////////////////// Sunrise / Sunset //// ver1.1.0
    if(state.sunTimeCheckedBox) { def dev = DeVices.find{"$it.id" == state.sunTimeCheckedBox}
        state.DeVices[state.sunTimeCheckedBox].sunTime = true
        state.remove("sunTimeCheckedBox") }
	else if(state.sunTimeUnCheckedBox) {def dev = DeVices.find{"$it.id" == state.sunTimeUnCheckedBox}  
	    state.DeVices[state.sunTimeUnCheckedBox].sunTime = false
        state.remove("sunTimeUnCheckedBox") }
    endif
    if(state.sunsetCheckedBox) {def dev = DeVices.find{"$it.id" == state.sunsetCheckedBox}  
	    state.DeVices[state.sunsetCheckedBox].sunset = true
        state.remove("sunsetCheckedBox") }
	else if(state.sunsetUnCheckedBox) {def dev = DeVices.find{"$it.id" == state.sunsetUnCheckedBox}  
	    state.DeVices[state.sunsetUnCheckedBox].sunset = false
        state.remove("sunsetUnCheckedBox") }
    endif
    if(state.runsDayBox1) {def dev = DeVices.find{"$it.id" == state.runsDayBox1}  //// ver1.2.1
	    state.DeVices[state.runsDayBox1].runsDay = 1
        state.remove("runsDayBox1") }
	else if(state.runsDayBox2) {def dev = DeVices.find{"$it.id" == state.runsDayBox2}  
	    state.DeVices[state.runsDayBox2].runsDay = 2
        state.remove("runsDayBox2") }
    endif
    /////////////////////////////// Table Header Build
	String str = "<script src='https://code.iconify.design/iconify-icon/1.0.0/iconify-icon.min.js'></script>"   //////// font-weight: bold !important; word-wrap: break-word !important; white-space: normal!important
        str += "<style>.mdl-data-table tbody tr:hover{background-color:inherit} .tstat-col td, .tstat-col th {font-size:15px !important; padding:2px 4px;text-align:center} + .tstat-col td {font-size:13px  }" +
        "</style><div style='overflow-x:auto'><table class='mdl-data-table tstat-col' style=';border:3px solid black'>" +
        "<thead><tr style='border-bottom:2px solid black'><th>#</th>" +	
        "<th style='border-right:2px solid black'><small><small>App ver${state.version}</small></small><br>Device</th>" +
        "<th style='border-right:2px solid black'>State</th>" +     
		"<th style='width: 60px !important'>Start<br>Time</th>" +
        "<th>Use Sun<br>Set/Rise?</th>" +  //// ver1.1.0
        "<th style='width: 60px !important'>Rise or<br>Set?</th>" +  //// ver1.1.0
        "<th style='width: 60px !important'>Offset<br>+/-Min</th>" +  //// ver1.1.0
        "<th>Run<br>Time</th>" +  
        "<th style='width: 65px !important; border-right:2px solid black'>Runs<br>Per Day</th>" +  //// ver1.2.1    
        "<th>Sun</th>" + "<th>Mon</th>" + "<th>Tue</th>" + "<th>Wed</th>" + "<th>Thu</th>" + "<th>Fri</th>" + "<th>Sat</th>" +       
        "<th style='border-right:2px solid black'>Odd<br>Days?</th>"+  //// ver1.0.3
        "<th style='border-right:2px solid black'>Run<br>Mode</th>"+  //// ver1.4.7  
        "<th style='border-right:2px solid black'>Use<br>Motion</th>"+  //// ver2.0.1      
        "<th style='border-right:2px solid black'>Ignore<br>Case?</th>"+  //// ver1.4.7
        "<th style='border-right:2px solid black'>Pause<br>Sched?</th>"+    //// ver1.0.3    
        "<th>On<br>Counts" +    
        "<th>Total<br>OnTime</th>"+
        "<th>Reset<br>OnTime</th></tr></thead>"
        
    int zone = 0
    DeVices.sort{it.displayName.toLowerCase()}.each {dev ->
        zone += 1
        state.offsetRiseAndSet = getSunriseAndSunset(sunriseOffset: state.DeVices["$dev.id"].offset, sunsetOffset: state.DeVices["$dev.id"].offset)  //// ver1.1.0
        if (state.DeVices["$dev.id"].sunTime) {  //// ver1.0.4
          if (state.DeVices["$dev.id"].sunset) {state.DeVices["$dev.id"].startTime = state.offsetRiseAndSet.sunset.toString() }
          else {state.DeVices["$dev.id"].startTime = state.offsetRiseAndSet.sunrise.toString() }
          }
        String thisStartTime = state.DeVices["$dev.id"].startTime.substring(11, state.DeVices["$dev.id"].startTime.length() - 12) 
        String thisDurTime = state.DeVices["$dev.id"].durTime
        String thisOffsetTime = state.DeVices["$dev.id"].offset
        String thisCron = state.DeVices["$dev.id"].cron
        String thisZone = state.DeVices["$dev.id"].zone = zone
        String thisMode = state.DeVices["$dev.id"].modes 
        
        ////////////////////////// Active/On Time Calc
        int counts = state.DeVices["$dev.id"].counts   
        int total = state.DeVices["$dev.id"].total / 1000
        float totalDays = (total / 86400) as float //// ver1.1.1
        int hours = total / 3600
        total = total % 3600
	    int mins = total / 60
	    int secs = total % 60
        String time = "$hours:${mins < 10 ? "0" : ""}$mins:${secs < 10 ? "0" : ""}$secs"
         if (inDaysCBool) {time = String.format("%.3f", totalDays)} // For table Only  //// ver1.1.1
	     if (state.DeVices["$dev.id"].sunTime) {startTime = thisStartTime} //// ver1.1.0
         else {startTime = buttonLink("o$dev.id", thisStartTime, "MediumBlue")}
         endif
        
        String devLink = "<a href='/device/edit/$dev.id' target='_blank' title='Open Device Page for $dev'>$dev"
		String resetTotal = buttonLink("z$dev.id", "<iconify-icon icon='bx:reset'></iconify-icon>", "black", "23px") 
        String durTime = buttonLink("q$dev.id", thisDurTime, "MediumBlue") 
        String mode = buttonLink("1$dev.id", thisMode, "MediumBlue")
        String sunCheckBoxT = (state.DeVices["$dev.id"].sun) ? buttonLink("a$dev.id", "<iconify-icon icon='material-symbols:check-box'></iconify-icon>", "green", "23px") : buttonLink("b$dev.id", "<iconify-icon icon='material-symbols:check-box-outline-blank'></iconify-icon>", "black", "23px")  
        String monCheckBoxT = (state.DeVices["$dev.id"].mon) ? buttonLink("c$dev.id", "<iconify-icon icon='material-symbols:check-box'></iconify-icon>", "green", "23px") : buttonLink("d$dev.id", "<iconify-icon icon='material-symbols:check-box-outline-blank'></iconify-icon>", "black", "23px")
        String tueCheckBoxT = (state.DeVices["$dev.id"].tue) ? buttonLink("e$dev.id", "<iconify-icon icon='material-symbols:check-box'></iconify-icon>", "green", "23px") : buttonLink("f$dev.id", "<iconify-icon icon='material-symbols:check-box-outline-blank'></iconify-icon>", "black", "23px")
        String wedCheckBoxT = (state.DeVices["$dev.id"].wed) ? buttonLink("g$dev.id", "<iconify-icon icon='material-symbols:check-box'></iconify-icon>", "green", "23px") : buttonLink("h$dev.id", "<iconify-icon icon='material-symbols:check-box-outline-blank'></iconify-icon>", "black", "23px")
        String thuCheckBoxT = (state.DeVices["$dev.id"].thu) ? buttonLink("i$dev.id", "<iconify-icon icon='material-symbols:check-box'></iconify-icon>", "green", "23px") : buttonLink("j$dev.id", "<iconify-icon icon='material-symbols:check-box-outline-blank'></iconify-icon>", "black", "23px")
        String friCheckBoxT = (state.DeVices["$dev.id"].fri) ? buttonLink("k$dev.id", "<iconify-icon icon='material-symbols:check-box'></iconify-icon>", "green", "23px") : buttonLink("l$dev.id", "<iconify-icon icon='material-symbols:check-box-outline-blank'></iconify-icon>", "black", "23px")
        String satCheckBoxT = (state.DeVices["$dev.id"].sat) ? buttonLink("m$dev.id", "<iconify-icon icon='material-symbols:check-box'></iconify-icon>", "green", "23px") : buttonLink("n$dev.id", "<iconify-icon icon='material-symbols:check-box-outline-blank'></iconify-icon>", "black", "23px")
        String oddCheckBoxT = (state.DeVices["$dev.id"].odd) ? buttonLink("r$dev.id", "<iconify-icon icon='material-symbols:check-box'></iconify-icon>", "SteelBlue", "23px") : buttonLink("s$dev.id", "<iconify-icon icon='material-symbols:check-box-outline-blank'></iconify-icon>", "black", "23px")  //// ver1.0.3
        String runsPerDayT = (state.DeVices["$dev.id"].runsDay == 1) ? buttonLink("u$dev.id", "<iconify-icon icon='tabler:circle-1-filled'></iconify-icon>", "SteelBlue", "23px") : buttonLink("p$dev.id", "<iconify-icon icon='tabler:circle-2-filled'></iconify-icon>", "darkorange", "23px")  //// ver1.2.1
        String motionCheckBoxT = (state.DeVices["$dev.id"].motion) ?  buttonLink("y5$dev.id", "<iconify-icon icon='material-symbols:check-box'></iconify-icon>", "purple", "23px") : buttonLink("y6$dev.id", "<iconify-icon icon='material-symbols:check-box-outline-blank'></iconify-icon>", "black", "23px")  //// ver1.4.7
        String pauseCaseCheckBoxT = (state.DeVices["$dev.id"].pauseCase) ?  buttonLink("y3$dev.id", "<iconify-icon icon='material-symbols:check-box'></iconify-icon>", "darkorange", "23px") : buttonLink("y4$dev.id", "<iconify-icon icon='material-symbols:check-box-outline-blank'></iconify-icon>", "black", "23px")  //// ver1.4.7
        String pauseCheckBoxT = (state.DeVices["$dev.id"].pause) ? buttonLink("t$dev.id", "<iconify-icon icon=ic:sharp-pause-circle-filled></iconify-icon>", "red", "23px") : buttonLink("v$dev.id", "<iconify-icon icon=ic:baseline-play-circle></iconify-icon>", "green", "23px")  //// ver1.0.3
        String sunTimeCheckBoxT = (state.DeVices["$dev.id"].sunTime) ? buttonLink("w$dev.id", "<iconify-icon icon='material-symbols:check-box'></iconify-icon>", "purple", "23px") : buttonLink("x$dev.id", "<iconify-icon icon='material-symbols:check-box-outline-blank'></iconify-icon>", "black", "23px")  //// ver1.1.0
        String sunsetCheckBoxT = (state.DeVices["$dev.id"].sunset) ? buttonLink("y0$dev.id", "<iconify-icon icon=ph:moon-stars-duotone></iconify-icon>", "DodgerBlue", "23px") : buttonLink("y1$dev.id", "<iconify-icon icon='ph:sun-duotone'></iconify-icon>", "orange", "23px")  //// ver1.1.0
        String offset = buttonLink("y2$dev.id", thisOffsetTime, "MediumBlue")  //// ver1.1.0
        //// if (logEnableBool) {log.info "App: ${app.label} - Page Refresh, *${dev}*, StartTime-${thisStartTime}...Duration-${thisDurTime}...Counts-${counts}...Cron-${thisCron}"}
        
        /////////////////////////////// Table Rows Build
        str += "<tr style='color:black'><td>$thisZone</td>" + 
        "<td style='border-right:2px solid black'>$devLink</td>" 
            if (dev.currentSwitch) {str += "<td style='font-weight:bold; border-right:2px solid black; color:${dev.currentSwitch == "on" ? "green" : "red"}'title='State $dev'>$dev.currentSwitch </td>"}   ///////////////
            else if (dev.currentValve) {str += "<td style='font-weight:bold; border-right:2px solid black; color:${dev.currentValve == "open" ? "green" : "red"}'title='State $dev'>$dev.currentValve </td>"}    ///////////////
            endif 
            if (state.DeVices["$dev.id"].sunTime) {str +="<td title='Start Time with Sunset or Sunrise +/- offset'>$startTime</td>"}  //// ver1.1.0
            else str += "<td style='font-weight:bold !important' title='${thisStartTime ? "Click to Change Start Time" : "Select"}'>$startTime</td>"
            endif
        str += "<td title='Use Sunrise or Sunset for Start time'>$sunTimeCheckBoxT</td>"  //// ver1.0.4    
            if (state.DeVices["$dev.id"].sunTime) {str += "<td title='Sunset start (moon), otherwise Sunrise start(sun)'>$sunsetCheckBoxT</td>" +  //// ver1.1.0
             "<td style='font-weight:bold' title='${thisOffsetTime ? "Click to set +/- minutes for Sunset or Sunrise start time" : "Select"}'>$offset</td>"  }
            else {str += "<td colspan=2 title='User Entered time (not sunset/sunrise)'>User Time</td>"}   //// ver1.0.4   
            endif
        str += "<td style='font-weight:bold; title='${thisDurTime ? "Click to Change Run Duration Minutes" : "Select"}'>$durTime</td>" 
        str += "<td style='border-right:2px solid black' title='${thisDurTime ? "Click to Change to run Once or Twice a day" : "Select"}'>$runsPerDayT</td>"   //// ver1.2.1
            if (state.DeVices["$dev.id"].odd) {str += "<td colspan=7 title='Run Every Odd Day of Month'>Run Every Odd day of Month</td>"}  //// ver1.0.2
            else {str +=   
            "<td title='Check Box to select Day'>$sunCheckBoxT</td>" +  
            "<td title='Check Box to select Day'>$monCheckBoxT</td>" +  
            "<td title='Check Box to select Day'>$tueCheckBoxT</td>" +  
            "<td title='Check Box to select Day'>$wedCheckBoxT</td>" +  
            "<td title='Check Box to select Day'>$thuCheckBoxT</td>" +  
            "<td title='Check Box to select Day'>$friCheckBoxT</td>" +  
            "<td title='Check Box to select Day'>$satCheckBoxT</td>" 
             }
            endif
        str +=
        "<td style='border-right:2px solid black' title='Check Box to Run on Odd Days only'>$oddCheckBoxT</td>" +
       	"<td style='border-right:2px solid black' title='${thisMode ? "Click to Change Mode" : "Select"}'>$mode</td>" +     
        "<td style='border-right:2px solid black' title='Check Box to turn on switch if Motion event for specified time in advanced options'>$motionCheckBoxT</td>" +     
        "<td style='border-right:2px solid black' title='Check Box to have this device ignore the special pause cases like Wet/Moisture sched pause'>$pauseCaseCheckBoxT</td>" +     
        "<td style='border-right:2px solid black' title='Check Box to Pause this device schedule, Red is paused, Green is run'>$pauseCheckBoxT</td>" +     
        "<td style='font-weight:bold' title='Total On Counts' >${state.DeVices["$dev.id"].counts}</td>" 
        if (dev.currentSwitch) {str += "<td style='font-weight:bold; color:${dev.currentSwitch == "on" ? "green" : "red"}'>$time</td>" }  
        else if (dev.currentValve) {str += "<td style='font-weight:bold; color:${dev.currentValve == "open" ? "green" : "red"}'>$time</td>" }   //// ver1.20 
        endif 
        str += "<td style='border-right:3px solid black' title='Reset Total On Time & Counts for $dev' style='padding:0px 0px'>$resetTotal</td></tr>" 
        }
   	str += "</table></div>"
    str
}
String buttonLink(String btnName, String linkText, color = SteelBlue, font = "13px") { //// Device Link Format
   "<div class='form-group'><input type='hidden' name='${btnName}.type' value='button'></div><div><div class='submitOnChange' onclick='buttonClick(this)' style='color:$color;cursor:pointer;font-size:$font'>$linkText</div></div><input type='hidden' name='settings[$btnName]' value=''>"
}
/////////////////////////////////////////////////////////// Schedules and Subscribes //////////////////////////////////////////////////////////
void initialize() {
     subscribe(DeVices, "switch.on", onTimeHandler)
	 subscribe(DeVices, "switch.off", offTimeHandler)
     subscribe(DeVices, "valve.open", onTimeHandler)  //// ver1.20
	 subscribe(DeVices, "valve.closed", offTimeHandler)  //// ver1.20
     subscribe(remoteSwitch, "switch.on", remoteOffHandler)
     subscribe(remoteSwitch, "switch.off", remoteOffHandler)
     subscribe(wetSensor, "water.wet", remoteOffHandler)  //// ver1.0.1
     subscribe(wetSensor, "water.dry", remoteOffHandler)  
     subscribe(wetLeakSensor, "water.wet", remoteOffHandler)  //// ver2.0.1
     subscribe(wetLeakSensor, "water.dry", remoteOffHandler)  
     subscribe(humidSensor, "humidity", remoteOffHandler)  //// ver1.3.0
     subscribe(motionSensor, "motion.active", motionHandler)  //// ver2.0.1 	
     
     schedule("0 0 1 ? * * *", sunHandler)   // Every day at 1am to get new sunrise/sunset times  //// ver1.1.0
     if (allOffBool) {schedule("${state.allOffCron}", allOffHandler)} // Set All off Time  //// ver1.4.0
    
     ////////////// Set device cron schedules
     DeVices.sort{it.displayName.toLowerCase()}.each {dev ->
         zone = state.DeVices["$dev.id"].zone
         if (state.DeVices["$dev.id"].cron && state.DeVices["$dev.id"].durTime != 0) {
            schedule("${state.DeVices["$dev.id"].cron}", switchOnHandler, [data:zone, overwrite:false]) 
            if (logEnableBool) {log.info "${app.label} -SCHEDULED Device ${dev}......duration = ${state.DeVices["$dev.id"].durTime}.....cronString = ${state.DeVices["$dev.id"].cron}"}
         }
     }
    sensorUpdate() // Get latest state from sensors (Wet, Humid, Motion)
}   
/////////////////////////////////////////////////////////////// Sensor Updates //////////////////////////////////////////////////////////////////
def sensorUpdate() {
	if (humidSensor) {state.humidSensorValue = humidSensor.currentHumidity} // Set Values  //// ver1.3.0
    if (wetSensor) {state.wetSensorValue = wetSensor.currentWater}  // Set Values  //// ver1.3.0
    if (wetLeakSensor) {state.wetLeakSensorValue = wetLeakSensor.currentWater}  // Set Values  //// ver2.0.1
    if (motionSensor) {state.motionSensorValue = motionSensor.currentMotion} // Set Values  //// ver2.0.1
}
////////////////////////////////////////////////////////////////// Handlers //////////////////////////////////////////////////////////////////
def onTimeHandler(evt) {
    state.DeVices[evt.device.id].start = now()
    state.DeVices[evt.device.id].counts += 1  
    if (logEnableBool) {log.debug "${app.label} - ONtime HANDLER, Device ${evt.device}.....start= ${state.DeVices[evt.device.id].start}" }
}
def offTimeHandler(evt) {
    state.DeVices[evt.device.id].total += now() - state.DeVices[evt.device.id].start
    if (logEnableBool) {log.debug "${app.label} - OFFtime HANDLER, Device ${evt.device}.....total= ${state.DeVices[evt.device.id].total}"} 
}
void switchOnHandler(data) { 
    if (pauseBool) {return} // All paused, get out, dont run  //// ver1.4.7  revised  
       	DeVices.each { dev -> 
          if (!state.DeVices["$dev.id"].pause) { //// Pasued per device in table
            if ((state.DeVices["$dev.id"].modes == location.mode) || state.DeVices["$dev.id"].modes == "Any") { /// Mode selected in table or Any, ver1.4.7
          		if (state.DeVices["$dev.id"].pauseCase == true || (!state.tempPauseBool && state.DeVices["$dev.id"].pauseCase == false)) {  //// ver 1.4.7 revised
            		if (data.value == state.DeVices["$dev.id"].zone ) {
                		zone = state.DeVices["$dev.id"].zone
                		log.info "${app.label}: Device ${dev} Scheduled Turn On for duration ${state.DeVices["$dev.id"].durTime}"}
                    	if (pushBool && pushOnBool) {pushDevice.deviceNotification("App: ${app.label}, Scheduled Action, Device ${dev} turning ON for ${state.DeVices["$dev.id"].durTime}min")} //// ver2.0.1 
                    	if (dev.currentSwitch)  {dev.on()}
                		if (dev.currentValve)  {dev.open()}  //// ver1.20
                       	runIn(60 * state.DeVices["$dev.id"].durTime, switchOffHandler, [data:zone, overwrite:false])
                    }
                }
        	}
     	}
     }
void motionHandler(evt) { //// ver 2.0.1
    sensorUpdate() // Get latest state from sensors (Wet, Humid, Motion)
    if (pauseBool) {return} // All paused, get out, dont run
       	DeVices.each { dev -> 
          if (!state.DeVices["$dev.id"].pause && state.DeVices["$dev.id"].motion) { //// Pasued per device in table
           	if ((state.DeVices["$dev.id"].modes == location.mode) || state.DeVices["$dev.id"].modes == "Any") { /// Mode selected in table or Any, ver1.4.7
          		if (state.DeVices["$dev.id"].pauseCase == true || (!state.tempPauseBool && state.DeVices["$dev.id"].pauseCase == false)) {  //// ver 1.4.7 revised
            		zone = state.DeVices["$dev.id"].zone
                    //int xRun = Integer.valueOf(60 * motionRunTime) //xRun = Integer.parseInt(60.0 * motionRunTime) //// Convert to integer
                    //log.debug "xRun = ${xRun}"
                  	if (!invertBool) { //  Turn On if Off
                        if (pushBool && pushMotionBool) {pushDevice.deviceNotification("App: ${app.label}, Motion Detected by ${evt.device}, Device ${dev} turning ON for ${motionRunTime}min")} //// ver2.0.1
                        if (dev.currentSwitch && dev.currentSwitch == "off") {dev.on(); runIn(60 * motionRunTime, switchOffHandler, [data:zone, overwrite:false])}
                		if (dev.currentValve && dev.currentValve == "closed") {dev.open(); runIn(60 * motionRunTime, switchOffHandler, [data:zone, overwrite:false])}  //// ver1.20
                           	}
                   	else { //  Turn Off if On 
                        if (pushBool && pushMotionBool) {pushDevice.deviceNotification("App: ${app.label}, Motion Detected by ${evt.device}, Device ${dev} turning OFF for ${motionRunTime}min")} //// ver2.0.1
                        if (dev.currentSwitch && dev.currentSwitch == "on") {dev.off(); runIn(60 * motionRunTime, motionOnHandler, [data:zone, overwrite:false])}
                		if (dev.currentValve && dev.currentValve == "open") {dev.close(); runIn(60 * motionRunTime, motionOnHandler, [data:zone, overwrite:false])}  //// ver1.20
                            	}
                    log.info "${app.label}: Motion Detected by ${evt.device}, Device ${dev} Toggling for ${motionRunTime}min"
                  	if (logEnableBool) {log.debug "${app.label} - MOTION-Handler...Device = ${dev}...SwitchDuration = ${motionRunTime*60}sec... Motion Sensor ${evt.device} is '${evt.device.currentMotion}'... Invert? = ${invertBool} ... MotionCheckBox = ${state.DeVices["$dev.id"].motion} ... Zone = ${state.DeVices["$dev.id"].zone}"}
                }
        	}
     	}
 }
}
void switchOffHandler(data) {
    DeVices.each { dev -> 
        if (data.value == state.DeVices["$dev.id"].zone ) {
           if (dev.currentSwitch)  {dev.off()} 
           if (dev.currentValve)  {dev.close()}  //// ver1.20
           log.info "${app.label}: Device = ${dev}, Turning OFF"} 
         }
     }
void motionOnHandler(data) { ////ver2.0.1 Added for motion Invert mode
    if (pauseBool) {return} // All paused, get out, dont run
    DeVices.each { dev ->
        if (!state.DeVices["$dev.id"].pause && state.DeVices["$dev.id"].motion) {
        	if (data.value == state.DeVices["$dev.id"].zone ) {
           		if (dev.currentSwitch && dev.currentSwitch == "off")  {dev.on()}
           		if (dev.currentValve && dev.currentValve == "closed")  {dev.open()}
                if (logEnableBool) {log.debug "${app.label} -Motion Back On handler... Device = ${dev}...zone = ${data.value}"} 
            }
        }
     }
}
def allOffHandler(evt) {
    DeVices.each { dev ->
    	if (dev.currentSwitch == "on") {dev.off()}  
    	else if (dev.currentValve == "open") {dev.close()}  //// ver1.20
    	endif
    log.info "${app.label}: All Devices Off triggered"     
    }
}
def remoteOffHandler(evt) { // Handles remote off/pasue and the wet/humidity sched pause
    if (wetSensor && evt.device.currentWater) {state.wetSensorValue = evt.device.currentWater} 
    if (wetLeakSensor && evt.device.currentWater) {state.wetLeakSensorValue = evt.device.currentWater} ////ver2.0.1
    if (humidSensor && evt.device.currentHumidity) {state.humidSensorValue = evt.device.currentHumidity}
    
    if ((evt.device.currentSwitch == "on" && remoteSwitchBool) || (leakBool && wetLeakSensor && state.wetLeakSensorValue == "wet")) { //// Shutdown and permanent pause
        	state.pauseBool = true; app?.updateSetting("pauseBool",[value:"true",type:"bool"])  // remote switch control to turn off and pause everything
            if (pushBool && pushLeakBool && leakBool) {pushDevice.deviceNotification("App: ${app.label}, Leak Detected by ${evt.device}, turning all Devices OFF and Pause all schedules")} /// ver2.0.1
        	DeVices.each { dev ->
                if (dev.currentSwitch == "on") {dev.off()}  
        		else if (dev.currentValve == "open") {dev.close()}  //// ver1.20
        		endif    
        	}
    }
    if (evt.device.currentSwitch == "off" && remoteSwitchBool) {state.pauseBool = false; app?.updateSetting("pauseBool",[value:"false",type:"bool"])} // Unpause permanent paause
   	if (wetSensor && state.wetSensorValue == "wet") {state.tempPauseBool = true}  //// ver1.0.1,  Wet pause
    else if (humidSensor && state.humidSensorValue >= pauseHumidValue) {state.tempPauseBool = true}  //// ver1.3.0,   Humid pause
    else {state.tempPauseBool = false}                           
    endif
    if (logEnableBool) {log.debug "App: ${app.label} - Remote Pause/Resume Handler....Device ${evt.device}....Switch=${evt.device.currentSwitch} or Water=${state.wetSensorValue} or Humidity=${state.humidSensorValue}....state.tempPauseBool ${state.tempPauseBool}"}
}
def sunHandler(evt) {  // get new sunrise/sunset times every day  //// ver1.1.0
    DeVices.each { dev -> 
        if (state.DeVices["$dev.id"].sunTime) {
            state.offsetRiseAndSet = getSunriseAndSunset(sunriseOffset: state.DeVices["$dev.id"].offset, sunsetOffset: state.DeVices["$dev.id"].offset) 
            if (state.DeVices["$dev.id"].sunset) {state.DeVices["$dev.id"].startTime = state.offsetRiseAndSet.sunset.toString() }
            else {state.DeVices["$dev.id"].startTime = state.offsetRiseAndSet.sunrise.toString() }
            }
         }
    updated()  // Rebuild cron with new sunSet/Rise schedules
}
void appButtonHandler(btn) {
    if (btn == "refresh") refreshHandler()   
    else if (btn == "allOff") allOffHandler()  
    else if (btn == "updateButton") updated()  
    else if (btn.startsWith("a")) state.sunUnCheckedBox = btn.minus("a") 
    else if (btn.startsWith("b")) state.sunCheckedBox = btn.minus("b")
    else if (btn.startsWith("c")) state.monUnCheckedBox = btn.minus("c") 
    else if (btn.startsWith("d")) state.monCheckedBox = btn.minus("d")
    else if (btn.startsWith("e")) state.tueUnCheckedBox = btn.minus("e") 
    else if (btn.startsWith("f")) state.tueCheckedBox = btn.minus("f")
    else if (btn.startsWith("g")) state.wedUnCheckedBox = btn.minus("g") 
    else if (btn.startsWith("h")) state.wedCheckedBox = btn.minus("h")
    else if (btn.startsWith("i")) state.thuUnCheckedBox = btn.minus("i") 
    else if (btn.startsWith("j")) state.thuCheckedBox = btn.minus("j")
    else if (btn.startsWith("k")) state.friUnCheckedBox = btn.minus("k") 
    else if (btn.startsWith("l")) state.friCheckedBox = btn.minus("l")
    else if (btn.startsWith("m")) state.satUnCheckedBox = btn.minus("m") 
    else if (btn.startsWith("n")) state.satCheckedBox = btn.minus("n")
    else if (btn.startsWith("o")) state.newStartTime = btn.minus("o") 
    else if (btn.startsWith("q")) state.newDurTime = btn.minus("q") 
    else if (btn.startsWith("r")) state.oddUnCheckedBox = btn.minus("r") 
    else if (btn.startsWith("s")) state.oddCheckedBox = btn.minus("s")
    else if (btn.startsWith("t")) state.pauseUnCheckedBox = btn.minus("t") 
    else if (btn.startsWith("v")) state.pauseCheckedBox = btn.minus("v")
    else if (btn.startsWith("w")) state.sunTimeUnCheckedBox = btn.minus("w")  //// ver1.1.0
    else if (btn.startsWith("x")) state.sunTimeCheckedBox = btn.minus("x")  //// ver1.1.0 
    else if (btn.startsWith("y0")) state.sunsetUnCheckedBox = btn.minus("y0")  //// ver1.1.0
    else if (btn.startsWith("y1")) state.sunsetCheckedBox = btn.minus("y1")  //// ver1.1.0
    else if (btn.startsWith("y2")) state.newOffsetTime = btn.minus("y2")  //// ver1.1.0
    else if (btn.startsWith("y3")) state.pauseCaseUnCheckedBox = btn.minus("y3")  //// ver1.4.7
    else if (btn.startsWith("y4")) state.pauseCaseCheckedBox = btn.minus("y4")  //// ver1.4.7 
    else if (btn.startsWith("y5")) state.motionUnCheckedBox = btn.minus("y5")  //// ver1.4.7
    else if (btn.startsWith("y6")) state.motionCheckedBox = btn.minus("y6")  //// ver1.4.7    
    else if (btn.startsWith("p")) state.runsDayBox1 = btn.minus("p")  //// ver1.2.1
    else if (btn.startsWith("u")) state.runsDayBox2 = btn.minus("u")  //// ver1.2.1    
    else if (btn.startsWith("z")) state.resetTotal = btn.minus("z")  
    else if (btn.startsWith("1")) state.newMode = btn.minus("1")  //// ver1.5.2      
    endif    
}
def refreshHandler() { ///////////// Update Times if Active/On
    state.DeVices.each {k, v ->
        def dev = DeVices.find{"$it.id" == k}
        if (dev.currentSwitch == "on" || dev.currentValve == "open") {  //////////////////  
          state.DeVices[k].total += now() - state.DeVices[k].start
		  state.DeVices[k].start = now()
          }
    }
    //////// Pause or trigger schedule sensors
      sensorUpdate() //// ver2.0.1 Get latest state from sensors (Wet, Humid, Motion)  
      //if (wetSensor && state.wetSensorValue == "wet") {state.tempPauseBool = true}  //// ver1.0.1
      //else if (humidSensor && state.humidSensorValue >= pauseHumidValue) {state.tempPauseBool = true}  //// ver1.3.0
      //else {state.tempPauseBool = false}                           
      //endif
      if (logEnableBool) {log.debug "App: ${app.label} - Refresh Handler..  Mode = ${location.mode}, Water=${state.wetSensorValue} or pauseHumidValue=${pauseHumidValue}, Humidity=${state.humidSensorValue}....state.tempPauseBool=${state.tempPauseBool}"}
}
/////////////////////////////////////////////////////////////// Functions //////////////////////////////////////////////////////////////////
def buildCron() {
  state.DeVices.each {k, v ->
     def dev = DeVices.find{"$it.id" == k}
        if(state.DeVices[k].startTime) {
            if (runTwiceOffset == null) {runTwiceOffset = 12}
            String formattedTime = state.DeVices[k].startTime.substring(11, state.DeVices[k].startTime.length() - 12)
            String hours = formattedTime.substring(0, formattedTime.length() - 3) // Chop off the last 3 in string
            String minutes = formattedTime.substring(3) // Chop off the first 3 in string
                int runTwoHour = Integer.valueOf(hours) + Integer.valueOf(runTwiceOffset)  // Add the 2nd run offset to the first run to get next run time
                if  (runTwoHour >= 24) {runTwoHour = 23} // force 2nd run to be in same day, 23:00 max
            if (state.DeVices[k].odd && state.DeVices[k].runsDay == 1) { state.DeVices[k].cron = "0 ${minutes} ${hours} 1/2 * ? * "  }   //// ver1.2.1
            else if (state.DeVices[k].odd && state.DeVices[k].runsDay == 2) {state.DeVices[k].cron = "0 ${minutes} ${hours},${runTwoHour} 1/2 * ? * "}
            else { String days = ""
                if (state.DeVices[k].sun) {days = "SUN,"}
                if (state.DeVices[k].mon) {days += "MON,"}
                if (state.DeVices[k].tue) {days += "TUE,"}
                if (state.DeVices[k].wed) {days += "WED,"}
                if (state.DeVices[k].thu) {days += "THU,"}
                if (state.DeVices[k].fri) {days += "FRI,"}
                if (state.DeVices[k].sat) {days += "SAT,"}
                    if (days != "") {
                    days = days.substring(0, days.length() - 1) // Chop off last ","
                    state.DeVices[k].days = days
                        if (state.DeVices[k].runsDay == 1) {state.DeVices[k].cron = "0 ${minutes} ${hours} ? * ${days} *"}   //// ver1.2.1
                        else if (state.DeVices[k].runsDay == 2) {state.DeVices[k].cron = "0 ${minutes} ${hours},${runTwoHour} ? * ${days} *"}
                        endif
                    }   
            }
            endif
           }
   }
  //// Build All Off time  ////ver1.4.0
    if (allOffBool) {
        String formattedTimeOff = allOffTime.substring(11, allOffTime.length() - 12)
        String hoursOff = formattedTimeOff.substring(0, formattedTimeOff.length() - 3) // Chop off the last 3 in string
        String minutesOff = formattedTimeOff.substring(3) // Chop off the first 3 in string
        state.allOffCron = "0 ${minutesOff} ${hoursOff} * * ? * "  
    }   
}
//////////////////////////////////////////////////////////////  Status Bar  ////////////////////////////////////////////////////////////////////
String statusBar() {
   	paragraph getFormat("smallLineSpace","<b>Current Hub Mode:</b> &nbsp ${location.mode}")
    if (humidSensor) {paragraph getFormat("smallLineSpace","<b>Sprinkler Moisture/Humidity Sensors:</b> &nbsp ${humidSensor} = ${state.humidSensorValue}%, &nbsp Pause schedules if >= ${pauseHumidValue}%")} 
    if (wetSensor) {paragraph getFormat("smallLineSpace","<b>Sprinkler Wet/Dry Sensors:</b> &nbsp ${wetSensor} = ${state.wetSensorValue}, &nbsp Pause schedules if 'wet'" )}
    if (leakBool) {paragraph getFormat("smallLineSpace","<b>Leak Wet/Dry Sensors:</b> &nbsp ${wetLeakSensor} = ${state.wetLeakSensorValue}, &nbsp Shutdown All if 'wet'" )}
    if (motionSensor) {paragraph getFormat("smallLineSpace","<b>Motions Sensors:</b> &nbsp ${motionSensor} = ${state.motionSensorValue}")} 
}
//////////////////////////////////////////////////////////////  Other Stuff //////////////////////////////////////////////////////////////////
def updated() {  // runs every 'Done' on already installed app 
    unsubscribe()  ////   
    unschedule(switchOnHandler)  // cancels all(or one) scheduled jobs including runIn
    buildCron()  // build schedules
    initialize()  // set schedules and subscribes
    if(logEnableBool) runIn(3600, logsOff)  // Disable all debug Logging after time elapsed
}
def installed() { updated() }  // only runs once for new app 'Done' or first time open 
def logsOff() {log.info "${app.label} - All App debug logging auto disabled"; app?.updateSetting("logEnableBool",[value:"false",type:"bool"]) }
def getFormat(type, myText="") {		
    if(type == "title") return "<h3 style='color:SteelBlue; font-weight: bold'>${myText}</h3>"  // Steel-Blue
    if(type == "blueRegular") return "<div style='color:SteelBlue; font-weight: bold; line-height: 97%'>${myText}</div>"  // Steel-Blue
    if(type == "noticable") return "<div style='color:#CC5500'>${myText}</div>"  // Burnt-Orange
    if(type == "lessImportant") return "<div style='color:green'>${myText}</div>" // Green
    if(type == "smallLineSpace") return "<div style='line-height: 50%'>${myText}</div>" // smallLineSpace
    
    if (formatBool) {if(type == "header") {return "<div style='color:#660000;font-weight: bold'>${myText}</div>"}  // Burgandy-Red //// ver1.2.0
                    if(type == "important") return "<div style='color:#5a8200; line-height: 97%'>${myText}</div>"  // Lime-Green
    }
    else {if(type == "header") return "<div style='color:#000000;font-weight: bold'>${myText}</div>"  // Black
          if(type == "important") return "<div style='color:#000000; line-height: 97%'>${myText}</div>"   // Black
    }
}
def displayTitle() {titleVersion(); 
    section (getFormat("title",  "App: ${state.name} - ${"ver " + state.version}")) {}
}
