/* Locks and Contacts Manager
*	2023 T. K. (kampto)
*	NOTES: Control/Automate Locks and Monitor Contacts. 
*   
*    Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at
*    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS,
*    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
*
*	Change Revision History:  
*   Ver		Date:		Who:		What:
*   1.1.0	2025-08-21	kampto		Add section for managing Lock Codes. This section is BETA, may not work for everyones Locks.    	
*   1.0.5	2025-08-14	kampto    	Add Notifications enable per device. Other clean up. Lock All Locks logic.
*   1.0.1	2025-06-09	kampto    	First Build from scratch.
*/
import groovy.time.TimeCategory
import java.text.SimpleDateFormat
import groovy.json.JsonSlurper  // Retriving Lock JSON
import groovy.json.JsonOutput

def titleVersion() {state.name = "Locks and Contacts Manager...(Control/Automate Locks and Monitor Contacts)"; state.version = "1.1.0" }
definition (
	name: "Locks and Contacts Manager", namespace: "kampto", author: "T. K.",
	description: "Control/Automate Locks, Use contacts if applicable",
	category: "Control",
   	iconUrl: "",
	iconX2Url: "",
    importUrl: "https://raw.githubusercontent.com/kampto/Hubitat/refs/heads/main/Apps/Locks%20and%20Contacts%20Manager",
    documentationLink: "https://community.hubitat.com/t/beta-app-locks-and-contacts-manager/155560",
	singleThreaded: true	
)
preferences { page(name: "mainPage") }
////////////////////////////////////////////////////////////  Main Page Inputs/Set-Up /////////////////////////////////////////////////////////////
def mainPage() {
    if (app.getInstallationState() != "COMPLETE") {hide=false} else {hide=true}  
    if (state.DeVices == null) state.DeVices = [:]
    if (state.DeVicesList == null) state.DeVicesList = []
    if (allLockTime == null) {allLockTime = "000000000000000000000000000000"}
    if (state.lastPush == null) {state.lastPush = "Waiting"}
    if (state.lockSetMSG == null) {state.lockSetMSG = "Not Yet"}
    
  dynamicPage(name: "mainPage", title: "", install: true, uninstall: true) {
  displayTitle()
  section (getFormat("header","Initial Set-Up:"),hideable: true, hidden: hide){  
       label title: "<b>1. Name this App</b>", required: true, submitOnChange: true, width: 3
       input "DeVices", "capability.lock, capability.contactSensor", title: "<b>2. Select Locks and Contacts(Optional) to Control/Monitor</b>", required: true, multiple: true, submitOnChange: true, width: 6
       paragraph "Available capabilities include Locks and Contacts. Combine multiple devices in single App table or create multiple instances of this App with differnt names. You must include contact sensor(s) used in the Lock Action cases to get notifications from them. Hit Update/Store button to load the Icons if you see 'null'"
       
       DeVices.each {dev ->
	   if(!state.DeVices["$dev.id"]) {    
            state.DeVices["$dev.id"] = [start: dev.currentLock == "unlocked" || dev.currentContact == "open" ? now() : 0, onTime: "NotYet",
            	total: 0,  modes: "Any",  lockActions: 0, unLockActions: 0, zone: 0, counts: 0, pause: false, notify: false]  
            state.DeVicesList += dev.id 
           }
       }
  }
  section {                         
    if(DeVices) {
       if(DeVices.id.sort() != state.DeVicesList.sort()) { 
	    state.DeVicesList = DeVices.id
		Map newState = [:]
		DeVices.each{dev ->  newState["$dev.id"] = state.DeVices["$dev.id"]} 
        state.DeVices = newState
        }
    refreshHandler()  // get latest times at app open
    paragraph displayTable()
       input "refresh", "button", title: "<b>REFRESH</b> Table Times, Counts, & States", width: 4
       input "allLock", "button", title: "<b>Lock All Locks</b>", width: 2 
       input name: "inDaysCBool", type: "bool", title:getFormat("important","Display Total Time in Days?"), defaultValue:false, submitOnChange:true, width: 3   //// ver1.1.6  
    statusBar()  
      }
  }
//////////////////////////////////////////////////////////////  Advanced Inputs /////////////////////////////////////////////////////////////      
   section(getFormat("header","Advanced Options:"),hideable: true, hidden: false) {
        input "updateButton", "button", title: "<b>Update/Store Schedules</b> without hitting Done exiting App" 
        input name: "pauseAllBool", type: "bool", title: getFormat("important","<b>Pause All App Lock Actions? &nbsp No Locks will change state from App</b>"), defaultValue:false, submitOnChange:true, style: 'margin-left:10px' 
   		input name: "allLockBool", type: "bool", title: getFormat("important","<b>Lock All Locks at a Specific daily time?</b> &nbsp <small>This must remain checked ON to enable. <br>Ignores Modes and Device specific Pause. Will not run if 'Pause All' enabled</small>"), defaultValue:false, submitOnChange:true, style: 'margin-left:10px' 
            if (allLockBool) {
            input name: "allLockTime", type: "time", title:getFormat("blueRegular","<b>Enter All Locks locked time, Applies to all.</b> &nbsp <small>Uses 24hr time, &nbsp Hit Update</small>"), defaultValue: "", required: false,  submitOnChange:true, width: 5, newLineAfter: true, style: 'margin-left:70px'
           	}
   ///// Push Options    
        input "pushDevice", "capability.notification", title: "<b>Select Device(s) to send Notification to (Optional)</b> &nbsp <small>Applies to Selected Devices in table.</small>", multiple: true, required: false, submitOnChange: true, width: 7, newLineAfter: true, style: 'margin-left:10px'       
        if (pushDevice) {
            input name: "pushOpen", type: "bool", title: getFormat("blueRegular","<b>Get Notified of Contacts Opening?</b>"), defaultValue:true, submitOnChange:true, newLineAfter: true, style: 'margin-left:60px'    
            	if (pushOpen) {input name: "openDelay", type: "number", title:getFormat("blueRegular","<b>Wait this many Seconds before sending Notification if still Open<b>&nbsp <small>Default = 1sec</small>"), defaultValue: "1", submitOnChange:true, width: 6, newLineAfter: true, style: 'margin-left:80px'}
            input name: "pushClosed", type: "bool", title: getFormat("blueRegular","<b>Get Notified of Contacts Closing?</b>"), defaultValue:false, submitOnChange:true, newLineAfter: true, style: 'margin-left:60px'    
            input name: "pushUnlocked", type: "bool", title: getFormat("blueRegular","<b>Get Notified of Locks Unlocking?</b>"), defaultValue:true, submitOnChange:true, newLineAfter: true, style: 'margin-left:60px'    
            	if (pushUnlocked) {input name: "unlockedDelay", type: "number", title:getFormat("blueRegular","<b>Wait this many Seconds before sending Notification if still Unlocked<b>&nbsp <small>Default = 1sec</small>"), defaultValue: "1", submitOnChange:true, newLineAfter: true, style: 'margin-left:80px'}
            input name: "pushLocked", type: "bool", title: getFormat("blueRegular","<b>Get Notified of Locks Locking?</b>"), defaultValue:false, submitOnChange:true, newLineAfter: true, style: 'margin-left:60px'    
            input name: "pushLockFailed", type: "bool", title: getFormat("blueRegular","<b>Get Notified about any Lock possibly Jamming?</b>&nbsp <small>If using Retry</small>"), defaultValue:true, submitOnChange:true, newLineAfter: true, style: 'margin-left:60px'
            input name: "pushBattery", type: "bool", title: getFormat("blueRegular","<b>Get Notified about Battery Levels below selected level?</b>"), defaultValue:true, submitOnChange:true,  newLineAfter: true, style: 'margin-left:60px'
               	if (pushBattery) {input name: "batPercent", type: "number", title:getFormat("blueRegular","<b>Enter % low level to get Notified<b>"), defaultValue: "40", submitOnChange:true, newLineAfter: true, style: 'margin-left:80px'}
            }
        input name: "formatBool", type: "bool", title: getFormat("important","<b>Enable Alternative UI formatting, dark screen mode?</b>"), defaultValue:false, submitOnChange:true, style: 'margin-left:10px'
        input name: "logInfoEnableBool", type: "bool", title: getFormat("important","<b>Enable Info Logging?</b> &nbsp <small>Stays active</small>"), defaultValue:true, submitOnChange:true, style: 'margin-left:10px'
        input name: "logDebugEnableBool", type: "bool", title: getFormat("important","<b>Enable Debug Logging?</b> &nbsp <small>Shuts off in 1hr</small>"), defaultValue:false, submitOnChange:true
}
///////////// Actions           
    section(getFormat("header","<b>LOCK ACTION Case Options</b>"),hideable: true, hidden: false) { 
        input name: "autoLockBool", type: "bool", title: getFormat("important","<b>Auto Lock if unlocked after a delay?</b>&nbsp &nbsp <small>Applies to all Locks. Ignores Contact Switches, could lock while door is open! Use case is if door unlocked but never opened. Will not run if Paused or Incorrect mode.</small>"), defaultValue:false, newLineAfter: true, width: 8, submitOnChange:true, style: 'margin-left:10px' 
        	if (autoLockBool) {input name: "lockDelaySec", type: "number", title: getFormat("blueRegular","<b>AutoLock Delay</b>&nbsp &nbsp <small>After unlocked will wait this time till Auto lockiing. Default = 30, &nbsp Enter 0 to 600 seconds</small>"), defaultValue: "30", accepts:"0 to 600", range:"0..600", width: 4, newLineAfter: true, submitOnChange:true, style: 'margin-left:60px'} 
      	input name: "lockRetryBool", type: "bool", title: getFormat("important","<b>If Auto Lock fails to Lock in 5sec, Retry one more time?</b>&nbsp &nbsp <small>Applies to all Locks.</small>"), defaultValue:false, newLineAfter: true, width: 7, submitOnChange:true, style: 'margin-left:10px' 
        input name: "contactLock1", type: "capability.contactSensor", title: getFormat("important","<b>Lock Actions $state.lockActionsIcon1: Select a Contact sensor to Auto Lock. &nbsp </b><small>Will use Actions 1 Delay time after Contact Closed. Applies to devices with 'Actions' case #1 in table. Will not run if Paused or Incorrect mode. Lock will not lock if Conatct is Open. Only Use Action #1 for one Lock.</small>"), multiple: false, width: 9, submitOnChange:true, style: 'margin-left:10px'   //// ver2.1.0
    		if (contactLock1) {input name: "contactLock1DelaySec", type: "number", title: getFormat("blueRegular","<b>Actions 1: AutoLock Delay</b>&nbsp &nbsp <small>After selected contact is closed then Lock. Default = 5sec, &nbsp Enter 0 to 600 seconds</small>"), defaultValue: "5", accepts:"0 to 600", range:"0..600", newLineAfter: true, submitOnChange:true, style: 'margin-left:60px'} 
        input name: "contactLock2", type: "capability.contactSensor", title: getFormat("important","<b>Lock Actions $state.lockActionsIcon2: Select a Contact sensor to Auto Lock. &nbsp </b><small>Will use Actions 2 Delay time after Contact Closed. Applies to devices with 'Actions' case #2 in table. Will not run if Paused or Incorrect mode. Lock will not lock if Conatct is Open. Only Use Action #2 for one Lock.</small>"), multiple: false, width: 9, submitOnChange:true, style: 'margin-left:10px'   //// ver2.1.0
    		if (contactLock2) {input name: "contactLock2DelaySec", type: "number", title: getFormat("blueRegular","<b>Actions 2: AutoLock Delay</b>&nbsp &nbsp <small>After selected contact is closed then Lock. Default = 5sec, &nbsp Enter 0 to 600 seconds</small>"), defaultValue: "5", accepts:"0 to 600", range:"0..600", newLineAfter: true, submitOnChange:true, style: 'margin-left:60px'} 
    }
    section(getFormat("header","<b>UNLOCK ACTION Case Options</b>"),hideable: true, hidden: false) { 
        input name: "neverUnlockBool", type: "bool", title: getFormat("important","<b>Never UnLock in any circumstance?</b> &nbsp <small>Applies to all Locks.</small>"), defaultValue:true, width: 6, newLineAfter: true, submitOnChange:true, style: 'margin-left:10px' 
    	input name: "remoteSwitch", type: "capability.switch", title: getFormat("important","<b>Unlock Actions $state.unLockActionsIcon1: Select Switch(s) to control lock state.</b><br><small>On = Unlock, Off = Lock. Will not run if Paused or Incorrect mode. Use dashboard, virtual switch, or linked physical switch.</small>"), defaultValue:false, multiple: true, submitOnChange:true, width: 9, style: 'margin-left:10px' 
   }	
    section(getFormat("header","<b>BETA: Lock Code Admin.</b> &nbsp <small>BETA, Testing phase... Results may vary!!</small>"),hideable: true, hidden: false) { 
        input "lockCodeDev", "capability.lockCodes", title: "<b>Select Lock to Modify</b>&nbsp <small>For locks with Codes only.</small>", required: false, multiple: false, submitOnChange: true, newLineAfter: true, width: 7
        paragraph getFormat("important","<small>To Set Lock code enter: Slot#, Pin Code, code Name, then push Lock Code Button. Some locks will not support the following; overwrite an existing slot <br>unless deleted first, Test Unlock Feature. Alternatively you can open the Lock Device in Hub Device menu to verify</small>")
        input name: "slotNumber", type: "enum", title: getFormat("blueRegular","<b>Select Slot Number</b>"), defaultValue:0, width: 3, options: ["1","2","3","4","5","6","7","8","9","10"], submitOnChange:true
        input name: "pinCode", type: "text", title: getFormat("blueRegular","<b>Enter Digit Pin code</b>"), submitOnChange:true, width: 3 
    	input name: "codeName", type: "text", title: getFormat("blueRegular","<b>Enter Code Name (Text)</b>"), defaultValue:"Guest", submitOnChange:true, width: 3
        input "lockCodeButton", "button", title: "<b>Set Lock Code</b>", newLineAfter: true, width: 3 
        input name: "deleteSlotNumber", type: "enum", title: getFormat("blueRegular","<b>Select Slot Number to Delete</b>"), defaultValue:0, width: 3, options: ["0","1","2","3","4","5","6","7","8","9","10"], submitOnChange:true
        input "deleteSlotButton", "button", title: "<b>Delete Slot Number</b>", width: 3
        input name: "testCode", type: "text", title: getFormat("blueRegular","<b>Test Code Pin#</b>"), submitOnChange:true, width: 3
        input "testCodeButton", "button", title: "<b>Test Unlock Code</b>", width: 3
        input "retrieveCodeButton", "button", title: "<b>Retrieve Codes(s) and Code constraints</b>", width: 4
        paragraph getFormat("important","Button Confrimation Messege:&nbsp <small>${state.lockSetMSG}</small>")
}	  
///////////////////////////////////////////////////////////////  Usage Notes Section  //////////////////////////////////////////////////////////////
   section(getFormat("header","Usage Notes / Instructions:"), hideable: true, hidden: hide) {  
      paragraph getFormat("lessImportant","<ul>"+    
      "<li>Use for any Lock or Contact capability. Add as many as you want on table.</li>"+
      "<li>Table will not auto refresh values or states, you must hit in App Refresh button.</li>"+
      "<li>If you make/change a schedule change it wont take unless you hit 'Done' exiting the App or hitting the 'Update/Store' button.</li>"+   
      "<li><b>Active On Time and Counts</b> track Locks Open(red) and Contacts Open(red) Times.</li>"+                      
      "<li><b>State:</b> Shows current device state after hitting in app Refresh. Clicking will toggle a Lock unless 'Pause All' enabled.</li>"+
      "<li><b>Reset:</b> From table per row will reset the total On Time and Counts. Configureation will remain.</li>"+	
      "<li><b>Modes:</b> If your not using modes keep at 'Any'. If you want Lock to only run during a specific Mode click and select that mode <br> If changed and need to get back to 'Any', go to Hub settings / Modes, and add new mode 'Any'"+	                     
      "<li><b>Notify:</b> Click Play to recieve push notifications of open/closed, locked/unlocks or special cases in advanced options. Must select a device to send notification to.</li>"+  
      "<li><b>Lock Pause:</b> Clicking Pause Will stop any App actions from operation that Lock.</li>"+  
      "<li><b>Lock All Locks Button:</b> Clicking 'Lock all Locks' will lock regardless of Mode or individually Paused. Will not Lock if 'Pause All' enabled.</li>"+                      
      "<li><b>Actions Case:</b> Select 'None' or case # in table, set up in Option below table. Only Locks can use Action Cases.</li>"+    	                     
      "<li><b>You must hit DONE at page bottom to save App after first making.</b></li>"+                    
      "</ul>")
      }
  }
}
//////////////////////////////////////////////////////////////////  Main Table Build ///////////////////////////////////////////////////////////////
String displayTable() {
    //////////////////////////// Table Input Fields /////////////////////////////
    if(state.newMode) { //////// Input Modes  
      input name: "newMode", type: "mode", title: getFormat("noticable","<b>Select during which mode this device will only run.</b><br> <small> Home, Away, etc.. &nbsp Or Any if No Selection</small>"), defaultValue: "", submitOnChange:true, width: 7, required: false, newLineAfter: true, style: 'margin-left:10px'
          if(newMode) {
          state.DeVices[state.newMode].modes = newMode
          state.remove("newMode")
	      app.removeSetting("newMode")
          paragraph "<script>{changeSubmit(this)}</script>"
	     }
	}   
    ////////////////////////////// Table Buttons / Entries /////////////////////////////
    if (state.resetTotal) { def dev = DeVices.find{"$it.id" == state.resetTotal}  //// Reset Cumulative time and counts per device Button       
		state.DeVices[state.resetTotal].start = now()
        state.DeVices[state.resetTotal].total = 0
        state.DeVices[state.resetTotal].counts = 0
        state.remove("resetTotal")
	    }
    if (state.deviceState) { def dev = DeVices.find{"$it.id" == state.deviceState}   
		if (!pauseAllBool && dev.currentLock == "unlocked") {dev.lock()}
        else if (!pauseAllBool && dev.currentLock == "locked") {dev.unlock()}  //&& !neverUnlockBool 
          endif
        state.remove("deviceState")                          
        app.removeSetting("deviceState")
        paragraph "<script>{changeSubmit(this)}</script>"                   
        }
    if (state.lockActions0) {def dev = DeVices.find{"$it.id" == state.lockActions0}  
	    state.DeVices[state.lockActions0].lockActions = 0; state.remove("lockActions0") }
    else if (state.lockActions1) {def dev = DeVices.find{"$it.id" == state.lockActions1}  
	    state.DeVices[state.lockActions1].lockActions = 1; state.remove("lockActions1") }
    else if (state.lockActions2) {def dev = DeVices.find{"$it.id" == state.lockActions2}  
	    state.DeVices[state.lockActions2].lockActions = 2; state.remove("lockActions2") }
    else if (state.lockActions3) {def dev = DeVices.find{"$it.id" == state.lockActions3}  
	    state.DeVices[state.lockActions3].lockActions = 3; state.remove("lockActions3") }
    else if (state.lockActions4) {def dev = DeVices.find{"$it.id" == state.lockActions4}  
	    state.DeVices[state.lockActions4].lockActions = 4; state.remove("lockActions4") }
     endif
    if (state.unLockActions0) {def dev = DeVices.find{"$it.id" == state.lockActions0}  
	    state.DeVices[state.unLockActions0].unLockActions = 0; state.remove("unLockActions0") }
    else if (state.unLockActions1) {def dev = DeVices.find{"$it.id" == state.unLockActions1}  
	    state.DeVices[state.unLockActions1].unLockActions = 1; state.remove("unLockActions1") }
    else if (state.unLockActions2) {def dev = DeVices.find{"$it.id" == state.unLockActions2}  
	    state.DeVices[state.unLockActions2].unLockActions = 2; state.remove("unLockActions2") }
    else if (state.unLockActions3) {def dev = DeVices.find{"$it.id" == state.unLockActions3}  
	    state.DeVices[state.unLockActions3].unLockActions = 3; state.remove("unLockActions3") }
    else if (state.unLockActions4) {def dev = DeVices.find{"$it.id" == state.unLockActions4}  
	    state.DeVices[state.unLockActions4].unLockActions = 4; state.remove("unLockActions4") }
     endif
    if (state.pauseCheckedBox) {def dev = DeVices.find{"$it.id" == state.pauseCheckedBox}  //// ver1.0.2
	    state.DeVices[state.pauseCheckedBox].pause = true; state.remove("pauseCheckedBox") }
	else if (state.pauseUnCheckedBox) {def dev = DeVices.find{"$it.id" == state.pauseUnCheckedBox}  
	    state.DeVices[state.pauseUnCheckedBox].pause = false; state.remove("pauseUnCheckedBox") }
      endif
    if (state.notifyNo) {def dev = DeVices.find{"$it.id" == state.notifyNo}                                
	    state.DeVices[state.notifyNo].notify = false; state.remove("notifyNo") }
	else if (state.notifyYes) {def dev = DeVices.find{"$it.id" == state.notifyYes}  
	    state.DeVices[state.notifyYes].notify = true; state.remove("notifyYes") }
     endif 
///////////////////////////////////////// Table Header Build /////////////////////////////////////
	String str = "<script src='https://code.iconify.design/iconify-icon/1.0.0/iconify-icon.min.js'></script>"   
        str += "<style>.mdl-data-table tbody tr:hover{background-color:inherit} .tstat-col td, .tstat-col th {font-size:16px !important; padding:2px 6px;text-align:center} + .tstat-col td {font-size:16px  }" +
        "</style><div style='overflow-x:auto'><table class='mdl-data-table tstat-col' style='border:3px solid black'>" +
        "<thead><tr style='border-bottom:2px solid black'><th>#</th>" +	
        "<th style='border-right:2px solid black'><small><small>App ver${state.version}</small></small><br>Device</th>" +
        "<th style='border-right:2px solid black'>State</th>" +     
		"<th style='border-right:2px solid black'>Run<br>Mode</th>"+    
        "<th style='border-right:2px solid black'>Lock<br>Actions</th>"+    
        "<th style='border-right:2px solid black'>Unlock<br>Actions</th>"+  
        "<th style='border-right:2px solid black'>Lock<br>Pause?</th>"+
        "<th style='border-right:2px solid black'>Notifi-<br>cations?</th>"+    
        "<th style='border-right:2px solid black'>Battery<br>Level%</th>"+    
        "<th>Last State<br>Change Time" + 
        "<th>Active<br>Counts" +    
        "<th>Active<br>OnTime</th>"+
        "<th>Reset<br>OnTime</th></tr></thead>"
    int zone = 0
    DeVices.sort{it.displayName.toLowerCase()}.each {dev ->
        zone += 1
        state.DeVices["$dev.id"].zone = zone
        ////////////////////////// Active/On Time Calc
        int counts = state.DeVices["$dev.id"].counts   
        int total = state.DeVices["$dev.id"].total / 1000
        float totalDays = (total / 86400) as float //// ver1.1.1
        int hours = total / 3600
        total = total % 3600
	    int mins = total / 60
	    int secs = total % 60
        String time = "$hours:${mins < 10 ? "0" : ""}$mins:${secs < 10 ? "0" : ""}$secs"
         if (inDaysCBool) {time = String.format("%.3f", totalDays)} // For table Only  //// ver1.1.1
        
        String devLink = "<a href='/device/edit/$dev.id' target='_blank' title='Open Device Page for $dev'>$dev"
        String deviceStateT = buttonLink("E$dev.id", dev.currentLock, "16px")
        String resetTotal = buttonLink("C$dev.id", state.resetIcon, "16px") 
        String mode = buttonLink("D$dev.id", state.DeVices["$dev.id"].modes, "MediumBlue", "16px") 
        String lockActionsT 
        	if (state.DeVices["$dev.id"].lockActions == 0) {lockActionsT = buttonLink("G$dev.id", "None", "blue", "16px")}
        	else if (state.DeVices["$dev.id"].lockActions == 1) {lockActionsT = buttonLink("H$dev.id", state.lockActionsIcon1)}  
        	else if (state.DeVices["$dev.id"].lockActions == 2) {lockActionsT = buttonLink("I$dev.id", state.lockActionsIcon2)}
        	else if (state.DeVices["$dev.id"].lockActions == 3) {lockActionsT = buttonLink("J$dev.id", state.lockActionsIcon3)}
        	else if (state.DeVices["$dev.id"].lockActions == 4) {lockActionsT = buttonLink("K$dev.id", state.lockActionsIcon4)}
        		endif
        String unLockActionsT 
        	if (state.DeVices["$dev.id"].unLockActions == 0) {unLockActionsT = buttonLink("L$dev.id", "None", "blue", "16px")}
        	else if (state.DeVices["$dev.id"].unLockActions == 1) {unLockActionsT = buttonLink("M$dev.id", state.unLockActionsIcon1)}  
        	else if (state.DeVices["$dev.id"].unLockActions == 2) {unLockActionsT = buttonLink("N$dev.id", state.unLockActionsIcon2)}
        	else if (state.DeVices["$dev.id"].unLockActions == 3) {unLockActionsT = buttonLink("O$dev.id", state.unLockActionsIcon3)}
        	else if (state.DeVices["$dev.id"].unLockActions == 4) {unLockActionsT = buttonLink("P$dev.id", state.unLockActionsIcon4)} 
        		endif
        String pauseCheckBoxT = (state.DeVices["$dev.id"].pause) ? buttonLink("A$dev.id", state.pauseIcon) : buttonLink("B$dev.id", state.playIcon) 
        String notifyCheckBoxT = (state.DeVices["$dev.id"].notify) ? buttonLink("Q$dev.id", state.playIcon) : buttonLink("R$dev.id", state.pauseIcon) 
             
///////////////////////////////////////////////// Table Rows Build /////////////////////////////////////////////
        str += "<tr style='color:black'><td>${state.DeVices["$dev.id"].zone}</td>" +     
        "<td style='border-right:2px solid black'>$devLink</td>" 
       	if (dev.currentLock) {str += "<td style='font-weight:bold; font-size:18px !important; border-right:2px solid black; color:${dev.currentLock == "locked" ? "green" : "red"}' title='Click to Change State'>$deviceStateT</td>"}  
        else if (dev.currentContact) {str += "<td style='font-weight:bold; font-size:16px; border-right:2px solid black; color:${dev.currentContact == "closed" ? "green" : "red"}' title='Contact State'>${dev.currentContact}</td>"}
        	endif    
       	if (dev.currentLock) {str += "<td style='border-right:2px solid black' title='Click to Change Mode'>$mode</td>"}
       		else {str += "<td style='border-right:2px solid black' title='Contacts Cant use Modes'>N/A</td>"} 
        if (dev.currentLock) {str += "<td style='border-right:2px solid black' title='Select Lock actions or none'>$lockActionsT</td>"} 
        	else  {str += "<td style='border-right:2px solid black' title='Contacts Cant use special Actions'>N/A</td>"} 
        if (dev.currentLock) {str += "<td style='border-right:2px solid black' title='Select Unlock actions or none'>$unLockActionsT</td>"} 
        	else  {str += "<td style='border-right:2px solid black' title='Contacts Cant use special Actions'>N/A</td>"} 
        if (dev.currentLock) {str += "<td style='border-right:2px solid black' title='Click to Pause all Lock App actions, Red is paused, Green is run'>$pauseCheckBoxT</td>"} 
        	else  {str += "<td style='border-right:2px solid black' title='Cant Pause a contact'>N/A</td>"} 
        str += "<td style='border-right:2px solid black' title='Get Notifications from this devices actions? Check selections in advanced options, Green is Yes'>$notifyCheckBoxT</td>" 
        str += "<td style='border-right:2px solid black' title='Battery Level' >${dev.currentBattery}</td>" +
        "<td style='font-size:14px !important' title='Last Time Lock or contact went Open' >${state.DeVices["$dev.id"].onTime}</td>"+
        "<td style='font-weight:bold' title='Total On Counts' >${state.DeVices["$dev.id"].counts}</td>" 
        if (dev.currentLock) {str += "<td style='font-weight:bold; color:${dev.currentLock == "locked" ? "green" : "red"}'>$time</td>" }  
        else if (dev.currentContact) {str += "<td style='font-weight:bold; color:${dev.currentContact == "closed" ? "green" : "red"}'>$time</td>" }   //// ver1.20 
        	endif 
        str += "<td style='border-right:3px solid black' title='Reset Total On Time & Counts for $dev' style='padding:0px 0px'>$resetTotal</td></tr>" 
        }
   	str += "</table></div>"
}
String buttonLink(String btnName, String linkText, color = SteelBlue, font = "13px") { //// Device Link Format
  	"<div class='form-group'><input type='hidden' name='${btnName}.type' value='button'></div><div><div class='submitOnChange' onclick='buttonClick(this)' style='color:$color;cursor:pointer;font-size:$font'>$linkText</div></div><input type='hidden' name='settings[$btnName]' value=''>"
	}
/////////////////////////////////////////////////////////// Schedules and Subscribes //////////////////////////////////////////////////////////
void initialize() {
     subscribe(DeVices, "lock.unlocked", onTimeHandler)
	 subscribe(DeVices, "lock.locked", offTimeHandler)
     subscribe(DeVices, "contact.open", onTimeHandler)  
     subscribe(DeVices, "contact.closed", offTimeHandler) 
     subscribe(DeVices, "battery", batHandler)  
     subscribe(contactLock1, "contact.closed", contactClosedHandler) 
     subscribe(contactLock1, "contact.open", contactOpenHandler) 
     subscribe(contactLock2, "contact.closed", contactClosedHandler) 
     subscribe(contactLock2, "contact.open", contactOpenHandler)  
     subscribe(remoteSwitch, "switch.on", remoteSwitchHandler)
     subscribe(remoteSwitch, "switch.off", remoteSwitchHandler)
         
     if (allLockBool) {schedule("${state.allLockCron}", allLockHandler)} // Set All Lock Time 
     else {unschedule (allLockHandler)}	 
}   
////////////////////////////////////////////////////////////////// Handlers //////////////////////////////////////////////////////////////////
def onTimeHandler(evt) { //// Called by; Subscribes only  OPEN
    state.DeVices[evt.device.id].start = now()
    state.DeVices[evt.device.id].counts += 1  
    state.DeVices[evt.device.id].onTime = new Date().format("MM-dd-yyyy ${location.timeFormat == "12" ? "h:mm:ss a" : "HH:mm:ss"}")  // Last Update
    if (logInfoEnableBool) {log.info "App: ${app.label} -- $evt.descriptionText"}
    if (pushDevice && state.DeVices[evt.device.id].notify) {
    	if (pushOpen && evt.device.currentContact == "open") {
    		if (openDelay > 1) {dataMap = [notifyCase:1, value:evt.value, displayName:evt.displayName, descriptionText:evt.descriptionText, zone:state.DeVices[evt.device.id].zone]
           		runIn(openDelay, notifyDataHandler, [data:dataMap, overwrite:false]) }
        	else {notifyEvtHandler(evt)}
    	}
    	if (pushUnlocked && evt.device.currentLock == "unlocked") {
    		if (unlockedDelay > 1) {dataMap = [notifyCase:2, value:evt.value, displayName:evt.displayName, descriptionText:evt.descriptionText, zone:state.DeVices[evt.device.id].zone]
           		runIn(unlockedDelay, notifyDataHandler, [data:dataMap, overwrite:false]) }
        	else {notifyEvtHandler(evt)}
    	}
    }
    if (autoLockBool && !pauseAllBool && evt.device.currentLock == "unlocked") {zone = state.DeVices[evt.device.id].zone; runIn(lockDelaySec, lockHandler, [data:zone, overwrite:false]) }
    if (logDebugEnableBool) {log.debug "TEST App: ${app.label} -- evt = $evt -------- dev = $device" }
}   
def offTimeHandler(evt) { //// Called by; Subscribes only  CLOSED
    state.DeVices[evt.device.id].total += now() - state.DeVices[evt.device.id].start
    state.DeVices[evt.device.id].onTime = new Date().format("MM-dd-yyyy ${location.timeFormat == "12" ? "h:mm:ss a" : "HH:mm:ss"}")  // Last Update
    if (logInfoEnableBool) {log.info "App: ${app.label} -- $evt.descriptionText"}
    if (pushDevice && state.DeVices[evt.device.id].notify) {
    	if (pushClosed && evt.device.currentContact == "closed") {notifyEvtHandler(evt) }
    	if (pushLocked && evt.device.currentLock == "locked") {notifyEvtHandler(evt) }
    }    
}       
void lockHandler(data) { 
    if (pauseAllBool) {return} // All paused, get out, dont run
    if (logDebugEnableBool) {log.debug "App: ${app.label} -- LockHandler.... data.value = ${data.value} .. "}
    DeVices.each { dev -> 
       if (dev.currentLock == "unlocked" && !state.DeVices["$dev.id"].pause && ((state.DeVices["$dev.id"].modes == location.mode) || state.DeVices["$dev.id"].modes == "Any") 
           && data.value == state.DeVices["$dev.id"].zone ) {  dev.lock() 
           if (lockRetryBool) {zone = state.DeVices["$dev.id"].zone; runIn(5, lockRetryHandler, [data:zone, overwrite:true])}
       }
}  }
void lockRetryHandler(data) { 
    DeVices.each { dev -> 
    if (dev.currentLock == "unlocked" && data.value == state.DeVices["$dev.id"].zone ) {
       	dev.lock()
        if (logInfoEnableBool) {log.info "App: ${app.label} -- Locking Retry, **${dev}** Possible Failure"}
        if (pushDevice && pushLockFailed && state.DeVices["$dev.id"].notify) {dataMap=[notifyCase:3, value:dev.currentLock, displayName:dev.displayName, zone:state.DeVices["$dev.id"].zone]; runIn(1, notifyDataHandler, [data:dataMap, overwrite:true])}
     } 
}  }
void unLockHandler(data) {   
    if (neverUnlockBool || pauseAllBool) {return}
    DeVices.each { dev -> 
       if (dev.currentLock == "locked" && !state.DeVices["$dev.id"].pause && ((state.DeVices["$dev.id"].modes == location.mode) || state.DeVices["$dev.id"].modes == "Any") && data.value == state.DeVices["$dev.id"].zone) {
          dev.unlock()
         }
}  }
void contactClosedHandler(evt) {
    if (pauseAllBool) {return} // All paused, get out, dont run
    if (logDebugEnableBool) {log.debug "App: ${app.label} -- evt.device.currentContact = ${evt.device.currentContact}.... evt.deviceId = ${evt.deviceId} ... evt.device = ${evt.device}...contactLock1 = ${contactLock1}"}
    DeVices.each { dev ->
        if (dev.currentLock && evt.device.currentContact == "closed") {
         	zone = state.DeVices["$dev.id"].zone 
            String x = evt.device
            if (state.DeVices["$dev.id"].lockActions == 1) { String y = contactLock1 
                 if (x == y) {runIn(contactLock1DelaySec, lockHandler, [data:zone, overwrite:true])} }
            else if (state.DeVices["$dev.id"].lockActions == 2) { String y = contactLock2 
                 if (x == y) {runIn(contactLock2DelaySec, lockHandler, [data:zone, overwrite:true])} }
            endif
         }                                                   
}  }
void contactOpendHandler(evt) {  
    DeVices.each { dev ->
        if (dev.currentLock) {        
			//////////////////  TBD  ////////////////////////
        }     
}  } 
void notifyEvtHandler(evt) { // evt Descritption
    if (logDebugEnableBool) {log.debug "evtHandler App: ${app.label} -- id = $evt.displayName -- evt.descriptionText = $evt.descriptionText"} 
   	state.lastPush = "App: ${app.label} -- $evt.descriptionText"
    pushDevice.deviceNotification(state.lastPush) 
}
void notifyDataHandler(data) { // special cases, Data
    if (logDebugEnableBool) {log.debug "dataHandler App: ${app.label} -- data.displayName = ${data.displayName}"}
    DeVices.each { dev ->
    	if (data.zone == state.DeVices["$dev.id"].zone) {  
    	switch (data.notifyCase) {
        	case 1: if (dev.currentContact == "open") {state.lastPush = "App: ${app.label} -- **$dev** has been Open for > $openDelay seconds"} ; break
       		case 2: if (dev.currentLock == "unlocked") {state.lastPush = "App: ${app.label} -- **$dev** has been Unlocked for > $unlockedDelay seconds"} ; break
       	    case 3: state.lastPush = "App: ${app.label} -- Locking Retry, **${dev}** Possible Failure"; break    
            }
        pushDevice.deviceNotification(state.lastPush) 
}  } }
def allLockHandler(evt) {//// Called by Sched All off time or App button
    if (pauseAllBool) {return} // All paused, get out, dont run
    DeVices.each { dev ->
    	if (dev.currentLock == "unlocked") { dev.lock() }  
    	}
    if (logInfoEnableBool) {log.info "App: ${app.label} -- All Locks Locking"} 
}
def batHandler(evt) {
    if (evt.device.currentBattery <= batPercent) {
    	if (pushDevice && pushBattery && state.DeVices[evt.device.id].notify) { pushDevice.deviceNotification("${app.label} -- Device **${evt.device}** Battery level ${evt.device.currentBattery}%, warning is ${batPercent}%") }
		if (logInfoEnableBool) {log.info "App: ${app.label} -- Device **${evt.device}** Battery level ${evt.device.currentBattery}%, warning is ${batPercent}%"}
}  }
def remoteSwitchHandler(evt) {//// Called by Subscribes only.
    if (pauseAllBool) {return} // All paused, get out, dont run
    DeVices.each { dev ->
    	if (dev.currentLock && state.DeVices["$dev.id"].unLockActions == 1 && !state.DeVices["$dev.id"].pause && (state.DeVices["$dev.id"].modes == location.mode || state.DeVices["$dev.id"].modes == "Any")) {
            if (evt.device.currentSwitch == "on") {runIn(1, unLockHandler, [data:state.DeVices["$dev.id"].zone, overwrite:true])}
            else if (evt.device.currentSwitch == "off") {runIn(1, lockHandler, [data:state.DeVices["$dev.id"].zone, overwrite:true])}  
        	if (logInfoEnableBool) {log.info "App: ${app.label} -- Remote Switch **${evt.device}** toggling Lock"}    
    	}
}  }
void appButtonHandler(btn) {//// Called by; In app Button pushes
    if (btn == "refresh") refreshHandler()   
    else if (btn == "allLock") allLockHandler()  
    else if (btn == "updateButton") updated()  
    	else if (btn == "lockCodeButton") setLockCode(btn)  
    	else if (btn == "deleteSlotButton") setLockCode(btn) 
        else if (btn == "testCodeButton") setLockCode(btn)
        else if (btn == "retrieveCodeButton") setLockCode(btn)    
    else if (btn.startsWith("A")) state.pauseUnCheckedBox = btn.minus("A") 
    else if (btn.startsWith("B")) state.pauseCheckedBox = btn.minus("B")
    else if (btn.startsWith("C")) state.resetTotal = btn.minus("C")  
    else if (btn.startsWith("D")) state.newMode = btn.minus("D")
    else if (btn.startsWith("E")) state.deviceState = btn.minus("E")
   		else if (btn.startsWith("K")) state.lockActions0 = btn.minus("K")    
    	else if (btn.startsWith("G")) state.lockActions1 = btn.minus("G")
   		else if (btn.startsWith("H")) state.lockActions2 = btn.minus("H")    
    	else if (btn.startsWith("I")) state.lockActions3 = btn.minus("I")
  		else if (btn.startsWith("J")) state.lockActions4 = btn.minus("J")
    else if (btn.startsWith("P")) state.unLockActions0 = btn.minus("P")    
    else if (btn.startsWith("L")) state.unLockActions1 = btn.minus("L")
   	else if (btn.startsWith("M")) state.unLockActions2 = btn.minus("M")    
    else if (btn.startsWith("N")) state.unLockActions3 = btn.minus("N")
  	else if (btn.startsWith("O")) state.unLockActions4 = btn.minus("O")
        else if (btn.startsWith("Q")) state.notifyNo = btn.minus("Q") 
    	else if (btn.startsWith("R")) state.notifyYes = btn.minus("R")
  	 endif    
}
def refreshHandler() {//// Called by; In App Button push and within functions  // Update Times if Active/On
    state.DeVices.each {k, v ->
        def dev = DeVices.find{"$it.id" == k}
        if (dev.currentLock == "unlocked" || dev.currentContact == "open") {  
          state.DeVices[k].total += now() - state.DeVices[k].start
		  state.DeVices[k].start = now()
          }
}  }
def buildCron() {//// Build Cron for All Locked Time if used
  if (allLockBool) {
        String formattedTimeOff = allOffTime.substring(11, allOffTime.length() - 12)
        String hoursOff = formattedTimeOff.substring(0, formattedTimeOff.length() - 3) // Chop off the last 3 in string
        String minutesOff = formattedTimeOff.substring(3) // Chop off the first 3 in string
        state.allLockCron = "0 ${minutesOff} ${hoursOff} * * ? * "  
    }
    if (logDebugEnableBool) {log.debug "App: ${app.label} -- Cron Schedule Successfully Built"} 
}
/////////// Lock Codes
def setLockCode(btn) {
   if (btn == "lockCodeButton") {
		int slotNumberInt = Integer.valueOf(slotNumber) 
  		lockCodeDev.setCode(slotNumberInt, pinCode, codeName)  // Call the setCode() command on the lock device
    	state.lockSetMSG = "**${lockCodeDev}**; Code Set: slot=${slotNumber}, code=${pinCode}, name=${codeName}. &nbsp Lock State = ${lockCodeDev.currentLock}"
    }
    else if (btn == "deleteSlotButton") {
		int deleteSlotNumberInt = Integer.valueOf(deleteSlotNumber) 
  		lockCodeDev.deleteCode(deleteSlotNumberInt)  
    	state.lockSetMSG = "**${lockCodeDev}**;  Code deleted: Slot number ${deleteSlotNumber} and associated code. &nbsp Lock State = ${lockCodeDev.currentLock}"
    }
    else if (btn == "testCodeButton") {
		lockCodeDev.testUnlockWithCode(testCode)  
        state.lockSetMSG = "**${lockCodeDev}**;  Code ${testCode} Tested. &nbsp Lock State = ${lockCodeDev.currentLock}"
    }
    else if (btn == "retrieveCodeButton") {
     	String lockCodes = lockCodeDev.currentValue("lockCodes")
        String codeLength = lockCodeDev.currentValue("codeLength")
        String maxCodes = lockCodeDev.currentValue("maxCodes")
        Map resultCode = [:]
    	if (lockCodes) {
        	if (lockCodes[0] == "{") resultCode = new JsonSlurper().parseText(lockCodes)
        	else resultCode = new JsonSlurper().parseText(decrypt(lockCodes)) //decrypt codes if they're encrypted
    	   	}
        state.lockSetMSG = "**${lockCodeDev}**;  Retrieved Code(s) = ${resultCode} <br>Code digit Length = ${codeLength}, Max # of Codes = ${maxCodes}. &nbsp Lock State = ${lockCodeDev.currentLock}"    
    }
   	log.info "App: ${app.label} -- Lock Code Button Confrimation: ${state.lockSetMSG}"
}
////////////////////////////////////////////////////////////  Status Bar  //////////////////////////////////////////////////////////////////// 
String statusBar() {
    if (pauseAllBool) {paragraph getFormat("noticable","<b>All Lock Actions Paused!!!</b>")}
   	paragraph getFormat("smallLineSpace","<b>Current Hub Mode:</b> &nbsp ${location.mode}")
    if (pushDevice) {paragraph getFormat("smallLineSpace","<b>Last Notification:</b> &nbsp ${state.lastPush}")}
}
///////////////////////////////////////////////////////////  Icon Graphics  ////////////////////////////////////////////////////////////////// 
def icons() { 
    state.playIcon = "<iconify-icon inline style='color:green; font-size:23px' icon=ic:baseline-play-circle></iconify-icon>"
    state.pauseIcon = "<iconify-icon inline style='color:red; font-size:23px' icon=ic:sharp-pause-circle-filled></iconify-icon>" 
    state.resetIcon = "<iconify-icon inline style='color:black; font-size:23px' icon='bx:reset'></iconify-icon>" 
 	state.lockActionsIcon1 = "<iconify-icon inline style='color:#241571; font-size:23px' icon='tabler:circle-1-filled'></iconify-icon>"
    state.lockActionsIcon2 = "<iconify-icon inline style='color:#0F52BA; font-size:23px' icon='tabler:circle-2-filled'></iconify-icon>"
    state.lockActionsIcon3 = "<iconify-icon inline style='color:#48AAAD; font-size:23px' icon='tabler:circle-3-filled'></iconify-icon>"
    state.lockActionsIcon4 = "<iconify-icon inline style='color:#0096FF; font-size:23px' icon='tabler:circle-4-filled'></iconify-icon>"
    state.unLockActionsIcon1 = "<iconify-icon inline style='color:#C0362C; font-size:23px' icon='tabler:circle-1-filled'></iconify-icon>"
    state.unLockActionsIcon2 = "<iconify-icon inline style='color:#FF3C00; font-size:23px' icon='tabler:circle-2-filled'></iconify-icon>"
    state.unLockActionsIcon3 = "<iconify-icon inline style='color:#E6812F; font-size:23px' icon='tabler:circle-3-filled'></iconify-icon>"
    state.unLockActionsIcon4 = "<iconify-icon inline style='color:#CD946A; font-size:23px' icon='tabler:circle-4-filled'></iconify-icon>"
    if (logDebugEnableBool) {log.debug "App: ${app.label} -- Get Icon Graphics"}
}    
////////////////////////////////////////////////////////////  Other Stuff //////////////////////////////////////////////////////////////////
def updated() {  // runs every 'Done' on already installed app 
    unsubscribe()  ////   
    unschedule()  // cancels all(or one) scheduled jobs including runIn
    icons()  // Load Icon graphic states
    buildCron()
    initialize()  // set schedules and subscribes
    if(logDebugEnableBool) runIn(3600, logsOff)  // Disable all debug Logging after time elapsed
}
def installed() { updated() }  // only runs once for new app 'Done' or first time open 
def logsOff() {log.info "${app.label} -- All App 'debug' logging auto disabling itself"; app?.updateSetting("logDebugEnableBool",[value:"false",type:"bool"]) }
def getFormat(type, myText="") {		
    if(type == "title") return "<h3 style='color:SteelBlue; line-height: 50%; font-weight: bold'>${myText}</h3>"  // Steel-Blue
    if(type == "blueRegular") return "<div style='color:SteelBlue; font-weight: bold; line-height: 97%'>${myText}</div>"  // Steel-Blue
    if(type == "noticable") return "<div style='color:#CC5500'>${myText}</div>"  // Burnt-Orange
    if(type == "lessImportant") return "<div style='color:green'>${myText}</div>" // Green
    if(type == "smallLineSpace") return "<div style='line-height: 50%; white-space:nowrap; '>${myText}</div>" // smallLineSpace
        
    if (formatBool) {if(type == "header") {return "<div style='color:#660000;font-weight: bold'>${myText}</div>"}  // Burgandy-Red //// ver1.2.0
                    if(type == "important") return "<div style='color:#5a8200; line-height: 97%'>${myText}</div>"  // Lime-Green
    	}
    else {if(type == "header") return "<div style='color:#000000;font-weight: bold'>${myText}</div>"  // Black
          if(type == "important") return "<div style='color:#000000; line-height: 97%'>${myText}</div>"   // Black
    	}
}
def displayTitle() {titleVersion();  section (getFormat("title",  "App: ${state.name} - ${"ver " + state.version}")) {} }
