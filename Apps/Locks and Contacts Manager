/* Locks and Contacts Manager
*  
*	2023 T. K. (kampto)
*	NOTES: Control/Automate Locks and Monitor Contacts. 
*   
*    Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at
*    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS,
*    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
*
*	Change Revision History:  
*   Ver		Date:		Who:		What:
*   1.0.0	2025-06-09	kampto    	First Build from scratch.
*/
import groovy.time.TimeCategory
import java.text.SimpleDateFormat

def titleVersion() {state.name = "Locks and Contacts Manager..."; state.version = "1.0.0" }
definition (
	name: "Locks and Contacts Manager", namespace: "kampto", author: "T. K.",
	description: "Control/Automate Locks, Use contacts if applicable",
	category: "Control",
   	iconUrl: "",
	iconX2Url: "",
    importUrl: "https://raw.githubusercontent.com/kampto/Hubitat/main/Apps/Switch%20Scheduler%20and%20More",
    documentationLink: "https://community.hubitat.com/t/app-switch-scheduler-and-more-schedule-lights-outlets-switches-relays-sprinklers-valves-and-more/118720",
	singleThreaded: true	
)
preferences { page(name: "mainPage") }

////////////////////////////////////////////////////////////  Main Page Inputs/Set-Up /////////////////////////////////////////////////////////////
def mainPage() {
    if (app.getInstallationState() != "COMPLETE") {hide=false} else {hide=true}  
    if (state.DeVices == null) state.DeVices = [:]
    if (state.DeVicesList == null) state.DeVicesList = []
    if (allLockTime == null) {allLockTime = "000000000000000000000000000000"}
            
  dynamicPage(name: "mainPage", title: "", install: true, uninstall: true) {
  displayTitle() 
  section (getFormat("header","Initial Set-Up:"),hideable: true, hidden: hide){  
       label title: "<b>1. Name this App</b>", required: true, submitOnChange: true, width: 3
       input "DeVices", "capability.lock, capability.contactSensor", title: "<b>2. Select Locks and Contacts(Optional) to Control/Monitor</b>", required: true, multiple: true, submitOnChange: true, width: 6
        paragraph "Available capabilities include Locks and Contacts. Combine multiple devices in single App table or create multiple instances of this App with differnt names."
                   
       DeVices.each {dev ->
	   if(!state.DeVices["$dev.id"]) {    
            state.DeVices["$dev.id"] = [start: dev.currentLock == "locked" || dev.currentContact == "open" ? now() : 0, 
            	total: 0,  modes: "Any",  lockActions: 0, unLockActions: 0, zone: 0, counts: 0, pause: false, pauseLock: false]  
            state.DeVicesList += dev.id 
           }
       }
  }
  section {                         
    if(DeVices) {
       if(DeVices.id.sort() != state.DeVicesList.sort()) { 
	    state.DeVicesList = DeVices.id
		Map newState = [:]
		DeVices.each{dev ->  newState["$dev.id"] = state.DeVices["$dev.id"]} 
        state.DeVices = newState
        }
    refreshHandler()  // get latest times at app open
    paragraph displayTable()
       input "refresh", "button", title: "<b>REFRESH</b> Table Times, Counts, & States", width: 3
       input "allLock", "button", title: "<b>Lock All Locks</b>", width: 2 
       input name: "inDaysCBool", type: "bool", title:getFormat("important","Display Total Time in Days?"), defaultValue:false, submitOnChange:true, width: 3   //// ver1.1.6  
    statusBar()  
      }
  }
//////////////////////////////////////////////////////////////  Advanced Inputs /////////////////////////////////////////////////////////////      
   section(getFormat("header","Advanced Options:"),hideable: true, hidden: false) {
        input "updateButton", "button", title: "<b>Update/Store Schedules</b> without hitting Done exiting App" 
        input name: "pauseAllBool", type: "bool", title: getFormat("important","<b>Pause All App Actions/Buttons? &nbsp No Locks will change state</b>"), defaultValue:false, submitOnChange:true, style: 'margin-left:10px' 
   		input name: "allLockBool", type: "bool", title: getFormat("important","<b>Lock All Locks at a Specific daily time?</b><br><small>This must remain checked ON to enable.</small>"), defaultValue:false, submitOnChange:true, style: 'margin-left:10px' 
            if (allLockBool) {
            input name: "allLockTime", type: "time", title:getFormat("blueRegular","<b>Enter All Locks locked time, Applies to all.</b> &nbsp <small>Uses 24hr time, &nbsp Hit Update</small>"), defaultValue: "", required: false,  submitOnChange:true, width: 5, newLineAfter: true, style: 'margin-left:70px'
           	}
        input name: "remoteSwitchBool", type: "bool", title: getFormat("important","<b>Remote Switch All Off and Pause/Resume Capability? &nbsp Overrides All Cases</b><br><small>Use dashboard or virtual switch. This must remain checked ON to enable</small>"), defaultValue:false, submitOnChange:true, style: 'margin-left:10px' 
            if (remoteSwitchBool) {
            input "remoteSwitch", "capability.switch", title: getFormat("important", "<b>Select a Switch to Remotely turn Off all switches and Pause/Resume all schedules (Optional)</b><br><small>Real or Virtual Switch, Switch On is Off/Pause</small>"), required: false, multiple: false, submitOnChange: true, width: 8, style: 'margin-left:160px'   
            }
   		input name: "pushBool", type: "bool", title: getFormat("important","<b>Get Push Notifications from selected actions? &nbsp </b><small>This must remain checked ON to recieve notifications, Off to stop all notifications</small>"), defaultValue:false, submitOnChange:true, style: 'margin-left:10px'   //// ver2.0.1
            if (pushBool) {input "pushDevice", "capability.notification", title: "<b>Select device(s) to send notification to</b>", multiple: true, required: false, submitOnChange: true, width: 5, newLineAfter: true, style: 'margin-left:160px'       
             	input name: "pushOnBool", type: "bool", title: getFormat("blueRegular","<b>Get Notificans about any Device Scheduled Turn On Event?</b>"), defaultValue:false, submitOnChange:true, style: 'margin-left:160px'             
             	input name: "pushMotionBool", type: "bool", title: getFormat("blueRegular","<b>Get Notificans about Motion Events (If Used)?</b>"), defaultValue:false, submitOnChange:true, style: 'margin-left:160px'
                input name: "pushLeakBool", type: "bool", title: getFormat("blueRegular","<b>Get Notificans about Leak Detection Events (If Used)?</b>"), defaultValue:false, submitOnChange:true, style: 'margin-left:160px'
                input name: "pushBattery", type: "bool", title: getFormat("blueRegular","<b>Get Notificans about Battery Levels below selected level?</b>"), defaultValue:false, submitOnChange:true, style: 'margin-left:160px'
                    if (pushBattery) {input name: "batPercent", type: "number", title:getFormat("blueRegular","<b>Enter % level to get Notified"), defaultValue: "40", submitOnChange:true, newLineAfter: true, width:3, style: 'margin-left:200px'}
             }
        input name: "formatBool", type: "bool", title: getFormat("important","<b>Enable Alternative UI formatting, dark screen mode?</b>"), defaultValue:false, submitOnChange:true, style: 'margin-left:10px'
        input name: "logEnableBool", type: "bool", title: getFormat("important","<b>Enable Debug Logging of App based device activity and refreshes?</b><br><small>Shuts off in 1hr</small>"), defaultValue:true, submitOnChange:true, style: 'margin-left:10px'
}
///////////// Actions           
    section(getFormat("header","<b>LOCK ACTIONS Options</b>"),hideable: true, hidden: false) { 
        input name: "autoLockBool", type: "bool", title: getFormat("important","<b>Auto Lock if unlocked after a delay?</b>&nbsp &nbsp <small>Ignores Contact Switches, could lock while door is open!</small>"), defaultValue:false, newLineAfter: true, width: 5, submitOnChange:true, style: 'margin-left:10px' 
        	if (autoLockBool) {input name: "lockDelaySec", type: "number", title: getFormat("blueRegular","<b>AutoLock Delay</b>&nbsp &nbsp <small>After unlocked will wait this time till Auto lockiing. Default = 20, Enter 0 to 360 seconds</small>"), defaultValue: "20", width: 4, newLineAfter: true, submitOnChange:true, style: 'margin-left:60px'} 
      	input name: "contactLock1", type: "capability.contactSensor", title: getFormat("important","<b>Actions 1: Select a Contact sensor to Auto Lock. &nbsp </b><small>Will use Actions 2 Delay time after Contact Closed. Applies to devices with 'Actions' case #1 in table. Will not run if Paused or Incorrect mode. Lock will not lock if Conatct is Open.</small>"), multiple: false, width: 8, submitOnChange:true, style: 'margin-left:10px'   //// ver2.1.0
    		if (contactLock1) {input name: "contactLock1DelaySec", type: "number", title: getFormat("blueRegular","<b>Actions 1: AutoLock Delay</b>&nbsp &nbsp <small>After selected contact is closed then Lock. Default = 5, Enter 0 to 360 seconds</small>"), defaultValue: "5", width: 4, newLineAfter: true, submitOnChange:true, style: 'margin-left:60px'} 
        input name: "contactLock2", type: "capability.contactSensor", title: getFormat("important","<b>Actions 2: Select a Contact sensor to Auto Lock. &nbsp </b><small>Will use Actions 3 Delay time after Contact Closed. Applies to devices with 'Actions' case #2 in table. Will not run if Paused or Incorrect mode. Lock will not lock if Conatct is Open.</small>"), multiple: false, width: 8, submitOnChange:true, style: 'margin-left:10px'   //// ver2.1.0
    		if (contactLock2) {input name: "contactLock2DelaySec", type: "number", title: getFormat("blueRegular","<b>Actions 2: AutoLock Delay</b>&nbsp &nbsp <small>After selected contact is closed then Lock. Default = 5, Enter 0 to 360 seconds</small>"), defaultValue: "5", width: 4, newLineAfter: true, submitOnChange:true, style: 'margin-left:60px'} 
    }
    section(getFormat("header","<b>UNLOCK ACTIONS Options</b>"),hideable: true, hidden: false) { 
               
        input name: "switchTrigger", type: "capability.switch", title: getFormat("important","<b>Actions 6: Select a Switch to turn On a seperate device. &nbsp </b><small>Device will stay On as long as selected Switch is 'on'. Applies to devices with 'Actions' case #6 in table. Will not run if Paused, Incorrect mode, or Special Pause case. Will work on devices with or without a start time/schedule defined in table.</small><br><large><b>Actions 7: Combine Actions 1 & 6</b></large><br><large><b>Actions 8: Combine Actions 2 & 6</b></large>"), multiple: true, width: 8, submitOnChange:true, style: 'margin-left:10px'   //// ver2.1.0
    	paragraph getFormat("important","<b>Actions 9: Select Mode to trigger Device On/Off. &nbsp </b><small>Applies to Devices with 'Actions' case #9 in table. &nbsp Switches/Valves will turn On/Off when mode changes to the Selected<br>unless paused. Will toggle back when mode changes back to not selected mode. Will work on devices with or without a start time/schedule defined in table.</small><br><large><b>Actions 10: Combine Actions 1 & 9</b></large>")
              input name: "modeTrigger", type: "mode", title: getFormat("blueRegular","<b>Select Mode</b>"), width: 2, submitOnChange:true, style: 'margin-left:60px'   
              input name: "modeOnTime", type: "number", title: getFormat("blueRegular","<b>Input Device Ontime after triggered by Mode in minutes &nbsp</b><small>Default = 0, 0 means no timer is applied. Enter 0 to 360 minutes</small>"), defaultValue: "0", required: false, submitOnChange: true, accepts: "0 to 360", range: "0..360", width: 3, style: 'margin-left:30px' 
        	  input name: "modeInvertBool", type: "bool", title: getFormat("blueRegular","<b>Turn Device Off if On with mode instaed?</b>"), defaultValue:false, width: 3, submitOnChange:true, style: 'margin-left:30px' 
    }	
///////////////////////////////////////////////////////////////  Usage Notes Section  //////////////////////////////////////////////////////////////
   section(getFormat("header","Usage Notes / Instructions:"), hideable: true, hidden: hide) {  
      paragraph getFormat("lessImportant","<ul>"+    
      "<li>Use for any Lock or Contact capability. Add as many as you want on table.</li>"+
      "<li>Table will not auto refresh values or states, you must hit in App Refresh button.</li>"+
      "<li>If you make/change a schedule change it wont take unless you hit 'Done' exiting the App or hitting the 'Update/Store' button.</li>"+   
      "<li><b>Active On Time and Counts</b> track Locks Open(red) and Contacts Open(red) Times.</li>"+                      
      "<li><b>State:</b> Shows current device state after hitting in app Refresh. Clicking will toggle a Lock unless all Paused.</li>"+
      "<li><b>Reset:</b> From table per row will reset the total On Time and Counts.</li>"+	
      "<li><b>Modes:</b> If your not using modes keep at 'Any'. If you want to only run during a specific Mode click and select that mode <br> If changed and need to get back to 'Any', go to Hub settings / Modes, and add new mode 'Any'"+	                     
      "<li><b>Motion:</b> Selecting a motion group # will toggle a device if Motion device is triggerd. Select Motion device in Options below table, Run or while active time in Advanced options. Will not change the scheduled on times if any.<br>If On to Off enabled the, the switch if On will turn Off for the time selected then back On. Makes it look like someone is Home!<br>For both Off-On-Off or On-Off-On cases the Motion Sensor needs to clear back to inactive to trigger again. Can use Motion triggers with or without a schedule start time entered."+	
      "<li><b>Pause Case:</b> Select 'None' or case # in table, set up in Options below table to pause upcoming schedule for that device only.</li>"+   
      "<li><b>Actions Case:</b> Select 'None' or case # in table, set up in Option below table. Cases 1 - 2 (blink) will work with startime defined schedules. Cases 3+ will not use start times, they will trigger on the selected action.</li>"+    	                     
      "<li><b>Remote Switch:</b> Optional, Select a virtual or real switch to remotely turn off all switches and pause/resume schedules (optional). Use case EX: Rain delay for spinklers, dashboard access.</li>"+
      "<li><b>Leak Detect:</b> This will shut off and stop every device schedule and actions permanently until a user unchecks 'Pause All Devices' in advanced options. <br> Use case: if you have a water leak in house, can shut off an installed water valve listed in table. Not recommended to use if using 'wet' (rain) sensor for sprinklers.<br> Only triggers if sensor goes from Dry to Wet. If still 'wet' this will not prevent the valve from being manually turned on outside of app.</li>"+
      "<li><b>You must hit DONE at page bottom to save App after first making.</b></li>"+                    
      "</ul>")
      }
  }
}
/////////////////////////////////////////////////////////// Schedules and Subscribes //////////////////////////////////////////////////////////
void initialize() {
     subscribe(DeVices, "lock.unlocked", onTimeHandler)
	 subscribe(DeVices, "lock.locked", offTimeHandler)
     subscribe(DeVices, "contact.open", onTimeHandler)  
     subscribe(DeVices, "contact.closed", offTimeHandler) 
     subscribe(DeVices, "battery", batHandler)  
     subscribe(contactLock1, "contact.closed", contactClosedHandler) 
     subscribe(contactLock1, "contact.open", contactOpenHandler) 
     subscribe(contactLock2, "contact.closed", contactClosedHandler) 
     subscribe(contactLock2, "contact.open", contactOpenHandler)  	
    
     if (allLockBool) {schedule("${state.allLockCron}", allLockHandler)} // Set All Lock Time 
     else {unschedule (allLockHandler)}	 
}   
//////////////////////////////////////////////////////////////////  Main Table Build ///////////////////////////////////////////////////////////////
String displayTable() {
    //////////////////////////// Table Input Fields /////////////////////////////
    if(state.newMode) { //////// Input Modes  
      input name: "newMode", type: "mode", title: getFormat("noticable","<b>Select during which mode this device will only run.</b><br> <small> Home, Away, etc.. &nbsp Or Any if No Selection</small>"), defaultValue: "", submitOnChange:true, width: 7, required: false, newLineAfter: true, style: 'margin-left:10px'
          if(newMode) {
          state.DeVices[state.newMode].modes = newMode
          state.remove("newMode")
	      app.removeSetting("newMode")
          paragraph "<script>{changeSubmit(this)}</script>"
	     }
	}   
    ////////////////////////////// Table Buttons / Entries /////////////////////////////
    if(state.resetTotal) { def dev = DeVices.find{"$it.id" == state.resetTotal}  //// Reset Cumulative time and counts per device Button       
		state.DeVices[state.resetTotal].start = now()
        state.DeVices[state.resetTotal].total = 0
        state.DeVices[state.resetTotal].counts = 0
        state.remove("resetTotal")
	    }
    if(state.deviceState) { def dev = DeVices.find{"$it.id" == state.deviceState}   
		if (!pauseAllBool && dev.currentLock == "unlocked") {dev.lock()}
        else if (!pauseAllBool && dev.currentLock == "locked") {dev.unlock()}
          endif
        state.remove("deviceState")                          
        app.removeSetting("deviceState")
        paragraph "<script>{changeSubmit(this)}</script>"                   
        }
    if(state.lockActions0) {def dev = DeVices.find{"$it.id" == state.lockActions0}  
	    state.DeVices[state.lockActions0].lockActions = 0; state.remove("lockActions0") }
    else if(state.lockActions1) {def dev = DeVices.find{"$it.id" == state.lockActions1}  
	    state.DeVices[state.lockActions1].lockActions = 1; state.remove("lockActions1") }
    else if(state.lockActions2) {def dev = DeVices.find{"$it.id" == state.lockActions2}  
	    state.DeVices[state.lockActions2].lockActions = 2; state.remove("lockActions2") }
    else if(state.lockActions3) {def dev = DeVices.find{"$it.id" == state.lockActions3}  
	    state.DeVices[state.lockActions3].lockActions = 3; state.remove("lockActions3") }
    else if(state.lockActions4) {def dev = DeVices.find{"$it.id" == state.lockActions4}  
	    state.DeVices[state.lockActions4].lockActions = 4; state.remove("lockActions4") }
     endif
    if(state.unLockActions0) {def dev = DeVices.find{"$it.id" == state.lockActions0}  
	    state.DeVices[state.unLockActions0].unLockActions = 0; state.remove("unLockActions0") }
    else if(state.unLockActions1) {def dev = DeVices.find{"$it.id" == state.unLockActions1}  
	    state.DeVices[state.unLockActions1].unLockActions = 1; state.remove("unLockActions1") }
    else if(state.unLockActions2) {def dev = DeVices.find{"$it.id" == state.unLockActions2}  
	    state.DeVices[state.unLockActions2].unLockActions = 2; state.remove("unLockActions2") }
    else if(state.unLockActions3) {def dev = DeVices.find{"$it.id" == state.unLockActions3}  
	    state.DeVices[state.unLockActions3].unLockActions = 3; state.remove("unLockActions3") }
    else if(state.unLockActions4) {def dev = DeVices.find{"$it.id" == state.unLockActions4}  
	    state.DeVices[state.unLockActions4].unLockActions = 4; state.remove("unLockActions4") }
     endif
    if(state.pauseCheckedBox) {def dev = DeVices.find{"$it.id" == state.pauseCheckedBox}  //// ver1.0.2
	    state.DeVices[state.pauseCheckedBox].pause = true; state.remove("pauseCheckedBox") }
	else if(state.pauseUnCheckedBox) {def dev = DeVices.find{"$it.id" == state.pauseUnCheckedBox}  
	    state.DeVices[state.pauseUnCheckedBox].pause = false; state.remove("pauseUnCheckedBox") }
     endif 
///////////////////////////////////////// Table Header Build /////////////////////////////////////
	String str = "<script src='https://code.iconify.design/iconify-icon/1.0.0/iconify-icon.min.js'></script>"   
        str += "<style>.mdl-data-table tbody tr:hover{background-color:inherit} .tstat-col td, .tstat-col th {font-size:16px !important; padding:2px 6px;text-align:center} + .tstat-col td {font-size:16px  }" +
        "</style><div style='overflow-x:auto'><table class='mdl-data-table tstat-col' style='border:3px solid black'>" +
        "<thead><tr style='border-bottom:2px solid black'><th>#</th>" +	
        "<th style='border-right:2px solid black'><small><small>App ver${state.version}</small></small><br>Device</th>" +
        "<th style='border-right:2px solid black'>State</th>" +     
		"<th style='border-right:2px solid black'>Run<br>Mode</th>"+    
        "<th style='border-right:2px solid black'>Lock<br>Actions</th>"+    
        "<th style='border-right:2px solid black'>Unlock<br>Actions</th>"+  
        "<th style='border-right:2px solid black'>Lock<br>Pause?</th>"+
        "<th style='border-right:2px solid black'>Battery<br>Level%</th>"+    
        "<th>Active<br>Counts" +    
        "<th>Active<br>OnTime</th>"+
        "<th>Reset<br>OnTime</th></tr></thead>"
  
    int zone = 0
    DeVices.sort{it.displayName.toLowerCase()}.each {dev ->
        zone += 1
        ////////////////////////// Active/On Time Calc
        int counts = state.DeVices["$dev.id"].counts   
        int total = state.DeVices["$dev.id"].total / 1000
        float totalDays = (total / 86400) as float //// ver1.1.1
        int hours = total / 3600
        total = total % 3600
	    int mins = total / 60
	    int secs = total % 60
        String time = "$hours:${mins < 10 ? "0" : ""}$mins:${secs < 10 ? "0" : ""}$secs"
         if (inDaysCBool) {time = String.format("%.3f", totalDays)} // For table Only  //// ver1.1.1
        
        String devLink = "<a href='/device/edit/$dev.id' target='_blank' title='Open Device Page for $dev'>$dev"
        String deviceStateT = buttonLink("E$dev.id", dev.currentLock, "16px")
        String resetTotal = buttonLink("C$dev.id", state.resetIcon, "16px") 
        String mode = buttonLink("D$dev.id", state.DeVices["$dev.id"].modes, "MediumBlue", "16px") 
        String lockActionsT 
        	if (state.DeVices["$dev.id"].lockActions == 0) {lockActionsT = buttonLink("G$dev.id", "None", "blue", "16px")}
        	else if (state.DeVices["$dev.id"].lockActions == 1) {lockActionsT = buttonLink("H$dev.id", state.lockActionsIcon1)}  
        	else if (state.DeVices["$dev.id"].lockActions == 2) {lockActionsT = buttonLink("I$dev.id", state.lockActionsIcon2)}
        	else if (state.DeVices["$dev.id"].lockActions == 3) {LockActionsT = buttonLink("J$dev.id", state.lockActionsIcon3)}
        	else if (state.DeVices["$dev.id"].lockActions == 4) {LockActionsT = buttonLink("K$dev.id", state.lockActionsIcon4)}
        		endif
        String unLockActionsT 
        	if (state.DeVices["$dev.id"].unLockActions == 0) {unLockActionsT = buttonLink("L$dev.id", "None", "blue", "16px")}
        	else if (state.DeVices["$dev.id"].unLockActions == 1) {unLockActionsT = buttonLink("M$dev.id", state.unLockActionsIcon1)}  
        	else if (state.DeVices["$dev.id"].unLockActions == 2) {unLockActionsT = buttonLink("N$dev.id", state.unLockActionsIcon2)}
        	else if (state.DeVices["$dev.id"].unLockActions == 3) {unLockActionsT = buttonLink("O$dev.id", state.unLockActionsIcon3)}
        	else if (state.DeVices["$dev.id"].unLockActions == 4) {unLockActionsT = buttonLink("P$dev.id", state.unLockActionsIcon4)} 
        		endif
        String pauseCheckBoxT = (state.DeVices["$dev.id"].pause) ? buttonLink("A$dev.id", state.pauseIcon) : buttonLink("B$dev.id", state.playIcon) 
             
///////////////////////////////////////////////// Table Rows Build /////////////////////////////////////////////
        str += "<tr style='color:black'><td>${state.DeVices["$dev.id"].zone}</td>" +     
        "<td style='border-right:2px solid black'>$devLink</td>" 
       	if (dev.currentLock) {str += "<td style='font-weight:bold; font-size:18px !important; border-right:2px solid black; color:${dev.currentLock == "locked" ? "green" : "red"}' title='Click to Change State'>$deviceStateT</td>"}  
        else if (dev.currentContact) {str += "<td style='font-weight:bold; font-size:16px; border-right:2px solid black; color:${dev.currentContact == "closed" ? "green" : "red"}' title='Contact State'>${dev.currentContact}</td>"}
        	endif    
       	str += "<td style='border-right:2px solid black' title='Click to Change Mode'>$mode</td>"     
        if (dev.currentLock) {str += "<td style='border-right:2px solid black' title='Select Lock actions or none'>$lockActionsT</td>"} 
        	else  {str += "<td style='border-right:2px solid black' title='Contacts Cant use special Actions'>N/A</td>"} 
        if (dev.currentLock) {str += "<td style='border-right:2px solid black' title='Select Unlock actions or none'>$unLockActionsT</td>"} 
        	else  {str += "<td style='border-right:2px solid black' title='Contacts Cant use special Actions'>N/A</td>"} 
        if (dev.currentLock) {str += "<td style='border-right:2px solid black' title='Click to Pause this device schedule, Red is paused, Green is run'>$pauseCheckBoxT</td>"} 
        	else  {str += "<td style='border-right:2px solid black' title='Cant Pause a contact'>N/A</td>"} 
        str += "<td style='border-right:2px solid black' title='Battery Level' >${dev.currentBattery}</td>" +
        "<td style='font-weight:bold' title='Total On Counts' >${state.DeVices["$dev.id"].counts}</td>" 
        if (dev.currentLock) {str += "<td style='font-weight:bold; color:${dev.currentLock == "locked" ? "green" : "red"}'>$time</td>" }  
        	else if (dev.currentContact) {str += "<td style='font-weight:bold; color:${dev.currentContact == "closed" ? "green" : "red"}'>$time</td>" }   //// ver1.20 
        endif 
        str += "<td style='border-right:3px solid black' title='Reset Total On Time & Counts for $dev' style='padding:0px 0px'>$resetTotal</td></tr>" 
        }
   	str += "</table></div>"
}
String buttonLink(String btnName, String linkText, color = SteelBlue, font = "13px") { //// Device Link Format
  	"<div class='form-group'><input type='hidden' name='${btnName}.type' value='button'></div><div><div class='submitOnChange' onclick='buttonClick(this)' style='color:$color;cursor:pointer;font-size:$font'>$linkText</div></div><input type='hidden' name='settings[$btnName]' value=''>"
	}
////////////////////////////////////////////////////////////////// Handlers //////////////////////////////////////////////////////////////////
def onTimeHandler(evt) { //// Called by; Subscribes only
    state.DeVices[evt.device.id].start = now()
    state.DeVices[evt.device.id].counts += 1  
    	zone = state.DeVices[evt.device.id].zone
    	if (logEnableBool) {log.debug "${app.label} -- ONtime HANDLER, Device **${evt.device}**}" }
    	if (autoLockBool && !pauseAllBool) {runIn(60 * lockDelaySec, lockHandler, [data:zone, overwrite:false]) }
}   
def offTimeHandler(evt) { //// Called by; Subscribes only
    state.DeVices[evt.device.id].total += now() - state.DeVices[evt.device.id].start
    if (logEnableBool) {log.debug "${app.label} -- OFFtime HANDLER, Device **${evt.device}**.....total= ${state.DeVices[evt.device.id].total}"} 
}
void lockHandler(data) {
    if (pauseAllBool) {return} // All paused, get out, dont run
    DeVices.each { dev -> 
       if (dev.currentLock == "unlocked" && !state.DeVices["$dev.id"].pause && ((state.DeVices["$dev.id"].modes == location.mode) || state.DeVices["$dev.id"].modes == "Any") 
           && data.value == state.DeVices["$dev.id"].zone && state.DeVices["$dev.id"].pauseLock == false) {  dev.lock() }
     	}
}    
void unLockHandler(data) {   /////XXXXXXXXXXXXXXXX
    DeVices.each { dev -> 
       ////if (!state.DeVices["$dev.id"].pause && ((state.DeVices["$dev.id"].modes == location.mode) || state.DeVices["$dev.id"].modes == "Any") && data.value == state.DeVices["$dev.id"].zone) {
        ///   dev.lock()
       }
	}
void contactClosedHandler(evt) {
    if (pauseAllBool) {return} // All paused, get out, dont run
    DeVices.each { dev -> 
        if (dev.currentLock) {
        	if (state.DeVices["$dev.id"].lockActions == 1 && evt.dev.currentContact == "closed" && contactLock1 == evt.dev.currentContact) {state.DeVices["$dev.id"].pauseLock = false}
            else if (state.DeVices["$dev.id"].lockActions == 2 && evt.dev.currentContact == "closed" && contactLock2 == evt.dev.currentContact) {state.DeVices["$dev.id"].pauseLock = false}
        	 zone = state.DeVices["$dev.id"].zone
        	 	if (state.DeVices["$dev.id"].lockActions == 1 && state.DeVices["$dev.id"].pauseLock == false) {runIn(60 * contactLock1DelaySec, lockHandler, [data:zone, overwrite:true]) }
        		else if (state.DeVices["$dev.id"].lockActions == 2 && state.DeVices["$dev.id"].pauseLock == false) {runIn(60 * contactLock2DelaySec, lockHandler, [data:zone, overwrite:true]) }
        }    
 	}
}   
void contactOpendHandler(evt) {  //// Pauses lock from locking
    DeVices.each { dev ->
        if (dev.currentLock) {        
			if (state.DeVices["$dev.id"].lockActions == 1 && evt.dev.currentContact == "open" && contactLock1 == evt.dev.currentContact) {state.DeVices["$dev.id"].pauseLock = true}
            else if (state.DeVices["$dev.id"].lockActions == 2 && evt.dev.currentContact == "open" && contactLock2 == evt.dev.currentContact) {state.DeVices["$dev.id"].pauseLock = true}
        }     
 	}
}   
def allLockHandler(evt) {//// Called by; Sched All off time or App button
    if (pauseAllBool) {return} // All paused, get out, dont run
    DeVices.each { dev ->
    	if ((state.DeVices["$dev.id"].modes == location.mode || state.DeVices["$dev.id"].modes == "Any") && dev.currentLock == "unlocked") {dev.lock()}  
    	}
    log.info "${app.label} -- All Locks Locking" 
}
def batHandler(evt) {  
    if (pushDevice && pushBattery && evt.device.currentBattery <= batPercent) {pushDevice.deviceNotification("${app.label} -- Device **${evt.device}**, Battery is below **${batPercent}")}
}
def buildCron() {//// Called by; updated() function, via install or in App refresh/store buttons or within functions
  if (allLockBool) {
        String formattedTimeOff = allOffTime.substring(11, allOffTime.length() - 12)
        String hoursOff = formattedTimeOff.substring(0, formattedTimeOff.length() - 3) // Chop off the last 3 in string
        String minutesOff = formattedTimeOff.substring(3) // Chop off the first 3 in string
        state.allLockCron = "0 ${minutesOff} ${hoursOff} * * ? * "  
    }
    if (logEnableBool) {log.debug "${app.label} -- All Cron Schedules Successfully Built"} 
}
void appButtonHandler(btn) {//// Called by; In app Button pushes
    if (btn == "refresh") refreshHandler()   
    else if (btn == "allLock") allLockHandler()  
    else if (btn == "updateButton") updated()  
    else if (btn.startsWith("A")) state.pauseUnCheckedBox = btn.minus("A") 
    else if (btn.startsWith("B")) state.pauseCheckedBox = btn.minus("B")
    else if (btn.startsWith("C")) state.resetTotal = btn.minus("C")  
    else if (btn.startsWith("D")) state.newMode = btn.minus("D")
    else if (btn.startsWith("E")) state.deviceState = btn.minus("E")
   		else if (btn.startsWith("K")) state.lockActions0 = btn.minus("K")    
    	else if (btn.startsWith("G")) state.lockActions1 = btn.minus("G")
   		else if (btn.startsWith("H")) state.lockActions2 = btn.minus("H")    
    	else if (btn.startsWith("I")) state.lockActions3 = btn.minus("I")
  		else if (btn.startsWith("J")) state.lockActions4 = btn.minus("J")
    else if (btn.startsWith("P")) state.unLockActions0 = btn.minus("P")    
    else if (btn.startsWith("L")) state.unLockActions1 = btn.minus("L")
   	else if (btn.startsWith("M")) state.unLockActions2 = btn.minus("M")    
    else if (btn.startsWith("N")) state.unLockActions3 = btn.minus("N")
  	else if (btn.startsWith("O")) state.unLockActions4 = btn.minus("O")    
  	 endif    
}
def refreshHandler() {//// Called by; In App Button push and within functions  // Update Times if Active/On
    state.DeVices.each {k, v ->
        def dev = DeVices.find{"$it.id" == k}
        if (dev.currentLock == "unlocked" || dev.currentContact == "open") {  //////////////////  
          state.DeVices[k].total += now() - state.DeVices[k].start
		  state.DeVices[k].start = now()
          }
 	}
    //contactOpendHandler() // Update sensor readings if any
    //contactClosedHandler()
}
//////////////////////////////////////////////////////////////  Status Bar  //////////////////////////////////////////////////////////////////// 
String statusBar() {
    if (pauseAllBool) {paragraph getFormat("noticable","<b>All Lock Actions Paused!!!</b>")}
   	paragraph getFormat("smallLineSpace","<b>Current Hub Mode:</b> &nbsp ${location.mode}")
}
///////////////////////////////////////////////////////////  Icon Graphics  ////////////////////////////////////////////////////////////////// 
def icons() { 
    state.playIcon = "<iconify-icon inline style='color:green; font-size:23px' icon=ic:baseline-play-circle></iconify-icon>"
    state.pauseIcon = "<iconify-icon inline style='color:red; font-size:23px' icon=ic:sharp-pause-circle-filled></iconify-icon>" 
    state.resetIcon = "<iconify-icon inline style='color:black; font-size:23px' icon='bx:reset'></iconify-icon>" 
 	state.lockActionsIcon1 = "<iconify-icon inline style='color:#241571; font-size:23px' icon='tabler:circle-1-filled'></iconify-icon>"
    state.lockActionsIcon2 = "<iconify-icon inline style='color:#0F52BA; font-size:23px' icon='tabler:circle-2-filled'></iconify-icon>"
    state.lockActionsIcon3 = "<iconify-icon inline style='color:#48AAAD; font-size:23px' icon='tabler:circle-3-filled'></iconify-icon>"
    state.lockActionsIcon4 = "<iconify-icon inline style='color:#0096FF; font-size:23px' icon='tabler:circle-4-filled'></iconify-icon>"
    state.unLockActionsIcon1 = "<iconify-icon inline style='color:#241571; font-size:23px' icon='tabler:circle-1-filled'></iconify-icon>"
    state.unLockActionsIcon2 = "<iconify-icon inline style='color:#0F52BA; font-size:23px' icon='tabler:circle-2-filled'></iconify-icon>"
    state.unLockActionsIcon3 = "<iconify-icon inline style='color:#48AAAD; font-size:23px' icon='tabler:circle-3-filled'></iconify-icon>"
    state.unLockActionsIcon4 = "<iconify-icon inline style='color:#0096FF; font-size:23px' icon='tabler:circle-4-filled'></iconify-icon>"
}    
//////////////////////////////////////////////////////////////  Other Stuff //////////////////////////////////////////////////////////////////
def updated() {  // runs every 'Done' on already installed app 
    unsubscribe()  ////   
    unschedule(switchOnHandler)  // cancels all(or one) scheduled jobs including runIn
    icons()
    buildCron()
    initialize()  // set schedules and subscribes
    if(logEnableBool) runIn(3600, logsOff)  // Disable all debug Logging after time elapsed
}
def installed() { updated() }  // only runs once for new app 'Done' or first time open 
def logsOff() {log.info "${app.label} -- All App 'debug' logging auto disabling itself"; app?.updateSetting("logEnableBool",[value:"false",type:"bool"]) }
def getFormat(type, myText="") {		
    if(type == "title") return "<h3 style='color:SteelBlue; line-height: 50%; font-weight: bold'>${myText}</h3>"  // Steel-Blue
    if(type == "blueRegular") return "<div style='color:SteelBlue; font-weight: bold; line-height: 97%'>${myText}</div>"  // Steel-Blue
    if(type == "noticable") return "<div style='color:#CC5500'>${myText}</div>"  // Burnt-Orange
    if(type == "lessImportant") return "<div style='color:green'>${myText}</div>" // Green
    if(type == "smallLineSpace") return "<div style='line-height: 50%; white-space:nowrap; '>${myText}</div>" // smallLineSpace
        
    if (formatBool) {if(type == "header") {return "<div style='color:#660000;font-weight: bold'>${myText}</div>"}  // Burgandy-Red //// ver1.2.0
                    if(type == "important") return "<div style='color:#5a8200; line-height: 97%'>${myText}</div>"  // Lime-Green
    	}
    else {if(type == "header") return "<div style='color:#000000;font-weight: bold'>${myText}</div>"  // Black
          if(type == "important") return "<div style='color:#000000; line-height: 97%'>${myText}</div>"   // Black
    	}
}
def displayTitle() {titleVersion();  section (getFormat("title",  "App: ${state.name} - ${"ver " + state.version}")) {} }
