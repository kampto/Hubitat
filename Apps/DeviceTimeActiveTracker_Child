/* Device Active Time and Counter Tracker (Child App)
*  
*	2022 T. K. (kampto)
*	NOTES:  Track the time and counts a device is Active/On. Assign to a variable if needed. Refresh/Reset/Update variable various ways. Use variable in RM to trigger things. 
*   
*    Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at
*    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS,
*    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
*
*	Change Revision History:  
*   Ver		Date:		Who:		What:
*   1.5.3	2025-03-10	basilisk487	Pull request: Fixes a race condition when multiple devices send updates very close to each other.
*   1.5.2	2024-12-17	kampto    	Fixed Removing device bug. Changed Battery threshold. Add last Battery total days tracker (1.5.0). Battery page Note. Fix Bat last report issue(1.5.2)
*   1.4.7	2023-08-24	kampto    	Add Battery level tracking and options. Added Last Battery report date. Threshold 50%. Add Motion and Humidty sensor capability
*   1.3.4	2023-06-28	kampto    	Add Max on time variable link. Restructer Resets code. Moved reset when on to table check box.
*   1.3.3	2023-06-25	kampto    	Added Notification options, Added Min/Max Active times for contacts & switches. Add auto reset by day choice. Threshold icon changes
*   1.2.2	2023-05-07	kampto    	Max-Min value in table for Temperature, Power, Voltage. Move variables to a differnt Table.
*   1.2.0	2023-05-06	FriedCheese	Pull request: Alternative darkscreen format Option 
*   1.1.8	2023-05-05	kampto		Add option to see last On-time vs last reset. Added per device power, temp, or voltage tracking thresholds in table. Add Thermostat Heating or Cooling modes.
*   1.1.7	2023-05-02	kampto		Added Temperature and Voltage capability. Added temp, voltage and power below threshold tracking
*   1.1.6	2023-05-01	kampto		Added 'Days' option for table display-only. Fixed remote reset bug and powerHandler bug
*   1.1.5	2023-04-28	kampto		Added 2nd variable per device to reset cumulative time. More variable and reset options. Added On Counts variable and reset
*   1.1.3	2023-04-27	kampto		Add total time in table. Table Check Boxes. Option to disable App based logging. Added Seconds Update. Added On counts.
*   1.1.0	2023-04-15	kampto		Updated page format, option for variables as an int for use in RM. Option to reset when active. Enhanced logs. Power reset bug fix.
*   1.0.3	2023-04-12	kampto		Added Power monitoring capability, Added Time/Variable refresh time entry, fixed variable refresh at reset, Bug fixes 
*   1.0.1	2022-10-10	kampto		Added Auto Reset timers, added state to table.  
*   1.0.0	2022-10-02	kampto		Modified to support Parent/Child apps. Add other capabilities and features.
*/

import groovy.time.TimeCategory
import java.text.SimpleDateFormat

def setVersion() {
    state.name = "Device Tracker: Times, Levels, Last Active, and Counts (Child)"
	state.version = "1.5.3"
    }

definition (
	name: "Device Time Active Tracker Child", namespace: "kampto", author: "T. K.",
	description: "Track Time a device is Active, Levels, On Counts, Attach data to variables, Send Notifications",
	category: "General",
	parent: "kampto:Device Time Active Tracker",
	iconUrl: "",
	iconX2Url: "",
    importUrl: "https://raw.githubusercontent.com/kampto/Hubitat/main/Apps/DeviceTimeActiveTracker_Child",
    documentationLink: "https://community.hubitat.com/t/app-device-active-tracker-multiple-device-on-off-times-on-counts-notifier-battery-levels-with-variables-access/102896"
	singleThreaded: true
	)

preferences { page(name: "mainPage") }

////////////////////////////////////////////////////////////////  Page/Input Set-Up  ///////////////////////////////////////////////////////////////
def mainPage() {
    if(app.getInstallationState() != "COMPLETE") {hide=false} else {hide=true}  //// ver1.2.0
    if (state.DeVices == null) state.DeVices = [:]
    if (state.DeVicesList == null) state.DeVicesList = []
    if (resetHour == null) {resetHour = 0}   //// ver1.0.1
    if (resetDay == null) {resetDay = "Everyday"}   //// ver1.3.3
    if (refreshMinutes == null) {refreshMinutes = 10}    //// ver1.1.3
    if (refreshSeconds == null) {refreshSeconds = 30}    //// ver1.1.3
    if (capabilitySelect == null) {capabilitySelect = 1}
    if (allTotal == null) {allTotal = 0}   //// ver1.1.3
    state.keepCountsBool = false  //// ver1.1.4
    state.allResetBool = false  //// ver1.3.4
                        
  dynamicPage(name: "mainPage", title: "", install: true, uninstall: true) {
  displayTitle() 
  section (getFormat("header","Initial Set-Up:"),hideable: true, hidden: hide){  //// ver1.2.0
        label title: "<b>1. Name this child App</b>", required: true, submitOnChange: true, width: 3
        input name: "capabilitySelect", type: "enum", title: "<b>2. Select a Capability to track</b>", required: true, description: "Default = SWITCH On", defaultValue: "1", multiple: false, options:[["1":"SWITCH On"], ["2":"CONTACT Open"], ["3":"CONTACT Closed"], ["4":"POWER Monitor"], ["5":"TEMPERATURE Monitor"], ["6":"VOLTAGE Monitor"], ["7":"THERMOSTAT State"], ["8":"BATTERY Level%"], ["9":"MOTION Active"], ["10":"HUMIDITY Monitor"]], width: 3, submitOnChange: true, displayDuringSetup: false
        if (capabilitySelect == "1") {capability = "Switch"; input "DeVices", "capability.switch", title: "<b>3. Select Devices to Track Switch On Time</b>", required: true, multiple: true, submitOnChange: true, width: 5}    
        else if (capabilitySelect == "2") {capability = "Contact Open"; input "DeVices", "capability.contactSensor", title: "<b>3. Select Devices to Track Contact Open Time</b>", required: true, multiple: true, submitOnChange: true, width: 5}   //// ver1.0.1
        else if (capabilitySelect == "3") {capability = "Contact Closed"; input "DeVices", "capability.contactSensor", title: "<b>3. Select Devices to Track Contact Closed Time</b>", required: true, multiple: true, submitOnChange: true, width: 5}   //// ver1.0.1
        else if (capabilitySelect == "4") {capability = "Power Meter"; input "DeVices", "capability.powerMeter", title: "<b>3. Select Power reporting Devices to Track</b>", required: true, multiple: true, submitOnChange: true, width: 5}   //// ver1.0.3
        else if (capabilitySelect == "5") {capability = "Temperature"; input "DeVices", "capability.temperatureMeasurement", title: "<b>3. Select Temperature reporting Devices to Track</b>", required: true, multiple: true, submitOnChange: true, width: 5}   //// ver1.1.7
        else if (capabilitySelect == "6") {capability = "Voltage"; input "DeVices", "capability.voltageMeasurement", title: "<b>3. Select Voltage reporting Devices to Track</b>", required: true, multiple: true, submitOnChange: true, width: 5}   //// ver1.1.7
        else if (capabilitySelect == "7") {capability = "Thermostat"; input "DeVices", "capability.thermostat", title: "<b>3. Select Thermostat to Track Heat/Cool state</b>", required: true, multiple: true, submitOnChange: true, width: 5}   //// ver1.1.8       
        else if (capabilitySelect == "8") {capability = "Battery"; input "DeVices", "capability.battery", title: "<b>3. Select Device Batterys to Track Level</b>", required: true, multiple: true, submitOnChange: true, width: 5}   //// ver1.4.0      
        else if (capabilitySelect == "9") {capability = "Motion active"; input "DeVices", "capability.motionSensor", title: "<b>3. Select Motion Devices to Active</b>", required: true, multiple: true, submitOnChange: true, width: 5}   //// ver1.4.5      
        else if (capabilitySelect == "10") {capability = "Humidity"; input "DeVices", "capability.relativeHumidityMeasurement", title: "<b>3. Select Humidty reporting Devices to Track</b>", required: true, multiple: true, submitOnChange: true, width: 5}   //// ver1.4.5  
        else {capability = "Switch"; input "DeVices", "capability.switch", title: "<b>3. Select Devices to Track Switch On Time</b>", multiple: true, submitOnChange: true, width: 5}
    paragraph "IMPORTANT: Only one Capability per each child App (table) can be used.  Multiple Devices of same Capability can be checked. Do not change Capability after initial App set-up. Adding an additional Device later is OK if you hit Done right after adding."
      
    DeVices.each {dev ->
	    if(!state.DeVices["$dev.id"]) {
             if (capabilitySelect == "1") {state.DeVices["$dev.id"] = [start: dev.currentSwitch == "on" ? now() : 0, total: 0, oneTime: 0, var: "", varC: "", varCT: "", varMax: "", time: "", onTime: "", allTime: 0, counts: 0, checkBox1: false, checkBox2: false, checkBox3: true, notifyBox: false, timeMin: "", timeMax: "", min: 9999, max: 0, notifyTime: 9999.9999, notifyReset: false]}  
             else if (capabilitySelect == "2") {state.DeVices["$dev.id"] = [start: dev.currentContact == "open" ? now() : 0, total: 0, oneTime: 0, var: "", varC: "", varCT: "", varMax: "", time: "", onTime: "", allTime: 0, counts: 0, checkBox1: false, checkBox2: false, checkBox3: true, notifyBox: false, timeMin: "", timeMax: "", min: 9999, max: 0, notifyTime: 9999.9999, notifyReset: false]}   //// ver1.0.1
             else if (capabilitySelect == "3") {state.DeVices["$dev.id"] = [start: dev.currentContact == "closed" ? now() : 0, total: 0, oneTime: 0, var: "", varC: "", varCT: "", varMax: "", time: "", onTime: "", allTime: 0, counts: 0, checkBox1: false, checkBox2: false, checkBox3: true, notifyBox: false, timeMin: "", timeMax: "", min: 9999, max: 0, notifyTime: 9999.9999, notifyReset: false]}  //// ver1.0.1
             else if (capabilitySelect == "4") {state.DeVices["$dev.id"] = [start: dev.currentPower >= 0 ? now() : 0, total: 0, oneTime: 0, var: "", varC: "", varCT: "", varMax: "", time: "", onTime: "", allTime: 0, counts: 0, checkBox1: false, checkBox2: false, checkBox3: true, checkBox4: true, state: "off", thresh: 0, min: 9999, max: 0, notifyBox: false, notifyTime: 9999.9999, notifyReset: false]}   //// ver1.0.3
             else if (capabilitySelect == "5") {state.DeVices["$dev.id"] = [start: dev.currentTemperature >= 0 ? now() : 0, total: 0, oneTime: 0, var: "", varC: "", varCT: "", varMax: "", time: "", onTime: "", allTime: 0, counts: 0, checkBox1: false, checkBox2: false, checkBox3: true, checkBox4: true, state: "on", thresh: 32, min: 9999, max: 0, notifyBox: false, notifyTime: 9999.9999, notifyReset: false]}  //// ver1.1.7
             else if (capabilitySelect == "6") {state.DeVices["$dev.id"] = [start: dev.currentVoltage >= 0 ? now() : 0, total: 0, oneTime: 0, var: "", varC: "", varCT: "", varMax: "", time: "", onTime: "", allTime: 0, counts: 0, checkBox1: false, checkBox2: false, checkBox3: true, checkBox4: true, state: "off", thresh: 0, min: 9999, max: 0, notifyBox: false, notifyTime: 9999.9999, notifyReset: false]}  //// ver1.1.7
             else if (capabilitySelect == "7") {state.DeVices["$dev.id"] = [start: dev.currentThermostatOperatingState =="idle" ? now() : 0, total: 0, oneTime: 0, var: "", varC: "", varCT: "", varMax: "", time: "", onTime: "", allTime: 0, counts: 0, checkBox1: false, checkBox2: false, checkBox3: true, checkBox4: true, state: "idle", thresh: 0, min: 9999, max: 0, notifyBox: false, timeMin: "", timeMax: "", notifyTime: 9999.9999, notifyReset: false]}  //// ver1.1.8 
             else if (capabilitySelect == "8") {state.DeVices["$dev.id"] = [start: dev.currentBattery >= 0 ? now() : 0, total: 0, oneTime: 0, var: "", varC: "", varCT: "", varMax: "", time: "", onTime: "", lastTime: "", allTime: 0, counts: 0.0, reportDays: 0, lastTimeEpoch: 0, checkBox1: false, checkBox2: false, checkBox3: true, checkBox4: true, state: "off", thresh: 40, min: 9999, max: 0, notifyBox: false, notifyTime: 9999.9999, notifyReset: false]}  //// ver1.4.0    
             else if (capabilitySelect == "9") {state.DeVices["$dev.id"] = [start: dev.currentMotion == "active" ? now() : 0, total: 0, oneTime: 0, var: "", varC: "", varCT: "", varMax: "", time: "", onTime: "", allTime: 0, counts: 0, checkBox1: false, checkBox2: false, checkBox3: true, notifyBox: false, timeMin: "", timeMax: "", min: 9999, max: 0, notifyTime: 9999.9999, notifyReset: false]}   //// ver1.4.5    
             else if (capabilitySelect == "10") {state.DeVices["$dev.id"] =[start: dev.currentHumidity >= 0 ? now() : 0, total: 0, oneTime: 0, var: "", varC: "", varCT: "", varMax: "", time: "", onTime: "", allTime: 0, counts: 0, checkBox1: false, checkBox2: false, checkBox3: true, checkBox4: true, state: "off", thresh: 30, min: 9999, max: 0, notifyBox: false, notifyTime: 9999.9999, notifyReset: false]}  //// ver1.4.5 
             endif  
            state.DeVicesList += dev.id   
             }
	    }
  }
  section {                         
     if(DeVices) {
           	if(DeVices.id.sort() != state.DeVicesList.sort()) { 
				state.DeVicesList = DeVices.id
				Map newState = [:]
				DeVices.each{d ->  newState["$d.id"] = state.DeVices["$d.id"]}
				state.DeVices = newState
				}
      refreshHandler()  // get latest times at app open  ////  ver1.2.3          
      updated()
      paragraph displayTable()
	    ///////////////////////// Enter Threshold for Power, Temp, Voltage //// ver1.1.8 
        if(state.newThresh) {
        input name: "newThresh", type: "decimal", title:getFormat("noticable","<b>Enter Threshold number to call On/Active.</b> &nbsp<small>Hit Enter</small>"), defaultValue: "", required: false,  submitOnChange:true, width: 8, style: 'margin-left:10px'
          if(newThresh) {
             state.DeVices[state.newThresh].thresh = newThresh
             state.remove("newThresh")
		     app.removeSetting("newThresh")
             paragraph "<script>{changeSubmit(this)}</script>"
		     }
		  } 
          else if(state.remThresh) {
		     state.DeVices[state.remThresh].thresh = ""
             state.remove("remThresh")  
			  paragraph "<script>{changeSubmit(this)}</script>"
		      } 
         if (capabilitySelect != "8") {
            input "reset", "button", title: "<b>RESET</b> Periodic Times, Counts & Update Variables", width: 4   //// ver1.0.1
            input "refresh", "button", title: "<b>REFRESH</b> Table & Update Variables", width: 3    //// ver1.0.3
            input name: "inDaysCBool", type: "bool", title:getFormat("important2","Display Cumulative in Days?"), defaultValue:false, submitOnChange:true, width: 3   //// ver1.1.6
            }
         else { //// ver1.4.0
            input "refresh", "button", title: "<b>REFRESH</b> &nbsp All Table Values", width: 3     
            input name: "inDaysCBool", type: "bool", title:getFormat("important2","Display Duration Times in Days?"), defaultValue:true, submitOnChange:true, width: 4   
            }
     }
   if (capabilitySelect == "8") {paragraph "NOTE: Battery % reporting is device dependent and some wont update for days or weeks or longer or only when the % level changes!"}
      
  }
//////////////////////////////////////////////////////////////////////// Input Section 2 //////////////////////////////////////////////////////////////////        
     section(getFormat("header","Advanced Options:"),hideable: true, hidden: false) {
        if (capabilitySelect != "8") {
          input name: "autoResetBool", type: "bool", title: getFormat("important2","<b>Reset all Timers & Update Variables at specific Hour Everyday or specific Day(once a week)?</b><br>(Default = Off. This does not Reset Cumulative Timer) &nbsp <small>Applies to All</small>"), defaultValue:false, submitOnChange:true, style: 'margin-left:10px'
          if (autoResetBool) {
              input name: "countsResetBool", type: "bool", title: getFormat("important","Also Reset All On Counters and Min/Max values?"), defaultValue:false, submitOnChange:false, style: 'margin-left:60px'   ////  ver1.2.1 
              input name: "resetDay", type: "enum", title: getFormat("lessImportant","Select Day"), defaultValue: "SUN", submitOnChange: true,  options: ["Everyday","SUN","MON","TUE","WED","THU","FRI","SAT"], required: false, width: 2, style: 'margin-left:60px'   //// ver1.3.3
              input name: "resetHour", type: "enum", title: getFormat("lessImportant","Select Hour <small>(0 = Midnight)</small>"), defaultValue: "0", submitOnChange: true,  options: ["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23"], required: false, width: 3, newLineAfter: true
              }
         
            input name: "remoteResetVarBool", type: "bool", title: getFormat("important2","<b>Remote Reset Times & Counts by Hub Variable outside of App</b><br>(For Optional Rule Machine access)&nbsp <small>Applies to Devices with Remote Reset Box checked in Table</small>"), defaultValue:false, submitOnChange:true, style: 'margin-left:10px'
            if (remoteResetVarBool) {
              input name: "remoteResetCum", type: "bool", title: getFormat("important","Also Reset Cumulative timer?"), defaultValue:false, submitOnChange:false, style: 'margin-left:60px'    
              input "resetVar", "enum", title: getFormat("lessImportant","Select Boolean Hub Variable to Reset Periodic Times/Counts.<br>Must make a Boolean variable first in Settings/Hub Variables.<br>In Rule Machine set variable 'true' to trigger."), submitOnChange: true, style: 'margin-left:110px',
			  options: getAllGlobalVars().findAll{it.value.type == "boolean"}.keySet().collect().sort{it.capitalize()}
              }
          }
         
         if (capabilitySelect == "8") {  //// ver1.4.0
            input name: "pushBool", type: "bool", title: getFormat("important2","<b>Get push notificatuions from Selected Device(s) when Alarm Level reached?</b>"), defaultValue:false, submitOnChange:true, style: 'margin-left:10px'   //// ver1.2.4
             if (pushBool) {
             input "pushDevice", "capability.notification", title: "<b>Select device(s) to send notification to</b>", multiple: true, required: false, submitOnChange: true, width: 5, newLineAfter: true, style: 'margin-left:60px'       
             }
            input name: "batResetBool", type: "bool", title: getFormat("important2","<b>Auto Detect Device Battery change and reset stats?</b>"), defaultValue:false, submitOnChange:true,  newLineAfter: true, width: 6, style: 'margin-left:10px'   //// ver1.4.1
             if (batResetBool) {
             input name: "batResetPercent", type: "number", title:getFormat("important","<b>Enter % level increase to determine battery was changed</b> <br> <small>(1 to 99) Defualt = 40, applies to all devices</small>"), defaultValue: 40, required: false,  submitOnChange:true, accepts: "1 to 5000", range: "1..5000", width: 6, newLineAfter: true, style: 'margin-left:60px'
             }  
         }
         input name: "formatBool", type: "bool", title: getFormat("important2","<b>Enable Alternative UI formatting with table sort? Dark screen mode.</b>"), defaultValue:false, submitOnChange:true, style: 'margin-left:10px'  //// ver1.2.0
         input name: "logEnableBool", type: "bool", title: getFormat("important2","<b>Enable Logging of App based Resets and Variable Refresh/Updates?</b><br><small>Shuts off in 1hr</small>"), defaultValue:true, submitOnChange:true, style: 'margin-left:10px'  //// ver1.1.3
      }
      
/////////////////////////////////////////////////////////////////  VARIABLES Input Section //////////////////////////////////////////////////////////////////////////////          
if (capabilitySelect != "8") {  /// If not a Battery then make variables table
    section(getFormat("header","Attach Variables and Notifications Table Options:"),hideable: true, hidden: false) {   //// ver1.2.2
    paragraph variablesTable()  //// ver1.2.2
     ///////////////////////// Periodic Variable Select
     if(state.newVar) {
	    List vars = getAllGlobalVars().findAll{it.value.type == "integer" || it.value.type == "string"}.keySet().collect().sort{it.capitalize()}
        input "newVar", "enum", title: getFormat("noticable", "Select Hub Variable to store Time data (Number or String)."), submitOnChange: true, width: 9, options: vars, newLineAfter: true
		    if(newVar) {
			    state.DeVices[state.newVar].var = newVar
                state.remove("newVar")
				app.removeSetting("newVar")
				paragraph "<script>{changeSubmit(this)}</script>"
				}
		     } 
             else if(state.remVar) {
				 state.DeVices[state.remVar].var = ""
                 state.remove("remVar")
				 paragraph "<script>{changeSubmit(this)}</script>"
				 }
     ///////////////////////// Cumulative Variable Select  //// ver1.1.5
     if(state.newVarC) {
		List varsC = getAllGlobalVars().findAll{it.value.type == "integer" || it.value.type == "string"}.keySet().collect().sort{it.capitalize()}
        input "newVarC", "enum", title: getFormat("noticable","Select Hub Variable to store Time data (Number or String)."), submitOnChange: true, width: 9, options: varsC, newLineAfter: true
	        if(newVarC) {
			 state.DeVices[state.newVarC].varC = newVarC
             state.remove("newVarC")
			 app.removeSetting("newVarC")
			 paragraph "<script>{changeSubmit(this)}</script>"
			 }
		 } 
        else if(state.remVarC) {
		    state.DeVices[state.remVarC].varC = ""
            state.remove("remVarC")
		    paragraph "<script>{changeSubmit(this)}</script>"
		    } 
     ///////////////////////// Device On Counts Variable Select  //// ver1.1.5  
     if(state.newVarCT) {
	    List varsCT = getAllGlobalVars().findAll{it.value.type == "integer"}.keySet().collect().sort{it.capitalize()}
        input "newVarCT", "enum", title: getFormat("noticable","Select Hub Variable to store Counts data (Number only)"), submitOnChange: true, width: 9, options: varsCT, newLineAfter: true
		  if(newVarCT) {
		    state.DeVices[state.newVarCT].varCT = newVarCT
            state.remove("newVarCT")
		    app.removeSetting("newVarCT")
		    paragraph "<script>{changeSubmit(this)}</script>"
		    }
		 } 
          else if(state.remVarCT) {
			state.DeVices[state.remVarCT].varCT = ""
            state.remove("remVarCT")
			paragraph "<script>{changeSubmit(this)}</script>"
           }
     ///////////////////////// Device Max-On Variable Select  //// ver1.3.4  
     if(state.newVarMax) {
	    List varsMax = getAllGlobalVars().findAll{it.value.type == "string"}.keySet().collect().sort{it.capitalize()}
        input "newVarMax", "enum", title: getFormat("noticable","Select Hub Variable to store Max time data (time String only)"), submitOnChange: true, width: 9, options: varsMax, newLineAfter: true
		  if(newVarMax) {
		    state.DeVices[state.newVarMax].varMax = newVarMax
            state.remove("newVarMax")
		    app.removeSetting("newVarMax")
		    paragraph "<script>{changeSubmit(this)}</script>"
		    }
		 } 
          else if(state.remVarMax) {
			state.DeVices[state.remVarMax].varMax = ""
            state.remove("remVarMax")
			paragraph "<script>{changeSubmit(this)}</script>"
           }
     ///////////////////////// Notify Time Duration Select  //// ver1.3.0  
     if(state.newNotifyTime) {
       app?.updateSetting("notifyTimeDays",[value: "" ,type:"decimal"])   //////////////
       paragraph getFormat("noticable","<b>Enter Days + Hours to elapse before this device sends a Notification</b> &nbsp <small>Must put number or Zero in both, Hit Enter</small>")
       input "notifyTimeDays", "decimal", title:getFormat("noticable", "Days"), defaultValue: "", required: false, width: 1, style: 'margin-left:10px'  //submitOnChange:true, 
	   input "newNotifyTime", "decimal", title:getFormat("noticable", "+Hours"), defaultValue: "", required: false,  submitOnChange:true, width: 1, newLineAfter: true, style: 'margin-left:10px'
         
         if (newNotifyTime  && notifyTimeDays ) {newNotifyTime = notifyTimeDays + newNotifyTime/24}
         else if (newNotifyTime && (notifyTimeDays == 0 || notifyTimeDays == null)) {newNotifyTime = newNotifyTime/24}
         else if (notifyTimeDays && (newNotifyTime == 0 || newNotifyTime == null)) {newNotifyTime = notifyTimeDays}
         endif
         
         if(newNotifyTime != null) {
            state.DeVices[state.newNotifyTime].notifyTime = newNotifyTime
            state.remove("newNotifyTime")
		    app.removeSetting("newNotifyTime")
		    paragraph "<script>{changeSubmit(this)}</script>"
		    }
		 } 
       input name: "viewResfreshBool", type: "bool", title: getFormat("important2","<b>View or Change Variable Update Interval?</b><br>(Otherwaise Default is every 10min) &nbsp <small>Applies to all Active/On Device Variables</small>"), defaultValue:false, submitOnChange:true, style: 'margin-left:10px'   //// ver1.1.8
              if (viewResfreshBool) {
              input name: "autoRefresh", type: "enum", title: getFormat("important","Update in Minutes or Seconds after the hour?"), defaultValue:"Minutes", submitOnChange:true, options: ["Minutes","Seconds"], required: false, width: 3, style: 'margin-left:60px'
               if (autoRefresh == "Seconds") {input name: "refreshSeconds", type: "enum", title: getFormat("lessImportant",">> Select Update interval in Seconds.<br><small>Example:7:00:00, 7:00:30, 7:01:00,...&nbsp NOTE: Faster updates will increase hub load.</small>"), defaultValue: "30", submitOnChange: true,  options: ["5","10","15","20","30"], required: false, width: 4 
                 }
               else if (autoRefresh == "Minutes") {input name: "refreshMinutes", type: "enum", title: getFormat("lessImportant",">> Select Update interval in Minutes.<br><small>Example:7:00, 7:10, 7:20,...</small>"), defaultValue: "10", submitOnChange: true,  options: ["1","2","3","4","5","10","15","20","30"], required: false, width: 4 
                 }
               endif   
              } 
       input name: "pushBool", type: "bool", title: getFormat("important2","<b>Get push notificatuions per Device at selected trigger time?</b>"), defaultValue:false, submitOnChange:true, style: 'margin-left:10px'   //// ver1.2.4
         if (pushBool) {
           input "pushDevice", "capability.notification", title: "<b>Select device(s) to send notification to</b>", multiple: true, required: false, submitOnChange: true, width: 5, newLineAfter: true, style: 'margin-left:60px'       
           }  
    }
}
////////////////////////////////////////////////////////////////////  Notes Section ////////////////////////////////////////////////////////////////////        
   section(getFormat("header","Usage Notes:"), hideable: true, hidden: hide) {   //// ver1.1.5
      paragraph getFormat("lessImportant","<ul>"+   //// ver1.2.0
  "<b>MAIN</b>"+
      "<li>App Page will not refresh itself, hit in App Refresh button to see latest timers, counts, and states. Variables/Timers will update in background.</li>"+
	  "<li>Table will always display times in String Time format; XX:XX:XX. Timer Variables can be sent in Number or String format, depends on Check Box.</li>"+
      "<li>Only one capability used per child app; Switch On or Contact Open etc.. Dont change after initial set-up. Must make a seperate child app for different capability.</li>"+
      "<li>For Power, Temp, or Voltage you must click on the Tracker threshold number and enter new number for each device. Then above or below Chack Box</li>"+
      "<li>For Thermostat operation mode tracking, you can track 'heating' or 'cooling' modes depnding on in table Check Box.</li>"+ 
      "<li>Set up Reset Timers/Variables and/or counts by an in App schedule or by On state or by using a Remote Reset variable from RM.</li>"+ 
      "<li>Min/Max values are updated by an Open/Closed, On/Off, or State change cycle. Need to hit in app refresh button to see change or load app page.</li>"+ 
      "<li>Reset At Active?: Checking this box will reset the periodic time and update any variables for that device when it become on or active. Does not reset counts or cumulative.</li>"+                    
   "<b>VARIABLES (Excluding-Battery capability tracking)</b>" + 
      "<li>Variables must first be made in Settings/Hub Variables as a String variable for Time Format XX:XX:XX or Number variable total XXXX seconds format.</li>"+                    
      "<li>Set up variables to trigger things in RM (maybe webcore?) using Number format based on total seconds elapsed. Use as Trigger, Counter, etc..</li>"+
      "<li>Variable values can be set up in dashboard tile for viewing Periodic times, total Cumulative times, or Total On Counts.</li>"+
      "<li>Set up Variable refresh updates by an in App schedule or based on state. Otherwise Variables will always update when device turns off or page refresh.</li>"+
      "<li>Click on table link 'Select' to attach a variable to a Device. Click again to remove the variable.</li>"+
	  "<li>Set table 'Variable Data Type' checkbox to match the Devices variable type and store as Number or String. Use Number for Rule Machine use.</li>"+                     
   "<b>NOTIFICATIONS</b>"+
      "<li>Notifications can send a message to mobile device and/or a created virtual mobile device for viewing on dashboard.</li>"+
      "<li>Enter time the device is On/Active state to trigger a notification. Tracks Cumulative time. For Battery its based on Level.</li>"+ 
      "<li>If you dont reset Cumulative time in main table or dont check box the reset cumulative at expire you will get a notification every time device cycles.</li>"+ 
      "<li>Table shows Trigger elapsed time in days but you set it in Days + Hours by clicking the table value. Hour in Deciamls is OK. 0 Days is OK.</li>"+ 
      "</ul>")
      }
  }
}

////////////////////////////////////////////////////////////////////  MAIN PAGE TABLE  //////////////////////////////////////////////////////////////////
String displayTable() {
    if(state.reset) {  //// Reset Periodic only timer/counts per device,  Not for Battery devices
		def dev = DeVices.find{"$it.id" == state.reset}
        state.DeVices[state.reset].start = now()
        state.DeVices[state.reset].time = new Date().format("MM-dd-yyyy ${location.timeFormat == "12" ? "h:mm:ss a" : "HH:mm:ss"}")
		state.DeVices[state.reset].total = 0
        state.DeVices[state.reset].counts = 0   //// ver1.1.3
          if (capabilitySelect == "4") {state.DeVices[state.reset].min = dev.currentPower; state.DeVices[state.reset].max = dev.currentPower}  //// ver1.2.1
          else if (capabilitySelect == "5") {state.DeVices[state.reset].min = dev.currentTemperature; state.DeVices[state.reset].max = dev.currentTemperature}   
          else if (capabilitySelect == "6") {state.DeVices[state.reset].min = dev.currentVoltage; state.DeVices[state.reset].max = dev.currentVoltage} 
          else if (capabilitySelect == "10") {state.DeVices[state.reset].min = dev.currentHumidity; state.DeVices[state.reset].max = dev.currentHumidity} 
          else {state.DeVices[state.reset].min = 0; state.DeVices[state.reset].max = 0; state.DeVices[state.reset].timeMin = 0; state.DeVices[state.reset].timeMax = 0}      //// ver1.30
          endif        
        state.remove("reset")
	    }
    
    if(state.resetTotal) {  //// Reset Cumulative and Periodic timers per device      //// ver1.1.3       
		def dev = DeVices.find{"$it.id" == state.resetTotal}
        state.DeVices[state.resetTotal].start = now()    //// ver1.1.4  
        state.DeVices[state.resetTotal].time = new Date().format("MM-dd-yyyy ${location.timeFormat == "12" ? "h:mm:ss a" : "HH:mm:ss"}")
          if (capabilitySelect == "4") {state.DeVices[state.resetTotal].min = dev.currentPower; state.DeVices[state.resetTotal].max = dev.currentPower}  //// ver1.2.1
          else if (capabilitySelect == "5") {state.DeVices[state.resetTotal].min = dev.currentTemperature; state.DeVices[state.resetTotal].max = dev.currentTemperature}   
          else if (capabilitySelect == "6") {state.DeVices[state.resetTotal].min = dev.currentVoltage; state.DeVices[state.resetTotal].max = dev.currentVoltage} 
          else if (capabilitySelect == "8") {int lastCounts = state.DeVices[state.resetTotal].allTime/1000/86400; state.DeVices[state.resetTotal].counts = lastCounts; state.DeVices[state.resetTotal].checkBox4 = true  // Re-enable above threshold updates //// ver1.4.0   
               state.DeVices[state.resetTotal].min = dev.currentBattery; state.DeVices[state.resetTotal].max = dev.currentBattery
               state.DeVices[state.resetTotal].onTime = ""  // Clear last alarm reached time   
               //state.DeVices[state.resetTotal].lastTime = ""  // Clear last reporting                            
               }       
          else {state.DeVices[state.resetTotal].min = 0; state.DeVices[state.resetTotal].max = 0; state.DeVices[state.resetTotal].timeMin = 0; state.DeVices[state.resetTotal].timeMax = 0}      //// ver1.30
          endif  
        state.DeVices[state.resetTotal].total = 0
        if (capabilitySelect != "8") {state.DeVices[state.resetTotal].counts = 0}
        state.DeVices[state.resetTotal].allTime = 0
        state.remove("resetTotal")
	    }
    ////////////// Variable Auto Refresh Check Box 
    if(state.checkedBox2) {      //// ver1.1.3
        def dev = DeVices.find{"$it.id" == state.checkedBox2}  
	    state.DeVices[state.checkedBox2].checkBox2 = true
        state.remove("checkedBox2")
	    }
	else if(state.uncheckedBox2) {
        def dev = DeVices.find{"$it.id" == state.uncheckedBox2}  
	    state.DeVices[state.uncheckedBox2].checkBox2 = false
        state.remove("uncheckedBox2")
	    }
    endif
    ////////////// Remote Variable Reset Check Box
    if(state.checkedBox3) {      //// ver1.1.4
        def dev = DeVices.find{"$it.id" == state.checkedBox3}  
	    state.DeVices[state.checkedBox3].checkBox3 = true
        state.remove("checkedBox3")
	    }
	else if(state.uncheckedBox3) {
        def dev = DeVices.find{"$it.id" == state.uncheckedBox3}  
	    state.DeVices[state.uncheckedBox3].checkBox3 = false
        state.remove("uncheckedBox3")
	    }
    endif
    ////////////// Track above or below threshold, Power, Temp, Volts only. And thermostat modes
    if(state.checkedBox4) {      //// ver1.1.4
        def dev = DeVices.find{"$it.id" == state.checkedBox4}  
	    state.DeVices[state.checkedBox4].checkBox4 = true
        state.remove("checkedBox4")
	    }
	else if(state.uncheckedBox4) {
        def dev = DeVices.find{"$it.id" == state.uncheckedBox4}  
	    state.DeVices[state.uncheckedBox4].checkBox4 = false
        state.remove("uncheckedBox4")
	    }
    endif
    ////////////// Notification Check Box  (Duplicate from variables section)  ////  ver1.4.0
    if(state.checkedNotify) {       
        def dev = DeVices.find{"$it.id" == state.checkedNotify}  
	    state.DeVices[state.checkedNotify].notifyBox = true
        state.remove("checkedNotify")
	    }
	else if(state.uncheckedNotify) {
        def dev = DeVices.find{"$it.id" == state.uncheckedNotify}  
	    state.DeVices[state.uncheckedNotify].notifyBox = false
        state.remove("uncheckedNotify")
	    }
    endif
    
	String str = "<script src='https://code.iconify.design/iconify-icon/1.0.0/iconify-icon.min.js'></script>" +   //////// font-weight: bold !important; word-wrap: break-word !important; white-space: normal!important
         "<style>.mdl-data-table tbody tr:hover{background-color:inherit} .tstat-col td, .tstat-col th {font-size:15px !important; padding:2px 4px;text-align:center} + .tstat-col td {font-size:13px  }" +
         "</style><div style='overflow-x:auto'><table class='mdl-data-table tstat-col' style=';border:3px solid black'>" +
         "<thead><tr style='border-bottom:2px solid black'><th style='border-right:2px solid black'>$capability<br>Device</th>"
		                    		            
        if (capabilitySelect == "4" || capabilitySelect == "5" || capabilitySelect == "6" || capabilitySelect == "10") { str +=    //// ver1.1.7 
            "<th style='width: 60px !important'>State</th>" +
            "<th>Periodic<br>Active<br>OnTime</th>" +    
            "<th>On<br>Counts</th>" +
            "<th>Reset</th>" +
            "<th style='width: 100px !important'>Last<br>OnTime</th>" +
            "<th style='width: 100px !important'>Last<br>Reset</th>" +         
            "<th>Reset<br>At<br>Active?</th>" +   //// ver1.1.3    
            "<th>Min<br>State</th>" +   "<th>Max<br>State</th>" +    //// ver1.3.0 
            "<th>Tracker<br>Thresh<br>hold </th>" + 
            "<th>Above<br>Thresh<br>hold? </th>" +
            "<th style='border-right:3px solid black'>Allow<br>Remote<br>Reset?</th>" +
            "<th>${inDaysCBool ? "Cumulative<br>Total Days" : "Cumulative<br>Total Time"}</th>" + 
            "<th style='border-right:3px solid black'>Reset<br>Total</th>" + 
            "<th>Has<br>Variable<br>Linked?</th></tr></thead>"    
            }  
        else if (capabilitySelect == "7") { str +=  //// ver1.1.8 
            "<th style='width: 60px !important'>State</th>" +
            "<th>Periodic<br>Active<br>OnTime</th>" +    
            "<th>On<br>Counts</th>" +
            "<th>Reset</th>" +
            "<th style='width: 100px !important'>Last<br>OnTime</th>" +
            "<th style='width: 100px !important'>Last<br>Reset</th>" +         
            "<th>Reset<br>At<br>Active?</th>" +   //// ver1.1.3    
            "<th>Min<br>Active</th>" +   "<th>Max<br>Active</th>" +  
            "<th>Track<br>Heat or<br>Cool? </th>" +
            "<th style='border-right:3px solid black'>Allow<br>Remote<br>Reset?</th>"  +
            "<th>${inDaysCBool ? "Cumulative<br>Total Days" : "Cumulative<br>Total Time"}</th>" + 
            "<th style='border-right:3px solid black'>Reset<br>Total</th>" +
            "<th>Has<br>Variable<br>Linked?</th></tr></thead>"    
            }
        else if (capabilitySelect == "8") { str +=   //// ver1.4.0
            "<th style='width: 60px !important'>Current<br>Level%</th>" +
            "<th style='width: 95px !important'>${inDaysCBool ? "Days Above<br>Alarm Level" : "Time Above<br>Alarm Level"}</th>" +
            "<th style='width: 95px !important'>Date<br>Reached<br>Alarm Level</th>" +
            //"<th padding-left: 0px !important'>Last<br>Reporting</th>" +
            "<th style='width: 95px !important'>Last<br>Reporting</th>" +    
            "<th style='width: 95px !important'>Last<br>Reset</th>"+    
            "<th>Min<br>Level</th>" +    "<th>Max<br>Level</th>" +     
            "<th style='width: 60px !important'>Alarm<br>Notify<br>Level%</th>" + 
            "<th>Notify?</th>" +
            "<th>Since<br>Last<br>Report</th>" +    
            "<th>${inDaysCBool ? "Cumulative<br>Total Days" : "Cumulative<br>Total Time"}</th>" + 
            "<th style='width: 60px !important'>Last<br>Total<br>Days</th>" +    
            "<th style='border-right:3px solid black'>Reset<br>Device</th></tr></thead>"
            }                               
        else { str +=  //// Capabilitys 1,2,3,9
            "<th style='width: 60px !important'>State</th>" +
            "<th>Periodic<br>Active<br>OnTime</th>" +    
            "<th>On<br>Counts</th>" +
            "<th>Reset</th>" +
            "<th style='width: 100px !important'>Last<br>OnTime</th>" +
            "<th style='width: 100px !important'>Last<br>Reset</th>" +      
            "<th>Reset<br>At<br>Active?</th>" + 
            "<th>Min<br>Active</th>" +     "<th>Max<br>Active</th>" +
            "<th style='border-right:3px solid black'>Allow<br>Remote<br>Reset?</th>" +
            "<th>${inDaysCBool ? "Cumulative<br>Total Days" : "Cumulative<br>Total Time"}</th>" + //// ver1.1.6
            "<th style='border-right:3px solid black'>Reset<br>Total</th>" + //// ver1.1.0  
            "<th>Has<br>Variable<br>Linked?</th></tr></thead>"    
            }
    
   DeVices.sort{it.displayName.toLowerCase()}.each {dev ->
        String thisVar = state.DeVices["$dev.id"].var
        String thisVarC = state.DeVices["$dev.id"].varC   //// ver1.1.4
        String thisVarCT = state.DeVices["$dev.id"].varCT   //// ver1.1.5
        String thisThresh = state.DeVices["$dev.id"].thresh   //// ver1.1.8
        String thisVarMax = state.DeVices["$dev.id"].varMax   //// ver1.3.4
        int counts = state.DeVices["$dev.id"].counts   //// ver1.1.5
       	String timeMax = state.DeVices["$dev.id"].timeMax   //// ver1.3.4 
        String max = state.DeVices["$dev.id"].max   //// ver1.3.4 
          if (state.DeVices["$dev.id"].var || state.DeVices["$dev.id"].varC || state.DeVices["$dev.id"].varCT || state.DeVices["$dev.id"].varMax) {attachVarBool = true}    //// ver1.2.2
          else attachVarBool = false
        // log.warn "REAL App: ${app.label}: reportDays= ${state.DeVices["$dev.id"].reportDays},   reportDays int= ${reportDays}"
        
        ////////// Active/On Total Time Calc
        int total = state.DeVices["$dev.id"].total / 1000 
        int intTime = total  //// Added ver1.1.0
        int hours = total / 3600
        total = total % 3600
	    int mins = total / 60
	    int secs = total % 60
	    String time = "$hours:${mins < 10 ? "0" : ""}$mins:${secs < 10 ? "0" : ""}$secs"
            float timeDays = (intTime / 86400) as float //// ver1.4.0
            if (inDaysCBool && capabilitySelect == "8") {time = String.format("%.3f", timeDays)} // For table Only   
            else {time = "$hours:${mins < 10 ? "0" : ""}$mins:${secs < 10 ? "0" : ""}$secs"}  // For table Only
         
        ////////// Total All Cumalative Time Calc   //// ver1.1.3
        int allTotal = state.DeVices["$dev.id"].allTime /1000
        int intAllTime = allTotal
        int allHours = allTotal / 3600  
	    allTotal = allTotal % 3600
	    int allMins = allTotal / 60
	    int allSecs = allTotal % 60
        String allTime = "$allHours:${allMins < 10 ? "0" : ""}$allMins:${allSecs < 10 ? "0" : ""}$allSecs"
            float AllTimeDays = (intAllTime / 86400) as float //// ver1.1.6
            if (inDaysCBool) {allTimeT = String.format("%.3f", AllTimeDays)} // For table Only  //// ver1.1.6
            else {allTimeT = "$allHours:${allMins < 10 ? "0" : ""}$allMins:${allSecs < 10 ? "0" : ""}$allSecs"}  // For table Only
                       
        if (thisVar) {state.DeVices["$dev.id"].checkBox1 ? setGlobalVar(thisVar, intTime) : setGlobalVar(thisVar, time)}
        if (thisVarC) {state.DeVices["$dev.id"].checkBox1 ? setGlobalVar(thisVarC, intAllTime) : setGlobalVar(thisVarC, allTime)}  //// ver1.1.4 
        if (thisVarCT) {setGlobalVar(thisVarCT, counts)}  //// Added ver1.1.5
          if ((capabilitySelect == "4" || capabilitySelect == "5" || capabilitySelect == "6" || capabilitySelect == "8") && thisVarMax ) {setGlobalVar(thisVarMax, max)}  //// ver1.3.4  
          else if (thisVarMax) {setGlobalVar(thisVarMax, timeMax)} 
          endif                                                                                                     
        if (logEnableBool) {log.info "App: ${app.label}: Page Refresh, Device- ${dev}, Var *${thisVar}* to ${time} or ${intTime}sec, Cumulative Var *${thisVarC}* ${allTime}time, ${AllTimeDays}days, ${intAllTime}sec, Counts Var *${thisVarC}* Counts=${counts}"}  //// Added ver1.1.3
                
        String devLink = "<a href='/device/edit/$dev.id' target='_blank' title='Open Device Page for $dev'>$dev"
		String reset = buttonLink("d$dev.id", "<iconify-icon icon='bx:reset'></iconify-icon>", "black", "23px")
        String resetTotal = buttonLink("t$dev.id", "<iconify-icon icon='bx:reset'></iconify-icon>", "black", "23px")  //// ver1.1.3
        String varThresh = thisThresh ? buttonLink("q$dev.id", thisThresh, "purple") : buttonLink("u$dev.id", "Select", "green")  //// ver1.1.8
        
        String checkedBox2T = (state.DeVices["$dev.id"].checkBox2) ? buttonLink("e$dev.id", "<iconify-icon icon='material-symbols:check-box'></iconify-icon>", "green", "23px") : buttonLink("f$dev.id", "<iconify-icon icon='material-symbols:check-box-outline-blank'></iconify-icon>", "black", "23px")   //// ver1.1.3
        String checkedBox3T = (state.DeVices["$dev.id"].checkBox3) ? buttonLink("g$dev.id", "<iconify-icon icon='material-symbols:check-box'></iconify-icon>", "green", "23px") : buttonLink("h$dev.id", "<iconify-icon icon='material-symbols:check-box-outline-blank'></iconify-icon>", "black", "23px")   //// ver1.1.4
        String checkedBox4T = (state.DeVices["$dev.id"].checkBox4) ? buttonLink("o$dev.id", "<iconify-icon icon='icon-park-solid:up-c'></iconify-icon>", "#CC5500", "23px") : buttonLink("p$dev.id", "<iconify-icon icon='icon-park-solid:down-c'></iconify-icon>", "SteelBlue", "23px")   //// ver1.1.8
        String checkedNotifyT = (state.DeVices["$dev.id"].notifyBox) ? buttonLink("s$dev.id", "<iconify-icon icon='material-symbols:check-box'></iconify-icon>", "green", "23px") : buttonLink("c$dev.id", "<iconify-icon icon='material-symbols:check-box-outline-blank'></iconify-icon>", "black", "23px")   //// ver1.4.0
                
        str += "<tr style='color:black'><td style='border-right:2px solid black'>$devLink</td>" 
		if (capabilitySelect == "1") { str += "<td style='font-weight:bold; color:${dev.currentSwitch == "on" ? "green" : "red"}'title='State $dev'>$dev.currentSwitch </td>" + "<td style='font-weight:bold; color:${dev.currentSwitch == "on" ? "green" : "red"}'>$time</td>"}
        else if (capabilitySelect == "2") {str += "<td style='font-weight:bold;color:${dev.currentContact == "open" ? "green" : "red"}'title='State $dev'>$dev.currentContact</td>" + "<td style='font-weight:bold; color:${dev.currentContact == "open" ? "green" : "red"}'>$time</td>"}
        else if (capabilitySelect == "3") {str += "<td style='font-weight:bold;color:${dev.dev.currentContact == "closed" ? "green" : "red"}'title='State $dev'>$dev.currentContact</td>" + "<td style='font-weight:bold; color:${dev.currentContact == "closed" ? "green" : "red"}'>$time</td>"} 
        else if (capabilitySelect == "4" && state.DeVices["$dev.id"].checkBox4) {str += "<td style='font-weight:bold; color:${dev.currentPower >= state.DeVices["$dev.id"].thresh ? "green" : "red"}'title='State $dev'>$dev.currentPower</td>" + "<td style='font-weight:bold; color:${dev.currentPower >= state.DeVices["$dev.id"].thresh ? "green" : "red"}'>$time</td>"} 
        else if (capabilitySelect == "4" && state.DeVices["$dev.id"].checkBox4 == false) {str += "<td style='font-weight:bold; color:${dev.currentPower >= state.DeVices["$dev.id"].thresh ? "red" : "green"}'title='State $dev'>$dev.currentPower</td>" + "<td style='font-weight:bold; color:${dev.currentPower >= state.DeVices["$dev.id"].thresh ? "red" : "green"}'>$time</td>"} 
        else if (capabilitySelect == "5" && state.DeVices["$dev.id"].checkBox4) {str += "<td style='font-weight:bold; color:${dev.currentTemperature >= state.DeVices["$dev.id"].thresh ? "green" : "red"}'title='State $dev'>$dev.currentTemperature</td>" + "<td style='font-weight:bold; color:${dev.currentTemperature >= state.DeVices["$dev.id"].thresh ? "green" : "red"}'>$time</td>" }   //// ver1.1.7
        else if (capabilitySelect == "5" && state.DeVices["$dev.id"].checkBox4 == false) {str += "<td style='font-weight:bold; color:${dev.currentTemperature >= state.DeVices["$dev.id"].thresh ? "red" : "green"}'title='State $dev'>$dev.currentTemperature</td>" + "<td style='font-weight:bold; color:${dev.currentTemperature >= state.DeVices["$dev.id"].thresh ? "red" : "green"}'>$time</td>"} 
        else if (capabilitySelect == "6" && state.DeVices["$dev.id"].checkBox4) {str += "<td style='font-weight:bold; color:${dev.currentVoltage >= state.DeVices["$dev.id"].thresh ? "green" : "red"}'title='State $dev'>$dev.currentVoltage</td>" + "<td style='font-weight:bold; color:${dev.currentVoltage >= state.DeVices["$dev.id"].thresh ? "green" : "red"}'>$time</td>" } 
        else if (capabilitySelect == "6" && state.DeVices["$dev.id"].checkBox4 == false) {str += "<td style='font-weight:bold; color:${dev.currentVoltage >= state.DeVices["$dev.id"].thresh ? "red" : "green"}'title='State $dev'>$dev.currentVoltage</td>" + "<td style='font-weight:bold; color:${dev.currentVoltage >= state.DeVices["$dev.id"].thresh ? "red" : "green"}'>$time</td>"} 
        else if (capabilitySelect == "7" && state.DeVices["$dev.id"].checkBox4) {str += "<td style='font-weight:bold; color:${dev.currentThermostatOperatingState == "heating" ? "#CC5500" : "SteelBlue"}'title='State $dev'>$dev.currentThermostatOperatingState</td>" + "<td style='font-weight:bold; color:${dev.currentThermostatOperatingState == "heating" ? "green" : "red"}'>$time</td>"}  
        else if (capabilitySelect == "7" && state.DeVices["$dev.id"].checkBox4 == false) {str += "<td style='font-weight:bold; color:${dev.currentThermostatOperatingState == "cooling" ? "SteelBlue" : "#CC5500"}'title='State $dev'>$dev.currentThermostatOperatingState</td>" + "<td style='font-weight:bold; color:${dev.currentThermostatOperatingState == "cooling" ? "green" : "red"}'>$time</td>"}  //// ver1.1.8
        else if (capabilitySelect == "8") {str += "<td style='font-weight:bold; color:${dev.currentBattery > state.DeVices["$dev.id"].thresh ? "green" : "red"}'title='State $dev'>$dev.currentBattery</td>" + "<td style='font-weight:bold; color:${dev.currentBattery > state.DeVices["$dev.id"].thresh ? "green" : "red"}'>$time</td>"} 
        else if (capabilitySelect == "9") {str += "<td style='font-weight:bold; color:${dev.currentMotion == "active" ? "green" : "red"}'title='State $dev'>$dev.currentMotion</td>" + "<td style='font-weight:bold; color:${dev.currentMotion == "active" ? "green" : "red"}'>$time</td>"}  //// ver1.4.5
        else if (capabilitySelect == "10" && state.DeVices["$dev.id"].checkBox4) {str += "<td style='font-weight:bold; color:${dev.currentHumidity >= state.DeVices["$dev.id"].thresh ? "green" : "red"}'title='State $dev'>$dev.currentHumidity</td>" + "<td style='font-weight:bold; color:${dev.currentHumidity >= state.DeVices["$dev.id"].thresh ? "green" : "red"}'>$time</td>" }   //// ver1.4.5 
        else if (capabilitySelect == "10" && state.DeVices["$dev.id"].checkBox4 == false) {str += "<td style='font-weight:bold; color:${dev.currentHumidity >= state.DeVices["$dev.id"].thresh ? "red" : "green"}'title='State $dev'>$dev.currentHumidity</td>" + "<td style='font-weight:bold; color:${dev.currentHumidity >= state.DeVices["$dev.id"].thresh ? "red" : "green"}'>$time</td>"} 
       endif 
        
        if (capabilitySelect == "4" || capabilitySelect == "5" || capabilitySelect == "6" || capabilitySelect == "10") { str +=  //// ver1.1.7
            "<td style='font-weight:bold' title='Total On Counts' >${state.DeVices["$dev.id"].counts}</td>" +
            "<td title='Reset for $dev Periodic time' style='padding:0px 0px'>$reset</td>" +
            "<td title='Last time went On for $dev'>${state.DeVices["$dev.id"].onTime ?: ""} </td>" +
            "<td title='Last Reset time for $dev'>${state.DeVices["$dev.id"].time ?: ""} </td>" +    
            "<td title='Check Box Restart this Device timer when becomes On/Active and update variables. Does not reset Culumative time.'>$checkedBox2T</td>" +   //// ver1.1.3
            "<td title='Minumum Value recorded'>${state.DeVices["$dev.id"].min}</td>" + 
            "<td title='Maximum Value recorded'>${state.DeVices["$dev.id"].max}</td>" +
            "<td title='${thisThresh ? "Click to Change Threshold Number" : "Select Threshold"}'>$varThresh</td>" +       
            "<td title='Click, Track Above threhold number(up Arrow), otherwise Track below(down arrow). DO NOT change after initial set-up.'>$checkedBox4T</td>" +
            "<td style='border-right:3px solid black' title='Allow Remote reset for this device'>$checkedBox3T</td>"  + //// ver1.1.4 
            "<td style='font-weight:bold' title='${inDaysCBool ? "Total Cumulative Time in Days since last Total reset" : "Total Cumulative Time since last Totalreset"}'>$allTimeT</td>" +
            "<td style='border-right:3px solid black' title='Reset Cumulative Total for $dev' style='padding:0px 0px'>$resetTotal</td>" +
            "<td title='Is there a variable attached to this device? $dev' style='padding:0px 0px'>$attachVarBool</td></tr>"    
            }
        else if (capabilitySelect == "7") { str += //// ver1.1.9
            "<td style='font-weight:bold' title='Total On Counts' >${state.DeVices["$dev.id"].counts}</td>" +
            "<td title='Reset for $dev Periodic time' style='padding:0px 0px'>$reset</td>" +
            "<td title='Last time went On for $dev'>${state.DeVices["$dev.id"].onTime ?: ""} </td>" +
            "<td title='Last Reset time for $dev'>${state.DeVices["$dev.id"].time ?: ""} </td>" +    
            "<td title='Check Box Restart this Device timer when becomes On/Active and update variables. Does not reset Culumative time.'>$checkedBox2T</td>" +  //// ver1.1.3
            "<td title='Minumum On Time recorded'>${state.DeVices["$dev.id"].timeMin}</td>" + 
            "<td title='Maximum On Time recorded'>${state.DeVices["$dev.id"].timeMax}</td>" +
            "<td title='Click, Track Heating state(up arrow), otherwise Track Cooling state(down arrow). DO NOT change after initial set-up.'>$checkedBox4T</td>" +
            "<td style='border-right:3px solid black' title='Allow Remote reset for this device'>$checkedBox3T</td>" + //// ver1.1.4 
            "<td style='font-weight:bold' title='${inDaysCBool ? "Total Cumulative Time in Days since last reset" : "Total Cumulative Time since last reset"}'>$allTimeT</td>" +
            "<td style='border-right:3px solid black' title='Reset Cumulative Total for $dev' style='padding:0px 0px'>$resetTotal</td>"  +
            "<td title='Is there a variable attached to this device? $dev' style='padding:0px 0px'>$attachVarBool</td></tr>"    
            }
        else if (capabilitySelect == "8") {
             int reportDays = state.DeVices["$dev.id"].reportDays; str += //// ver1.4.0
            "<td title='Date when alarm threshold level was reached for $dev'>${state.DeVices["$dev.id"].onTime ?: ""} </td>" +
            "<td title='Last Date Battery reported level for $dev'>${state.DeVices["$dev.id"].lastTime ?: ""} </td>" +    
            "<td title='Last Reset time for $dev'>${state.DeVices["$dev.id"].time ?: ""} </td>" +    
            "<td title='Minumum Level recorded'>${state.DeVices["$dev.id"].min}</td>" + 
            "<td title='Maximum Level recorded'>${state.DeVices["$dev.id"].max}</td>" +
            "<td style='font-weight:bold' title='${thisThresh ? "Click to Change Alarm/Notify Lower Battery Level, do not change unless you plan to hit reset, times will get messed up" : "Select Level"}'>$varThresh</td>" +           
            "<td title='Check Box to send notifications for this Device when level reach. Must set up Advanced Options below with Mobile device'>$checkedNotifyT</td>" +
            "<td title='Total Days since battery last reported'>$reportDays</td>" +    
            "<td style='font-weight:bold' title='${inDaysCBool ? "Total Cumulative Time in Days since last Total reset" : "Total Cumulative Time since last Total reset"}'>$allTimeT</td>" +
            "<td title='Total Days last time battery lasted before changing'>${state.DeVices["$dev.id"].counts}</td>" +    
            "<td style='border-right:3px solid black' title='Reset all times and Min/Max for $dev' style='padding:0px 0px'>$resetTotal</td>"
            }
        else  {str +=   //// Capabilitys 1,2,3,9
            "<td style='font-weight:bold' title='Total On Counts' >${state.DeVices["$dev.id"].counts}</td>" +
            "<td title='Reset for $dev Periodic time' style='padding:0px 0px'>$reset</td>" +
            "<td title='Last time went On for $dev'>${state.DeVices["$dev.id"].onTime ?: ""} </td>" +
            "<td title='Last Reset time for $dev'>${state.DeVices["$dev.id"].time ?: ""} </td>" +    
            "<td title='Check Box Restart this Device timer when becomes On/Active and update variables. Does not reset Culumative time.'>$checkedBox2T</td>" +
            "<td title='Minumum On Time recorded'>${state.DeVices["$dev.id"].timeMin}</td>" + 
            "<td title='Maximum On Time recorded'>${state.DeVices["$dev.id"].timeMax}</td>" +
            "<td style='border-right:3px solid black' title='Allow Remote reset for this device'>$checkedBox3T</td>" +  //// ver1.1.4 
            "<td style='font-weight:bold' title='${inDaysCBool ? "Total Cumulative Time in Days since last Total reset" : "Total Cumulative Time since last Total reset"}'>$allTimeT</td>" +
            "<td style='border-right:3px solid black' title='Reset Cumulative Total for $dev' style='padding:0px 0px'>$resetTotal</td>" +
            "<td title='Is there a variable attached to this device? $dev' style='padding:0px 0px'>$attachVarBool</td></tr>"    
            }
        endif
     } 
   	str += "</table></div>"
    if (formatBool) {str += "<script type='text/javascript'>\$(document).ready(function() { \$('#main-table').DataTable( {paging: false} ); } );</script>"}  //// ver1.2.0
	str
 }

String buttonLink(String btnName, String linkText, color = SteelBlue, font = "13px") {
   "<div class='form-group'><input type='hidden' name='${btnName}.type' value='button'></div><div><div class='submitOnChange' onclick='buttonClick(this)' style='color:$color;cursor:pointer;font-size:$font'>$linkText</div></div><input type='hidden' name='settings[$btnName]' value=''>"
}

////////////////////////////////////////////////////////////////////  VARIABLES TABLE  /////////////////////////////////////////////////////////////////////
String variablesTable() {  //// Ver 1.2.2
    ////////////// Variable String or Number Check Box
    if(state.checkedBox1) {       //// ver1.1.3
        def dev = DeVices.find{"$it.id" == state.checkedBox1}  
	    state.DeVices[state.checkedBox1].checkBox1 = true
        state.remove("checkedBox1")
	    }
	else if(state.uncheckedBox1) {
        def dev = DeVices.find{"$it.id" == state.uncheckedBox1}  
	    state.DeVices[state.uncheckedBox1].checkBox1 = false
        state.remove("uncheckedBox1")
	    }
    endif
    ////////////// Notification Check Box
    if(state.checkedNotify) {       //// ver1.2.4
        def dev = DeVices.find{"$it.id" == state.checkedNotify}  
	    state.DeVices[state.checkedNotify].notifyBox = true
        state.remove("checkedNotify")
	    }
	else if(state.uncheckedNotify) {
        def dev = DeVices.find{"$it.id" == state.uncheckedNotify}  
	    state.DeVices[state.uncheckedNotify].notifyBox = false
        state.remove("uncheckedNotify")
	    }
    endif
   ////////////// Notification Reset Cumulative Time Box
    if(state.checkedNotifyReset) {       //// ver1.3.0
        def dev = DeVices.find{"$it.id" == state.checkedNotifyReset}  
	    state.DeVices[state.checkedNotifyReset].notifyReset = true
        state.remove("checkedNotifyReset")
	    }
	else if(state.uncheckedNotifyReset) {
        def dev = DeVices.find{"$it.id" == state.uncheckedNotifyReset}  
	    state.DeVices[state.uncheckedNotifyReset].notifyReset = false
        state.remove("uncheckedNotifyReset")
	    }
    endif 
    paragraph "Click 'Select' to attach a Variable to track that Devices parameter. Click again to change. Max is String format only."    
	String str = "<script src='https://code.iconify.design/iconify-icon/1.0.0/iconify-icon.min.js'></script>"   //////// font-weight: bold !important; word-wrap: break-word !important; white-space: normal!important
        str += "<style>.mdl-data-table tbody tr:hover{background-color:inherit} .tstat-col td, .tstat-col th {font-size:15px !important; padding:2px 6px;text-align:center} + .tstat-col td {font-size:13px  }" +
        "</style><div style='overflow-x:auto'><table class='mdl-data-table tstat-col' style=';border:3px solid black'>" +
        "<thead><tr style='border-bottom:2px solid black'><th style='border-right:2px solid black'>Device</th>" +
		"<th>Periodic<br>Timer</th>" +
        "<th>Total<br>Counts</th>" +
        "<th>Max On<br>or State</th>" +    
        "<th>Cumulative<br>Timer</th>"    //// ver1.1.4  
        
            if (pushBool) {str +=    //// ver1.2.4  
            "<th style='border-right:3px solid black'>Time Variables<br>String or Number?</th>" +   
            "<th>Send <br>Notifications?</th>" +      
            "<th>Notify Trigger<br>@ Time (days)</th>" +     
            "<th>Reset Cumulative<br>Time at Trigger?</th></tr></thead>"                  
             }
            else str += "<th style='border-right:3px solid black'>Time Variables<br>String or Number?</th></tr></thead>"     //// ver1.1.3
            endif
        
  if(DeVices) {   //// ver1.2.2
     DeVices.sort{it.displayName.toLowerCase()}.each {dev ->
        String thisVar = state.DeVices["$dev.id"].var
        String thisVarC = state.DeVices["$dev.id"].varC   //// ver1.1.4
        String thisVarCT = state.DeVices["$dev.id"].varCT   //// ver1.1.5
        String thisVarMax = state.DeVices["$dev.id"].varMax   //// ver1.3.4 
        String thisNotifyTime = String.format("%.3f", state.DeVices["$dev.id"].notifyTime)   //// ver1.2.4
         
        String devLink = "<a href='/device/edit/$dev.id' target='_blank' title='Open Device Page for $dev'>$dev"
		String var = thisVar ? buttonLink("r$dev.id", thisVar, "purple") : buttonLink("n$dev.id", "Select", "green")
        String varC = thisVarC ? buttonLink("y$dev.id", thisVarC, "purple") : buttonLink("z$dev.id", "Select", "green")  //// ver1.1.4
        String varCT = thisVarCT ? buttonLink("v$dev.id", thisVarCT, "purple") : buttonLink("w$dev.id", "Select", "green")  //// ver1.1.5
        String varMax = thisVarMax ? buttonLink("l$dev.id", thisVarMax, "purple") : buttonLink("m$dev.id", "Select", "green")  //// ver1.3.4 
        String notifyTime = buttonLink("i$dev.id", thisNotifyTime, "purple")  //// ver1.2.4  
        String checkedBox1T = (state.DeVices["$dev.id"].checkBox1) ? buttonLink("a$dev.id", "<iconify-icon icon='material-symbols:check-box'></iconify-icon>", "green", "23px") : buttonLink("b$dev.id", "<iconify-icon icon='material-symbols:check-box-outline-blank'></iconify-icon>", "black", "23px")   //// ver1.1.3
        String checkedNotifyT = (state.DeVices["$dev.id"].notifyBox) ? buttonLink("s$dev.id", "<iconify-icon icon='material-symbols:check-box'></iconify-icon>", "green", "23px") : buttonLink("c$dev.id", "<iconify-icon icon='material-symbols:check-box-outline-blank'></iconify-icon>", "black", "23px")   //// ver1.2.4
        String checkedNotifyResetT = (state.DeVices["$dev.id"].notifyReset) ? buttonLink("j$dev.id", "<iconify-icon icon='material-symbols:check-box'></iconify-icon>", "green", "23px") : buttonLink("k$dev.id", "<iconify-icon icon='material-symbols:check-box-outline-blank'></iconify-icon>", "black", "23px")   //// ver1.2.4
         
        str += "<tr style='color:black'><td style='border-right:2px solid black'>$devLink</td>"+ 
		"<td title='${thisVar ? "Deselect $thisVar" : "Select Hub Variable"}'>$var</td>" +
        "<td title='${thisVarCT ? "Deselect $thisVar" : "Select Hub NUMBER Variable"}'>$varCT</td>" +   //// ver1.1.5
        "<td title='${thisVarMax ? "Deselect $thisVarMax" : "Select Hub STRING Variable"}'>$varMax</td>" +   //// ver1.1.5    
        "<td title='${thisVarC ? "Deselect $thisVarC" : "Select Hub Variable"}'>$varC</td>"    //// ver1.1.4
            
            if (pushBool) {str +=    //// ver1.2.4  
            "<td style='border-right:3px solid black' title='Check Box to update Time variable in Number format XXXXsec, otherwise String time format XX:XX:XX'>$checkedBox1T</td>" +  //// ver1.1.3     
            "<td title='Check Box to send notifications about this device, must enter time'>$checkedNotifyT</td>" +       
            "<td title='Click to Select Notification duration time'>$notifyTime</td>" +     
            "<td title='Reset Cumulative time when Notify Time expires?'>$checkedNotifyResetT</td></tr>"                
            }
            else str += "<td style='border-right:3px solid black' title='Check Box to update Time variable in Number format XXXXsec, otherwise String time format XX:XX:XX'>$checkedBox1T</td></tr>"  //// ver1.1.3 
            endif            
     }
   }
  str += "</table></div>"
  str
 }

/////////////////////////////////////////////////////////////// SCHEDULES AND SUBSCRIBES //////////////////////////////////////////////////////////////
void initialize() {
    if (capabilitySelect == "1") {
	    subscribe(DeVices, "switch.on", onHandler)
	    subscribe(DeVices, "switch.off", offHandler)
    }
    else if (capabilitySelect == "2") {
	    subscribe(DeVices, "contact.open", onHandler)
        subscribe(DeVices, "contact.closed", offHandler)
    }
    else if (capabilitySelect == "3") {  //// ver1.0.1 
	    subscribe(DeVices, "contact.open", offHandler)
	    subscribe(DeVices, "contact.closed", onHandler)
    }
    else if (capabilitySelect == "4") {  //// ver1.0.2
        subscribe(DeVices, "power", powerHandler) 
    }    
    else if (capabilitySelect == "5") {  //// ver1.1.7
        subscribe(DeVices, "temperature", tempHandler) 
    }
    else if (capabilitySelect == "6") {  //// ver1.1.7
        subscribe(DeVices, "voltage", voltHandler) 
    }
    else if (capabilitySelect == "7") {  //// ver1.1.8
	    subscribe(DeVices, "thermostatOperatingState", thermostatHandler)
    } 
    else if (capabilitySelect == "8") {  //// ver1.4.0
        subscribe(DeVices, "battery", batHandler)  
    }
    else if (capabilitySelect == "9") {  //// ver1.4.5
	    subscribe(DeVices, "motion.active", onHandler)
        subscribe(DeVices, "motion.inactive", offHandler)
    }
    else if (capabilitySelect == "10") {  //// ver1.4.5
        subscribe(DeVices, "humidity", humidHandler) 
    }
	endif  
        
    if (remoteResetVarBool && resetVar) {
        subscribe(location, "variable:${resetVar}.true", resetTimers)
        setGlobalVar(resetVar, false)
        }
    
    if (autoResetBool && resetDay == "Everyday") { schedule("2 0 ${resetHour} ? * * *", dayResetDecider) } // Add 2sec after the hour so it doesnt potentially confict with Auto refresh at same time  //// Added ver1.0.1
    else if (autoResetBool) { schedule("2 0 ${resetHour} ? * ${resetDay} *", dayResetDecider) } //// ver1.3.3
    endif
    
    if (autoRefresh == "Minutes") { schedule("0 */${refreshMinutes} * ? * * *", refreshHandler) }   //// ver1.0.3
    else if (autoRefresh == "Seconds") { schedule("*/${refreshSeconds} * * ? * * *", refreshHandler) }   //// ver1.1.2
    endif
} 

/////////////////////////////////////////////////////////////////// HANDLERS ///////////////////////////////////////////////////////////////
def powerHandler(evt) {  //// ver1.1.6
    if (evt.device.currentPower < state.DeVices[evt.device.id].min) {state.DeVices[evt.device.id].min = evt.device.currentPower }  //// ver 1.2.1
    if (evt.device.currentPower > state.DeVices[evt.device.id].max) {state.DeVices[evt.device.id].max = evt.device.currentPower }  
    if (state.DeVices[evt.device.id].checkBox4 && evt.device.currentPower >= state.DeVices[evt.device.id].thresh && state.DeVices[evt.device.id].state == "off") {state.DeVices[evt.device.id].state = "on"; onHandler(evt)}
    else if (state.DeVices[evt.device.id].checkBox4 && evt.device.currentPower < state.DeVices[evt.device.id].thresh && state.DeVices[evt.device.id].state == "on") {state.DeVices[evt.device.id].state = "off"; offHandler(evt)}
    else if (state.DeVices[evt.device.id].checkBox4 == false && evt.device.currentPower < state.DeVices[evt.device.id].thresh && state.DeVices[evt.device.id].state == "off") {state.DeVices[evt.device.id].state = "on"; onHandler(evt)}
    else if (state.DeVices[evt.device.id].checkBox4 == false && evt.device.currentPower >= state.DeVices[evt.device.id].thresh && state.DeVices[evt.device.id].state == "on") {state.DeVices[evt.device.id].state = "off"; offHandler(evt)}
    endif
}
def tempHandler(evt) {  //// ver1.1.7
    if (evt.device.currentTemperature < state.DeVices[evt.device.id].min) {state.DeVices[evt.device.id].min = evt.device.currentTemperature }  //// ver 1.2.1
    if (evt.device.currentTemperature > state.DeVices[evt.device.id].max) {state.DeVices[evt.device.id].max = evt.device.currentTemperature }  
    if (state.DeVices[evt.device.id].checkBox4 && evt.device.currentTemperature >= state.DeVices[evt.device.id].thresh && state.DeVices[evt.device.id].state == "off") {state.DeVices[evt.device.id].state = "on"; onHandler(evt)}
    else if (state.DeVices[evt.device.id].checkBox4 && evt.device.currentTemperature < state.DeVices[evt.device.id].thresh && state.DeVices[evt.device.id].state == "on") {state.DeVices[evt.device.id].state = "off"; offHandler(evt)}
    else if (state.DeVices[evt.device.id].checkBox4 == false && evt.device.currentTemperature < state.DeVices[evt.device.id].thresh && state.DeVices[evt.device.id].state == "off") {state.DeVices[evt.device.id].state = "on"; onHandler(evt)}
    else if (state.DeVices[evt.device.id].checkBox4 == false && evt.device.currentTemperature >= state.DeVices[evt.device.id].thresh && state.DeVices[evt.device.id].state == "on") {state.DeVices[evt.device.id].state = "off"; offHandler(evt)}
    endif
} 
def humidHandler(evt) {  //// ver1.4.5
    if (evt.device.currentHumidity < state.DeVices[evt.device.id].min) {state.DeVices[evt.device.id].min = evt.device.currentHumidity }  
    if (evt.device.currentHumidity > state.DeVices[evt.device.id].max) {state.DeVices[evt.device.id].max = evt.device.currentHumidity }  
    if (state.DeVices[evt.device.id].checkBox4 && evt.device.currentHumidity >= state.DeVices[evt.device.id].thresh && state.DeVices[evt.device.id].state == "off") {state.DeVices[evt.device.id].state = "on"; onHandler(evt)}
    else if (state.DeVices[evt.device.id].checkBox4 && evt.device.currentHumidity < state.DeVices[evt.device.id].thresh && state.DeVices[evt.device.id].state == "on") {state.DeVices[evt.device.id].state = "off"; offHandler(evt)}
    else if (state.DeVices[evt.device.id].checkBox4 == false && evt.device.currentHumidity < state.DeVices[evt.device.id].thresh && state.DeVices[evt.device.id].state == "off") {state.DeVices[evt.device.id].state = "on"; onHandler(evt)}
    else if (state.DeVices[evt.device.id].checkBox4 == false && evt.device.currentHumidity >= state.DeVices[evt.device.id].thresh && state.DeVices[evt.device.id].state == "on") {state.DeVices[evt.device.id].state = "off"; offHandler(evt)}
    endif
} 
def voltHandler(evt) {  //// ver1.1.7
    if (evt.device.currentVoltage < state.DeVices[evt.device.id].min) {state.DeVices[evt.device.id].min = evt.device.currentVoltage }  //// ver 1.2.1
    if (evt.device.currentVoltage > state.DeVices[evt.device.id].max) {state.DeVices[evt.device.id].max = evt.device.currentVoltage }  
    if (state.DeVices[evt.device.id].checkBox4 && evt.device.currentVoltage >= state.DeVices[evt.device.id].thresh && state.DeVices[evt.device.id].state == "off") {state.DeVices[evt.device.id].state = "on"; onHandler(evt)}
    else if (state.DeVices[evt.device.id].checkBox4 && evt.device.currentVoltage < state.DeVices[evt.device.id].thresh && state.DeVices[evt.device.id].state == "on") {state.DeVices[evt.device.id].state = "off"; offHandler(evt)}
    else if (state.DeVices[evt.device.id].checkBox4 == false && evt.device.currentVoltage < state.DeVices[evt.device.id].thresh && state.DeVices[evt.device.id].state == "off") {state.DeVices[evt.device.id].state = "on"; onHandler(evt)}
    else if (state.DeVices[evt.device.id].checkBox4 == false && evt.device.currentVoltage >= state.DeVices[evt.device.id].thresh && state.DeVices[evt.device.id].state == "on") {state.DeVices[evt.device.id].state = "off"; offHandler(evt)}
    endif
} 
def thermostatHandler(evt) {  //// ver1.1.8   // tested user2371
    state.DeVices[evt.device.id].state = evt.device.currentThermostatOperatingState
    if (state.DeVices[evt.device.id].checkBox4 && evt.device.currentThermostatOperatingState == "heating") {
        state.curTrack = "heat"
        onHandler(evt)
    }
    else if (state.DeVices[evt.device.id].checkBox4 && evt.device.currentThermostatOperatingState != "heating" && state.curTrack == "heat") {offHandler(evt)}
    else if (state.DeVices[evt.device.id].checkBox4 == false && evt.device.currentThermostatOperatingState == "cooling") {
        state.curTrack = "cool"
        onHandler(evt)
    }
    else if (state.DeVices[evt.device.id].checkBox4 == false && evt.device.currentThermostatOperatingState != "cooling" && state.curTrack =="cool") {offHandler(evt)}
    endif
} 

def batHandler(evt) {  //// ver1.4.1  
    state.DeVices[evt.device.id].lastTime = new Date().format("MM-dd-yyyy ${location.timeFormat == "12" ? "h:mm:ss a" : "HH:mm:ss"}")  //// ver 1.4.2
    state.DeVices[evt.device.id].lastTimeEpoch = now()  //// ver 1.5.2
        //log.warn "Test Bat App: ${app.label}: Device- ${evt.device.id}, evt.device.currentBattery= ${evt.device.currentBattery}, state.DeVices[evt.device.id].lastTime= ${state.DeVices[evt.device.id].lastTime}"
    if (batResetBool && (evt.device.currentBattery > (state.DeVices[evt.device.id].min + batResetPercent))) {state.resetTotal = evt.device.id} 
    if (logEnableBool) {log.info "App: ${app.label}: Device- ${evt.device.id}, evt.device.currentBattery= ${evt.device.currentBattery}, xPercent= ${(state.DeVices[evt.device.id].min + batResetPercent)}, lastTime= ${state.DeVices[evt.device.id].lastTime}"}
    refreshHandler()
}
    
void onHandler(evt) {
    state.DeVices[evt.device.id].start = now()
    state.DeVices[evt.device.id].counts += 1  //// ver1.1.3
    state.DeVices[evt.device.id].onTime = new Date().format("MM-dd-yyyy ${location.timeFormat == "12" ? "h:mm:ss a" : "HH:mm:ss"}") //// ver1.1.8 
    if (state.DeVices[evt.device.id].checkBox2) {state.keepCountsBool = true ; resetTimers()} //// ver1.1.0
}

void offHandler(evt) {
    state.DeVices[evt.device.id].oneTime += now() - state.DeVices[evt.device.id].start   //// ver1.30
    state.DeVices[evt.device.id].total += now() - state.DeVices[evt.device.id].start
    state.DeVices[evt.device.id].allTime = state.DeVices[evt.device.id].allTime + (now() - state.DeVices[evt.device.id].start) //// ver 1.1.3
	      String thisVar = state.DeVices[evt.device.id].var
          String thisVarC = state.DeVices[evt.device.id].varC   //// ver1.1.4
          String thisVarCT = state.DeVices[evt.device.id].varCT   //// ver1.1.5
          String thisVarMax = state.DeVices[evt.device.id].varMax   //// ver1.3.4   
          int counts = state.DeVices[evt.device.id].counts   //// ver1.1.5
          String timeMax = state.DeVices[evt.device.id].timeMax   //// ver1.3.4
          String max = state.DeVices[evt.device.id].max   //// ver1.3.4  
    
            ////////// Active/On One Cycle Time Calc, Min/Max Time Calc per sessions   //// ver1.3.1
            if (capabilitySelect == "1" || capabilitySelect == "2" || capabilitySelect == "3" || capabilitySelect == "7" || capabilitySelect == "9") {
             int oneTime = state.DeVices[evt.device.id].oneTime / 1000  
             int intOneTime = oneTime 
             int oneHours = oneTime / 3600
             oneTime = oneTime % 3600
	         int oneMins = oneTime / 60
	         int oneSecs = oneTime % 60
	         String oneTimeStr = "$oneHours:${oneMins < 10 ? "0" : ""}$oneMins:${oneSecs < 10 ? "0" : ""}$oneSecs"
               if (counts == 1) {state.DeVices[evt.device.id].min = intOneTime; state.DeVices[evt.device.id].max = intOneTime; state.DeVices[evt.device.id].timeMin = oneTimeStr; state.DeVices[evt.device.id].timeMax = oneTimeStr}   
               else if (intOneTime < state.DeVices[evt.device.id].min) {state.DeVices[evt.device.id].timeMin = oneTimeStr; state.DeVices[evt.device.id].min = intOneTime }  
               else if (intOneTime > state.DeVices[evt.device.id].max) {state.DeVices[evt.device.id].timeMax = oneTimeStr; state.DeVices[evt.device.id].max = intOneTime }   
               endif
             state.DeVices[evt.device.id].oneTime = 0          
            }
    
            ////////// Active/On Time Calc   
            int total = state.DeVices[evt.device.id].total /1000 
            int intTime = total  //// ver1.1.0
            int hours = total / 3600
	        total = total % 3600
	        int mins = total / 60
	        int secs = total % 60
	        String time = "$hours:${mins < 10 ? "0" : ""}$mins:${secs < 10 ? "0" : ""}$secs"
            
            ////////// Total All Cumalative Time Calc   //// ver1.1.3
            int allTotal = state.DeVices[evt.device.id].allTime /1000      
            int intAllTime = allTotal
            int allHours = allTotal / 3600  
	        allTotal = allTotal % 3600
	        int allMins = allTotal / 60
	        int allSecs = allTotal % 60    
            String allTime = "$allHours:${allMins < 10 ? "0" : ""}$allMins:${allSecs < 10 ? "0" : ""}$allSecs"   
               
             if (thisVar) {state.DeVices[evt.device.id].checkBox1 ? setGlobalVar(thisVar, intTime) : setGlobalVar(thisVar, time) 
               if (logEnableBool) {log.info "App: ${app.label}: Device- ${evt.device} now Inactive/Off, Periodic Var *${thisVar}* to ${time} or ${intTime}sec, Counts=${counts}"}  //// ver1.1.3                  
             }
             if (thisVarC) {state.DeVices[evt.device.id].checkBox1 ? setGlobalVar(thisVarC, intAllTime) : setGlobalVar(thisVarC, allTime)   //// ver1.1.4 
               if (logEnableBool) {log.info "App: ${app.label}: Device- ${evt.device} now Inactive/Off, Cumulative Var *${thisVarC}* ${allTime} or ${intAllTime}sec, Counts=${counts}"}   
             }
             if (thisVarCT) {setGlobalVar(thisVarCT, counts)}  //// ver1.1.5
             if ((capabilitySelect == "4" || capabilitySelect == "5" || capabilitySelect == "6" || capabilitySelect == "8" || capabilitySelect == "10") && thisVarMax ) {setGlobalVar(thisVarMax, max)}  //// ver1.3.4  
             else if (thisVarMax) {setGlobalVar(thisVarMax, timeMax)}     
             endif
    
    ////////// Notification Time Check and Messege   //// ver1.3.0
    if (pushBool && pushDevice && state.DeVices[evt.device.id].notifyBox) {
       if (capabilitySelect != "8")  {int notifyTimeSec = state.DeVices[evt.device.id].notifyTime * 86400 
          if (intAllTime > notifyTimeSec) { pushDevice.deviceNotification("App: ${app.label}, Device ${evt.device}, On Time EXPIRED!")   
              if (state.DeVices[evt.device.id].notifyReset) { state.DeVices[evt.device.id].total = 0; state.DeVices[evt.device.id].allTime = 0 }  // Reset All times
              }
          }
       if (logEnableBool) {log.info "App: ${app.label}: NOTIFICATION, Device- ${evt.device}, CumulativeTotalSec= ${intAllTime}, notifyTimeSec= ${notifyTimeSec}"}
     }
}

void appButtonHandler(btn) {
    if (btn == "reset") {state.allResetBool = true; resetTimers()}   //// ver1.0.1  a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, X, y, z 
    else if (btn == "refresh") refreshHandler()  //// ver1.0.3
    else if (btn.startsWith("n")) state.newVar = btn.minus("n")
    else if (btn.startsWith("r")) state.remVar = btn.minus("r")
    else if (btn.startsWith("z")) state.newVarC = btn.minus("z")   //// ver1.1.4
    else if (btn.startsWith("y")) state.remVarC = btn.minus("y")   //// ver1.1.4 
    else if (btn.startsWith("w")) state.newVarCT = btn.minus("w")   //// ver1.1.5
    else if (btn.startsWith("v")) state.remVarCT = btn.minus("v")   //// ver1.1.5
    else if (btn.startsWith("m")) state.newVarMax = btn.minus("m")   //// ver1.3.4
    else if (btn.startsWith("l")) state.remVarMax = btn.minus("l")   //// ver1.3.4    
    else if (btn.startsWith("t")) state.resetTotal = btn.minus("t")   //// ver1.1.3 
    else if (btn.startsWith("a")) state.uncheckedBox1 = btn.minus("a")  //// ver1.1.3   
    else if (btn.startsWith("b")) state.checkedBox1 = btn.minus("b")    //// ver1.1.3 
    else if (btn.startsWith("e")) state.uncheckedBox2 = btn.minus("e")  //// ver1.1.3  
    else if (btn.startsWith("f")) state.checkedBox2 = btn.minus("f")    //// ver1.1.3 
    else if (btn.startsWith("g")) state.uncheckedBox3 = btn.minus("g")   //// ver1.1.4  
    else if (btn.startsWith("h")) state.checkedBox3 = btn.minus("h")   //// ver1.1.4
    else if (btn.startsWith("o")) state.uncheckedBox4 = btn.minus("o")   //// ver1.1.8  
    else if (btn.startsWith("p")) state.checkedBox4 = btn.minus("p")   //// ver1.1.8       
    else if (btn.startsWith("q")) state.newThresh = btn.minus("q")   //// ver1.1.8
	else if (btn.startsWith("u")) state.remThresh = btn.minus("u")   //// ver1.1.8
    else if (btn.startsWith("s")) state.uncheckedNotify = btn.minus("s")   //// ver1.3.0  
    else if (btn.startsWith("c")) state.checkedNotify = btn.minus("c")   //// ver1.3.0 
    else if (btn.startsWith("i")) state.newNotifyTime = btn.minus("i")   //// ver1.3.0  
    else if (btn.startsWith("j")) state.uncheckedNotifyReset = btn.minus("j")   //// ver1.3.0 
    else if (btn.startsWith("k")) state.checkedNotifyReset = btn.minus("k")   //// ver1.3.0      
    else if (btn.startsWith("d")) state.reset = btn.minus("d")   //////////////////////////////////////////
    endif      
    }

//////////////////////////////////////////////////////////////// REFRESH FUNCTIONS ///////////////////////////////////////////////////////////////
def refreshHandler() {   //// Added ver 1.0.3
    state.DeVices.each {k, v ->
        def dev = DeVices.find{"$it.id" == k}
        ///////////// Update Times if Active/On
        if (capabilitySelect == "1" && dev.currentSwitch == "on") {
            state.DeVices[k].oneTime += now() - state.DeVices[k].start   //// ver1.3.1
            state.DeVices[k].total += now() - state.DeVices[k].start
			state.DeVices[k].allTime = state.DeVices[k].allTime + (now() - state.DeVices[k].start) //// ver1.1.3
            state.DeVices[k].start = now()
            }
        else if (capabilitySelect == "2" && dev.currentContact == "open") {
            state.DeVices[k].oneTime += now() - state.DeVices[k].start   //// ver1.3.1
            state.DeVices[k].total += now() - state.DeVices[k].start
            state.DeVices[k].allTime = state.DeVices[k].allTime + (now() - state.DeVices[k].start)  //// ver1.1.3
			state.DeVices[k].start = now()
            }
        else if (capabilitySelect == "3" && dev.currentContact == "closed") {
            state.DeVices[k].oneTime += now() - state.DeVices[k].start   //// ver1.3.1
        	state.DeVices[k].total += now() - state.DeVices[k].start
            state.DeVices[k].allTime = state.DeVices[k].allTime + (now() - state.DeVices[k].start)  //// ver1.1.3
			state.DeVices[k].start = now()
		    }
        else if ((capabilitySelect == "4" && dev.currentPower >= state.DeVices[k].thresh && state.DeVices[k].checkBox4) || (capabilitySelect == "4" && dev.currentPower < state.DeVices[k].thresh && state.DeVices[k].checkBox4 == false)) { //// ver1.0.2
        	//state.DeVices[k].oneTime += now() - state.DeVices[k].start   //// ver1.3.1
            state.DeVices[k].total += now() - state.DeVices[k].start
            state.DeVices[k].allTime = state.DeVices[k].allTime + (now() - state.DeVices[k].start)  //// ver1.1.3
			state.DeVices[k].start = now()
		    }
        else if ((capabilitySelect == "5" && dev.currentTemperature >= state.DeVices[k].thresh && state.DeVices[k].checkBox4) || (capabilitySelect == "5" && dev.currentTemperature < state.DeVices[k].thresh && state.DeVices[k].checkBox4 == false)) { //// ver1.1.7
        	//state.DeVices[k].oneTime += now() - state.DeVices[k].start   //// ver1.3.1
            state.DeVices[k].total += now() - state.DeVices[k].start
            state.DeVices[k].allTime = state.DeVices[k].allTime + (now() - state.DeVices[k].start)   
			state.DeVices[k].start = now()
		    } 
        else if ((capabilitySelect == "6" && dev.currentVoltage >= state.DeVices[k].thresh && state.DeVices[k].checkBox4) || (capabilitySelect == "6" && dev.currentVoltage < state.DeVices[k].thresh && state.DeVices[k].checkBox4 == false)) { //// ver1.1.7
        	//state.DeVices[k].oneTime += now() - state.DeVices[k].start   //// ver1.3.1
            state.DeVices[k].total += now() - state.DeVices[k].start
            state.DeVices[k].allTime = state.DeVices[k].allTime + (now() - state.DeVices[k].start)   
			state.DeVices[k].start = now()
		    } 
        else if ((capabilitySelect == "7" && dev.currentThermostatOperatingState == "heating" && state.DeVices[k].checkBox4) || (capabilitySelect == "7" && dev.currentThermostatOperatingState == "cooling" && state.DeVices[k].checkBox4 == false)) { //// ver1.1.8
        	state.DeVices[k].oneTime += now() - state.DeVices[k].start   //// ver1.3.1
            state.DeVices[k].total += now() - state.DeVices[k].start
            state.DeVices[k].allTime = state.DeVices[k].allTime + (now() - state.DeVices[k].start)   
			state.DeVices[k].start = now()
		    }
        else if (capabilitySelect == "8") { //// ver1.4.0     For Battery
            if (dev.currentBattery < state.DeVices[k].min) {state.DeVices[k].min = dev.currentBattery} // Min value
            if (dev.currentBattery > state.DeVices[k].max) {state.DeVices[k].max = dev.currentBattery} // Max value
                state.DeVices[k].allTime = state.DeVices[k].allTime + (now() - state.DeVices[k].start)   // Total on time
            if (dev.currentBattery > state.DeVices[k].thresh) {state.DeVices[k].total = state.DeVices[k].allTime} // Time battery is above threshold
            if (dev.currentBattery <= state.DeVices[k].thresh && state.DeVices[k].checkBox4) {state.DeVices[k].checkBox4 = false  // use checkBox4 to lock out further updates
                state.DeVices[k].onTime = new Date().format("MM-dd-yyyy ${location.timeFormat == "12" ? "h:mm:ss a" : "HH:mm:ss"}") }
            if (state.DeVices[k].lastTimeEpoch == null || state.DeVices[k].lastTimeEpoch == 0) {state.DeVices[k].reportDays = state.DeVices[k].allTime / 86400000}
            	else state.DeVices[k].reportDays = (now() -  state.DeVices[k].lastTimeEpoch) / 86400000    ////  ver1.5.1
            state.DeVices[k].start = now()
            //log.warn "REAL App: ${app.label}: reportDays= ${state.DeVices[k].reportDays},   Now= ${now()},  LastTimeEpoch= ${state.DeVices[k].lastTimeEpoch}"
		    }
        else if (capabilitySelect == "9" && dev.currentMotion == "active") { //// ver1.4.5
            state.DeVices[k].oneTime += now() - state.DeVices[k].start   
            state.DeVices[k].total += now() - state.DeVices[k].start
            state.DeVices[k].allTime = state.DeVices[k].allTime + (now() - state.DeVices[k].start)  //// ver1.1.3
			state.DeVices[k].start = now()
            }
        else if ((capabilitySelect == "10" && dev.currentHumidity >= state.DeVices[k].thresh && state.DeVices[k].checkBox4) || (capabilitySelect == "10" && dev.currentHumidity < state.DeVices[k].thresh && state.DeVices[k].checkBox4 == false)) { //// ver1.4.5
        	state.DeVices[k].total += now() - state.DeVices[k].start
            state.DeVices[k].allTime = state.DeVices[k].allTime + (now() - state.DeVices[k].start)   
			state.DeVices[k].start = now()
		    } 
        endif
       }
        //////////// Update Variables if Active/On  
        DeVices.sort{it.displayName.toLowerCase()}.each {dev ->
            String thisVar = state.DeVices["$dev.id"].var
            String thisVarC = state.DeVices["$dev.id"].varC   //// ver1.1.4
            String thisVarCT = state.DeVices["$dev.id"].varCT   //// ver1.1.5
            String thisVarMax = state.DeVices["$dev.id"].varMax   //// ver1.3.4   
            int counts = state.DeVices["$dev.id"].counts   //// ver1.1.5
            String timeMax = state.DeVices["$dev.id"].timeMax   //// ver1.3.4 
            String max = state.DeVices["$dev.id"].max   //// ver1.3.4   
            
            ////////// Active/On Time Calc   
            int total = state.DeVices["$dev.id"].total /1000    
            int intTime = total  //// Added ver1.1.0
            int hours = total / 3600
	        total = total % 3600
	        int mins = total / 60
	        int secs = total % 60
	        String time = "$hours:${mins < 10 ? "0" : ""}$mins:${secs < 10 ? "0" : ""}$secs"
            
            ////////// Total All Cumalative Time Calc   //// ver1.1.3
            int allTotal = state.DeVices["$dev.id"].allTime /1000      
            int intAllTime = allTotal
            int allHours = allTotal / 3600  
	        allTotal = allTotal % 3600
	        int allMins = allTotal / 60
	        int allSecs = allTotal % 60    
            String allTime = "$allHours:${allMins < 10 ? "0" : ""}$allMins:${allSecs < 10 ? "0" : ""}$allSecs"   
               
            if (thisVar) { state.DeVices["$dev.id"].checkBox1 ? setGlobalVar(thisVar, intTime) : setGlobalVar(thisVar, time)  //// ver1.1.3 
               if (logEnableBool) {log.info "App: ${app.label}: Device- ${dev}, Periodic Var *${thisVar}* to ${time} or ${intTime}sec, Counts=${counts}"}  //// ver1.1.3                  
             }
            if (thisVarC) { state.DeVices["$dev.id"].checkBox1 ? setGlobalVar(thisVarC, intAllTime) : setGlobalVar(thisVarC, allTime) //// ver1.1.4
               if (logEnableBool) {log.info "App: ${app.label}: Device- ${dev}, Cumulative Var *${thisVarC}* ${allTime} or ${intAllTime}sec, Counts=${counts}"}   
             }
            if (thisVarCT) {setGlobalVar(thisVarCT, counts)}  //// ver1.1.5 
              if ((capabilitySelect == "4" || capabilitySelect == "5" || capabilitySelect == "6" || capabilitySelect == "8" || capabilitySelect == "10") && thisVarMax ) {setGlobalVar(thisVarMax, max)}  //// ver1.3.4  
              else if (thisVarMax) {setGlobalVar(thisVarMax, timeMax)}     
              endif
    ////////// Notification Time Check and Messege   //// ver1.3.0
    if (pushBool && pushDevice && state.DeVices["$dev.id"].notifyBox) {
       if (capabilitySelect != "8")  {int notifyTimeSec = state.DeVices["$dev.id"].notifyTime * 86400 
          if (intAllTime > notifyTimeSec) { pushDevice.deviceNotification("App: ${app.label}, Device ${dev}, On Time EXPIRED!")   
              if (state.DeVices["$dev.id"].notifyReset) { state.DeVices["$dev.id"].total = 0; state.DeVices["$dev.id"].allTime = 0 }  // Reset All times
              }
          }
       else if (dev.currentBattery <= state.DeVices["$dev.id"].thresh)  { pushDevice.deviceNotification("App: ${app.label}, Device ${dev}, Battery Low, ${dev.currentBattery}%") }  //// ver1.4.0
       if (logEnableBool) {log.info "App: ${app.label}: NOTIFICATION, Device- ${dev}, CumulativeTotalSec= ${intAllTime}, notifyTimeSec= ${notifyTimeSec}"}
     }
  }
  state.keepCountsBool = false  // Reset the keep counts bypass  //// ver1.1.3
}

/////////////////////////////////////////////////////////// Reset Functions ////////////////////////////////////////////////////
void dayResetDecider(evt = null) { //// Used by Auto reset daily hour reset to save counts or not  //// ver1.1.4
    state.allResetBool = true   //// ver1.3.4
    if (countsResetBool) {state.keepCountsBool = false}
    else state.keepCountsBool = true  
    resetTimers()
}

///////////////////  Reset Timers and Variables based on Options selected
void resetTimers(evt = null) {  //// ver1.1.4 
    remoteResetBool = false   //// ver1.3.4
    state.DeVices.each{k, v ->
		def dev = DeVices.find{"$it.id" == k}
        if (resetVar) {remoteResetBool = getGlobalVar(resetVar).value}  // read remote variable value  //// ver1.3.4
        if (state.allResetBool || state.DeVices[k].checkBox2 || (remoteResetBool && state.DeVices[k].checkBox3)) {  
            state.DeVices[k].start = now()   
            state.DeVices[k].time = new Date().format("MM-dd-yyyy ${location.timeFormat == "12" ? "h:mm:ss a" : "HH:mm:ss"}")
		    state.DeVices[k].total = 0
            if (capabilitySelect == "8") {state.DeVices[k].reportDays = 0}  //// ver1.5.1 
            if (state.keepCountsBool == false) { state.DeVices[k].counts = 0  // Also Reset counts, max, min   //// ver1.1.3
                  if (capabilitySelect == "4") {state.DeVices[k].min = dev.currentPower; state.DeVices[k].max = dev.currentPower}  //// ver1.2.1
                  else if (capabilitySelect == "5") {state.DeVices[k].min = dev.currentTemperature; state.DeVices[k].max = dev.currentTemperature}   
                  else if (capabilitySelect == "6") {state.DeVices[k].min = dev.currentVoltage; state.DeVices[k].max = dev.currentVoltage} 
                  else if (capabilitySelect == "10") {state.DeVices[k].min = dev.currentHumidity; state.DeVices[k].max = dev.currentHumidity}                               
                  else {state.DeVices[k].min = 0; state.DeVices[k].max = 0; state.DeVices[k].timeMin = 0; state.DeVices[k].timeMax = 0}  //// ver1.30                        
             }
            if (remoteResetBool && remoteResetCum && state.DeVices[k].checkBox3) {state.DeVices[k].allTime = 0 }   // Also Remote reset cumulative  //// ver1.3.4
            
            if (logEnableBool && !state.keepCountsBool) {log.debug "App: ${app.label} - Device ${dev} Periodic Timer, Counts, & Min/Max values RESET to 0 Happening ..........."}
            else if (logEnableBool) {log.debug "App: ${app.label} - Device ${dev} Periodic Timer RESET to 0 Happening ..........."}
            endif
        }
    }
    if(resetVar) setGlobalVar(resetVar, false)
    state.allResetBool = false  // return all reset button option to off   //// ver1.3.4
    refreshHandler()   //// ver1.0.3  
}

/////////////////////////////////////////////////////////////// Other Stuff ///////////////////////////////////////////////////////
def updated() {   // runs every 'Done' on already installed app 
    unsubscribe()
    unschedule()  // cancels all(or one) scheduled jobs including runIn
    initialize()  // set schedules and subscribes
    if(logEnableBool) runIn(3600, logsOff)  // Disable all Logging after time elapsed
}
def installed() { // only runs once for new app 'Done' or first time open
}
def logsOff() {
    log.info "${app.label} - Debug logging auto disabled"
    app?.updateSetting("logEnableBool",[value:"false",type:"bool"])
}
def getFormat(type, myText="") {		
    if(type == "title") return "<h3 style='color:SteelBlue; font-weight: bold'>${myText}</h3>"  // Steel-Blue
    if(type == "noticable") return "<div style='color:#CC5500'>${myText}</div>"  // Burnt-Orange
    if(type == "important") return "<div style='color:#32a4be'>${myText}</div>"  // Flat Touquise
	if(type == "lessImportant") return "<div style='color:green'>${myText}</div>" // Green
    
    if (formatBool) {if(type == "header") {return "<div style='color:#660000;font-weight: bold'>${myText}</div>"}  // Burgandy-Red //// ver1.2.0
          if(type == "important2") return "<div style='color:#5a8200'>${myText}</div>"  // Lime-Green
    }
    else {if(type == "header") return "<div style='color:#000000;font-weight: bold'>${myText}</div>"  // Black
          if(type == "important2") return "<div style='color:#000000'>${myText}</div>"   // Black
    }
}
def displayTitle() {
    setVersion()
    section (getFormat("title",  "App: ${state.name} - ${"ver " + state.version}")) {}
}

