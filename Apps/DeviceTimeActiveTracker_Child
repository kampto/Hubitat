/* Device Active Time and Counter Tracker (Child App)
*  
*	2022 T. K. (kampto)
*	NOTES:  Track the time and counts a device is Active/On. Assign to a variable if needed. Refresh/Reset/Update variable various ways. Use variable in RM to trigger things. 
*   
*    Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at
*    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS,
*    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
*
*	Change Revision History:  
*   Ver		Date:		Who:		What:
*   1.2.0   2023-05-05  FriedCheese Several formatting updates. Added displayTables to add search/sort features to the main table.
*   1.1.8	2023-05-05	kampto		Add option to see last On-time vs last reset. Added per device power, temp, or voltage tracking thresholds in table. Add Thermostat Heeting or Cooling modes.
*   1.1.7	2023-05-02	kampto		Added Temperature and Voltage capability. Added temp, voltage and power below threshold tracking
*   1.1.6	2023-05-01	kampto		Added 'Days' option for table display-only. Fixed remote reset bug and powerHandler bug
*   1.1.5	2023-04-28	kampto		Added 2nd variable per device to reset cumulative time. More variable and reset options. Added On Counts variable and reset
*   1.1.3	2023-04-27	kampto		Add total time in table. Table Check Boxes. Option to disable App based logging. Added Seconds Update. Added On counts.
*   1.1.0	2023-04-15	kampto		Updated page format, option for variables as an int for use in RM. Option to reset when active. Enhanced logs. Power reset bug fix.
*   1.0.3	2023-04-12	kampto		Added Power monitoring capability, Added Time/Variable refresh time entry, fixed variable refresh at reset, Bug fixes 
*   1.0.1	2022-10-10	kampto		Added Auto Reset timers, added state to table.  
*   1.0.0	2022-10-02	kampto		Modified to support Parent/Child apps. Add other capabilities and features. Origin from "DeVices Usage App" B.Ravenel - Hubitat
*/

import groovy.time.TimeCategory
import java.text.SimpleDateFormat

def setVersion() {
    state.name = "Device Active Tracker, Times and Counts (Child)"
	state.version = "1.2.0"
    }

definition (
	name: "Device Time Active Tracker Child", namespace: "kampto", author: "T. K.",
	description: "Track Time a device is active, On Counts, and attach data to variables",
	category: "General",
	parent: "kampto:Device Time Active Tracker",
	iconUrl: "",
	iconX2Url: "",
    importUrl: "https://raw.githubusercontent.com/kampto/Hubitat/main/Apps/DeviceTimeActiveTracker_Child",
    documentationLink: "https://community.hubitat.com/t/beta-device-active-time-tracker-app-device-on-timer-and-on-counter-with-variables-access/102896"
	)

preferences {page(name: "mainPage")}

//******************************************************  Page/Input Set-Up  ******************************************************//
def mainPage() {
    if(app.getInstallationState() != "COMPLETE") {hide=false} else {hide=true}
    if (state.DeVices == null) state.DeVices = [:]
    if (state.DeVicesList == null) state.DeVicesList = []
    if (resetHour == null) {resetHour = 0}   //// ver1.0.1
    if (refreshMinutes == null) {refreshMinutes = 10}    //// ver1.1.3
    if (refreshSeconds == null) {refreshSeconds = 30}    //// ver1.1.3
    if (capabilitySelect == null) {capabilitySelect = 1}
    if (allTotal == null) {allTotal = 0}   //// ver1.1.3
    state.byPassBool = false  //// ver1.1.4
                    
  dynamicPage(name: "", title: "", install: true, uninstall: true) {
  displayTitle() 
  section(getFormat("header","1. App Name"),hideable: true, hidden: hide) {
        label title: getFormat("important","Enter a name for this child app"), required: true, submitOnChange: true, width: 4
  }
  section(getFormat("header","2. Capability Selection"),hideable: true, hidden: hide) {
        input name: "capabilitySelect", type: "enum", title: getFormat("important","Select a capability to track"), required: true, description: "Default = SWITCH On", defaultValue: "1", multiple: false, options:[["1":"SWITCH On"], ["2":"CONTACT Open"], ["3":"CONTACT Closed"], ["4":"POWER Monitor"], ["5":"TEMPERATURE Monitor"], ["6":"VOLTAGE Monitor"], ["7":"THERMOSTAT State"]], width: 4, submitOnChange: true, displayDuringSetup: false
  }
  section(getFormat("header","3. Device Selection"),hideable: true, hidden: hide) {
        if (capabilitySelect == "1") {input "DeVices", "capability.switch", title: getFormat("important","Select Devices to Track Switch On Time"), required: true, multiple: true, submitOnChange: true, width: 6}    
        else if (capabilitySelect == "2") {input "DeVices", "capability.contactSensor", title: getFormat("important","Select Devices to Track Contact Open Time"), required: true, multiple: true, submitOnChange: true, width: 6}   //// ver1.0.1
        else if (capabilitySelect == "3") {input "DeVices", "capability.contactSensor", title: getFormat("important","Select Devices to Track Contact Closed Time"), required: true, multiple: true, submitOnChange: true, width: 6}   //// ver1.0.1
        else if (capabilitySelect == "4") {input "DeVices", "capability.powerMeter", title: getFormat("important","Select Power reporting Devices to Track"), required: true, multiple: true, submitOnChange: true, width: 6}   //// ver1.0.3
        else if (capabilitySelect == "5") {input "DeVices", "capability.temperatureMeasurement", title: getFormat("important","Select Temperature reporting Devices to Track"), required: true, multiple: true, submitOnChange: true, width: 6}   //// ver1.1.7
        else if (capabilitySelect == "6") {input "DeVices", "capability.voltageMeasurement", title: getFormat("important","Select Voltage reporting Devices to Track"), required: true, multiple: true, submitOnChange: true, width: 6}   //// ver1.1.7
       // else if (capabilitySelect == "7") {input "DeVices", "capability.thermostatOperatingState", title: "Select Thermostat to Track Heat/Cool state", required: true, multiple: true, submitOnChange: true, width: 6}   //// ver1.1.8    
        else if (capabilitySelect == "7") {input "DeVices", "capability.thermostat", title: getFormat("important","Select Thermostat to Track Heat/Cool state"), required: true, multiple: true, submitOnChange: true, width: 6}   //// ver1.1.8       
        else {input "DeVices", "capability.switch", title: getFormat("important","Select Devices to Track Switch On Time"), multiple: true, submitOnChange: true, width: 6}
        
    DeVices.each {dev ->
	    if(!state.DeVices["$dev.id"]) {
             if (capabilitySelect == "1") {state.DeVices["$dev.id"] = [start: dev.currentSwitch == "on" ? now() : 0, total: 0, var: "", varC: "", varCT: "", time: "", allTime: 0, counts: 0, checkBox1: false, checkBox2: true, checkBox3: true]}  
             else if (capabilitySelect == "2") {state.DeVices["$dev.id"] = [start: dev.currentContact == "open" ? now() : 0, total: 0, var: "", varC: "", varCT: "", time: "", allTime: 0, counts: 0, checkBox1: false, checkBox2: true, checkBox3: true]}   //// ver1.0.1
             else if (capabilitySelect == "3") {state.DeVices["$dev.id"] = [start: dev.currentContact == "closed" ? now() : 0, total: 0, var: "", varC: "", varCT: "", time: "", allTime: 0, counts: 0, checkBox1: false, checkBox2: true, checkBox3: true]}  //// ver1.0.1
             else if (capabilitySelect == "4") {state.DeVices["$dev.id"] = [start: dev.currentPower >= 0 ? now() : 0, total: 0, var: "", varC: "", varCT: "", time: "", allTime: 0, counts: 0, checkBox1: false, checkBox2: true, checkBox3: true, checkBox4: true, state: "off", thresh: 0]}   //// ver1.0.3
             else if (capabilitySelect == "5") {state.DeVices["$dev.id"] = [start: dev.currentTemperature >= 0 ? now() : 0, total: 0, var: "", varC: "", varCT: "", time: "", allTime: 0, counts: 0, checkBox1: false, checkBox2: true, checkBox3: true, checkBox4: true, state: "off", thresh: 0]}  //// ver1.1.7
             else if (capabilitySelect == "6") {state.DeVices["$dev.id"] = [start: dev.currentVoltage >= 0 ? now() : 0, total: 0, var: "", varC: "", varCT: "", time: "", allTime: 0, counts: 0, checkBox1: false, checkBox2: true, checkBox3: true, checkBox4: true, state: "off", thresh: 0]}  //// ver1.1.7
             else if (capabilitySelect == "7") {state.DeVices["$dev.id"] = [start: dev.currentThermostatOperatingState =="idle" ? now() : 0, total: 0, var: "", varC: "", varCT: "", time: "", allTime: 0, counts: 0, checkBox1: false, checkBox2: true, checkBox3: true, checkBox4: true, state: "idle", thresh: 0]}  //// ver1.1.8 
            endif    
             state.DeVicesList += dev.id   
             }
	    }
  }
  section{                         
     if(DeVices) {
           	if(DeVices.id.sort() != state.DeVicesList.sort()) { 
				state.DeVicesList = DeVices.id
				Map newState = [:]
				DeVices.each{d ->  newState["$d.id"] = state.DeVices["$d.id"]}
				state.DeVices = newState
				}
                
          updated()
		  paragraph displayTable()
              ///////////////////////// Periodic Variable Select
			  if(state.newVar) {
				List vars = getAllGlobalVars().findAll{it.value.type == "integer" || it.value.type == "string"}.keySet().collect().sort{it.capitalize()}
                input "newVar", "enum", title: "(Optional) Select Hub Variable to recieve timer results. Variables must first be made in Settings/Hub Variables as a String variable for Time Format XX:XX:XX or Number variable total XXXX seconds format to use in Rule Machine. Variables can also be viewed in a dashboard tile. Set table 'Variable Type' checkbox to match the variable type. If you dont make a variable the only way to see this data is in Time Format by opening this App.", submitOnChange: true, width: 9, options: vars, newLineAfter: true
				   if(newVar) {
					 state.DeVices[state.newVar].var = newVar
                     state.remove("newVar")
					 app.removeSetting("newVar")
					 paragraph "<script>{changeSubmit(this)}</script>"
					 }
				 } 
               else if(state.remVar) {
				 state.DeVices[state.remVar].var = ""
                 state.remove("remVar")
				 paragraph "<script>{changeSubmit(this)}</script>"
				 }
         
              ///////////////////////// Cumulative Variable Select  //// ver1.1.5
              if(state.newVarC) {
				List varsC = getAllGlobalVars().findAll{it.value.type == "integer" || it.value.type == "string"}.keySet().collect().sort{it.capitalize()}
                input "newVarC", "enum", title: "(Optional) Select Hub Variable to recieve timer results. Variables must first be made in Settings/Hub Variables as a String variable for Time Format XX:XX:XX or Number variable total XXXX seconds format to use in Rule Machine. Variables can also be viewed in a dashboard tile. Set table 'Variable Type' checkbox to match the variable type. If you dont make a variable the only way to see this data is in Time Format by opening this App.", submitOnChange: true, width: 9, options: varsC, newLineAfter: true
				   if(newVarC) {
					  state.DeVices[state.newVarC].varC = newVarC
                      state.remove("newVarC")
					  app.removeSetting("newVarC")
					  paragraph "<script>{changeSubmit(this)}</script>"
					  }
				 } 
              else if(state.remVarC) {
			    state.DeVices[state.remVarC].varC = ""
                state.remove("remVarC")
				paragraph "<script>{changeSubmit(this)}</script>"
				} 
         
              ///////////////////////// Device On Counts Variable Select  //// ver1.1.5  
              if(state.newVarCT) {
				List varsCT = getAllGlobalVars().findAll{it.value.type == "integer"}.keySet().collect().sort{it.capitalize()}
                input "newVarCT", "enum", title: "(Optional) Select Hub Variable to recieve Device on counter results. Variables must first be made in Settings/Hub Variables as NUMBER variable. Use in Rule Machine or view on dashboard tile. If you dont make a variable the only way to see this data opening this App.", submitOnChange: true, width: 9, options: varsCT, newLineAfter: true
				   if(newVarCT) {
					  state.DeVices[state.newVarCT].varCT = newVarCT
                      state.remove("newVarCT")
					  app.removeSetting("newVarCT")
					  paragraph "<script>{changeSubmit(this)}</script>"
					  }
				 } 
              else if(state.remVarCT) {
				state.DeVices[state.remVarCT].varCT = ""
                state.remove("remVarCT")
				paragraph "<script>{changeSubmit(this)}</script>"
				} 
         
             ///////////////////////// Enter Threshold for Power, Temp, Voltage //// ver1.1.8 
              if(state.newThresh) {
                 input name: "newThresh", type: "number", title:"<b>Enter Threshold number to call On/Active.</b> &nbsp<small>Hit Enter</small>", defaultValue: "", required: false,  submitOnChange:true, width: 8, style: 'margin-left:10px'
                   if(newThresh) {
                      state.DeVices[state.newThresh].thresh = newThresh
                      state.remove("newThresh")
					  app.removeSetting("newThresh")
                      paragraph "<script>{changeSubmit(this)}</script>"
					  }
				 } 
              else if(state.remThresh) {
				state.DeVices[state.remThresh].thresh = ""
                state.remove("remThresh")  
				paragraph "<script>{changeSubmit(this)}</script>"
				} 
         
          input "reset", "button", title: getFormat("important2","RESET Periodic Times, Counts,<br>& Update Variables"), width: 4   //// ver1.0.1
          input "refresh", "button", title: getFormat("important2","REFRESH Table<br>& Update Variables"), width: 4    //// ver1.0.3
          input name: "inDaysC", type: "bool", title:getFormat("important2","Display Cumulative in Days?"), defaultValue:false, submitOnChange:true, width: 3   //// ver1.1.6
		}
  }
//********************************************************* Input Section 2 *******************************************************//        
      section(getFormat("header","Advanced Options"),hideable: true, hidden: false) {
          input name: "viewResfreshBool", type: "bool", title: getFormat("important2","View or Change Auto variable Update details? (Default is every 10min, for Devices with a variable and box checked in table)"), defaultValue:false, submitOnChange:true, style: 'margin-left:10px'   //// ver1.1.8
              if (viewResfreshBool) {
              input name: "autoRefresh", type: "enum", title: getFormat("important","Auto Update Variables every XX Minutes or Seconds after the hour?</b><br><small>Applies to Auto Update Checked Box(s) in Table only</small>"), defaultValue:"Minutes", submitOnChange:true, options: ["Don't Update", "Minutes","Seconds"], required: false, style: 'margin-left:60px'
               if (autoRefresh == "Seconds") {input name: "refreshSeconds", type: "enum", title: getFormat("lessImportant",">> Select Variables Update interval in Seconds for On/Active devices only.<br><small>Default = 30sec<br>Example:7:00:00, 7:00:30, 7:01:00,...<br>NOTE: Faster updates will increase hub load.</small>"), defaultValue: "30", submitOnChange: true,  options: ["5","10","15","20","30"], required: false, style: 'margin-left:110px'
                 }
               else if (autoRefresh == "Minutes") {input name: "refreshMinutes", type: "enum", title: getFormat("lessImportant",">> Select Variables Update interval in Minutes for On/Active devices only.<br><small>Default = 10min<br>Example:7:00, 7:10, 7:20,...</small>"), defaultValue: "10", submitOnChange: true,  options: ["1","2","3","4","5","10","15","20","30"], required: false, style: 'margin-left:110px'
                 }
               endif
              }
          input name: "autoResetBool", type: "bool", title: getFormat("important2","Daily Reset all Timers & Update Variables at a specific Hour?<br>(Does not Reset Cumulative Timer)<br><small>Applies to All</small>"), defaultValue:false, submitOnChange:true, style: 'margin-left:10px'
          if (autoResetBool) {
             input name: "dayCountsReset", type: "bool", title: getFormat("important","Also Reset All On Counters?"), defaultValue:true, submitOnChange:true, style: 'margin-left:60px'   
             input name: "resetHour", type: "enum", title: getFormat("lessImportant",">> Select an Hour for Auto Reset Everyday, 0 to 23.<br><small>Default = 0 (Midnight)</small>"), defaultValue: "0", submitOnChange: true,  options: ["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23"], required: false, style: 'margin-left:110px'
             }
          
          input name: "resetWhenOnBool", type: "bool", title: getFormat("important2","Reset & Restart all Timers & Update Variables when any Device becomes On/Active?<br>(Does not Reset Cumulative Times or Counts)<br><small>Applies to All</small>"), defaultValue:false, submitOnChange:true, style: 'margin-left:10px'
          
          input name: "remoteResetVarBool", type: "bool", title: getFormat("important2","Remote Reset Times & Counts by Hub Variable outside of App<br>(For Optional Rule Machine access.)<br><small>Applies to Remote Resest Checked Box(s) in Table only</small>"), defaultValue:false, submitOnChange:true, style: 'margin-left:10px'
          if (remoteResetVarBool) {
            //input name: "resetVarAllBool", type: "bool", title: "Also Reset Cumulative total also with same variable?", defaultValue:false, submitOnChange:true, style: 'margin-left:70px'  
            input "resetVar", "enum", title: getFormat("important","Select Boolean Hub Variable to Reset checkboxed PERIODIC only Timers/Counts.<br>Must make a Boolean variable first in Settings/Hub Variables.<br>In Rule Machine set variable 'true' to trigger."), submitOnChange: true, style: 'margin-left:60px',
				options: getAllGlobalVars().findAll{it.value.type == "boolean"}.keySet().collect().sort{it.capitalize()}
            input "resetVarC", "enum", title: getFormat("important","Select Boolean Hub Variable to Reset checkboxed CUMULATIVE & PERIODIC Timers/Counts"), submitOnChange: true, style: 'margin-left:60px',
				options: getAllGlobalVars().findAll{it.value.type == "boolean"}.keySet().collect().sort{it.capitalize()}  
               }
          input name: "lastResetTimeBool", type: "bool", title: getFormat("important2","Table Display Last Reset Time?<br>(Otherwise Last On-Time.)<br><small>Applies to All</small>"), defaultValue:true, submitOnChange:true, style: 'margin-left:10px'
          input name: "logEnableBool", type: "bool", title: getFormat("important2","Enable Logging of App based Resets and Variable Refresh/Updates?<br><small>Applies to All</small>"), defaultValue:true, submitOnChange:true, style: 'margin-left:10px'  //// ver1.1.3
      }
//**********************************************************  Notes Section ******************************************************//        
   section(getFormat("header","Usage Notes:"), hideable: true, hidden: hide) {  //// ver1.1.5
      paragraph getFormat("lessImportant","<ul>"+
      "<li>App Page will not refresh itself, hit in App Refresh button to see latest timers, counts, and states. Variables/Timers will update in background.</li>"+
	  "<li>Table will always display times in String Time format; XX:XX:XX. Timer Variables can be sent in Number or String format, depends on Check Box.</li>"+
      "<li>Only one capability can be used per child app. So Switch On or Contact Open etc.. Must make a seperate child app for different capability.</li>"+
      "<li>For Power, Temp, or Voltage you must click on the Tracker threshold number and enter new number for each device. Then above or below Chack Box</li>"+
      "<li>For Thermostat operation mode tracking, you can track 'heating' or 'cooling' modes depnding on in table Check Box.</li>"+ 
      "<li>Set up variables to trigger things in RM (maybe webcore?) using Number format based on total seconds elapsed. Use as Trigger, Counter, etc..</li>"+
      "<li>Variable values can be set up in dashboard tile for viewing Periodic times, total Cumulative times, or Total On Counts.</li>"+
      "<li>Set up Reset Timers/Variables and/or counts by an in App schedule or by On state or by using a remote resest variable from RM.</li>"+
      "<li>Set up Variable refresh updates by an in App schedule or based on state. Otherwise Variables will always update when device turns off or page refresh.</li>"+
      "</ul>")
      }
  }
}
//**********************************************************  App Page TABLE  ******************************************************//
String displayTable() {
    if(state.reset) {  //// Reset Periodic only timer/counts per device
		def dev = DeVices.find{"$it.id" == state.reset}
        state.DeVices[state.reset].start = now()
        if (lastResetTimeBool) {state.DeVices[state.reset].time = new Date().format("MM-dd-yyyy ${location.timeFormat == "12" ? "h:mm:ss a" : "HH:mm:ss"}")}
		state.DeVices[state.reset].total = 0
        state.DeVices[state.reset].counts = 0   //// ver1.1.3
      	state.remove("reset")
	    }
    
    if(state.resetTotal) {  //// Reset Cumulative and Periodic timers per device      //// ver1.1.3       
		def dev = DeVices.find{"$it.id" == state.resetTotal}
        state.DeVices[state.resetTotal].start = now()    //// ver1.1.4  
        if (lastResetTimeBool) {state.DeVices[state.resetTotal].time = new Date().format("MM-dd-yyyy ${location.timeFormat == "12" ? "h:mm:ss a" : "HH:mm:ss"}")}
        state.DeVices[state.resetTotal].total = 0
        state.DeVices[state.resetTotal].counts = 0
        state.DeVices[state.resetTotal].allTime = 0
        state.remove("resetTotal")
	    }
    ////////////// Variable String or Number Check Box
    if(state.checkedBox1) {       //// ver1.1.3
        def dev = DeVices.find{"$it.id" == state.checkedBox1}  
	    state.DeVices[state.checkedBox1].checkBox1 = true
        state.remove("checkedBox1")
	    }
	else if(state.uncheckedBox1) {
        def dev = DeVices.find{"$it.id" == state.uncheckedBox1}  
	    state.DeVices[state.uncheckedBox1].checkBox1 = false
        state.remove("uncheckedBox1")
	    }
    endif
    ////////////// Variable Auto Refresh Check Box
    if(state.checkedBox2) {      //// ver1.1.3
        def dev = DeVices.find{"$it.id" == state.checkedBox2}  
	    state.DeVices[state.checkedBox2].checkBox2 = true
        state.remove("checkedBox2")
	    }
	else if(state.uncheckedBox2) {
        def dev = DeVices.find{"$it.id" == state.uncheckedBox2}  
	    state.DeVices[state.uncheckedBox2].checkBox2 = false
        state.remove("uncheckedBox2")
	    }
    endif
    ////////////// Remote Variable Reset Check Box
    if(state.checkedBox3) {      //// ver1.1.4
        def dev = DeVices.find{"$it.id" == state.checkedBox3}  
	    state.DeVices[state.checkedBox3].checkBox3 = true
        state.remove("checkedBox3")
	    }
	else if(state.uncheckedBox3) {
        def dev = DeVices.find{"$it.id" == state.uncheckedBox3}  
	    state.DeVices[state.uncheckedBox3].checkBox3 = false
        state.remove("uncheckedBox3")
	    }
    endif
    ////////////// Track above or below threshold, Power, Temp, Volts only. And thermostat modes
    if(state.checkedBox4) {      //// ver1.1.4
        def dev = DeVices.find{"$it.id" == state.checkedBox4}  
	    state.DeVices[state.checkedBox4].checkBox4 = true
        state.remove("checkedBox4")
	    }
	else if(state.uncheckedBox4) {
        def dev = DeVices.find{"$it.id" == state.uncheckedBox4}  
	    state.DeVices[state.uncheckedBox4].checkBox4 = false
        state.remove("uncheckedBox4")
	    }
    endif
    
	String str = "<script src='https://code.iconify.design/iconify-icon/1.0.0/iconify-icon.min.js'></script>"   //////// font-weight: bold !important; word-wrap: break-word !important; white-space: normal!important
	str += "<link rel='stylesheet' type='text/css' href='https://cdn.datatables.net/v/bs/dt-1.11.3/datatables.min.css'/>" //Add datatables to support search/sort of table
	str += "<script type='text/javascript' src='https://cdn.datatables.net/v/bs/dt-1.11.3/datatables.min.js'></script>"
    str += "<style>.mdl-data-table tbody tr:hover{background-color:inherit} .tstat-col td, .tstat-col th {font-size:15px !important; padding:2px 4px;text-align:center} + .tstat-col td {font-size:13px  }" +
        "</style><div style='overflow-x:auto'><table id='main-table' class='mdl-data-table tstat-col' style=';border:3px solid black'>" +
		"<thead><tr style='border-bottom:2px solid black'><th style='border-right:2px solid black'>Device</th>" +
		"<th>Periodic<br>Active<br>OnTime</th>" +
        "<th>State</th>" +
        "<th>On<br>Counts</th>" +
        "<th>Reset</th>" +
		"<th style='width: 100px !important'>${lastResetTimeBool ? "Last<br>Reset" : "Last<br>On<br>Time"}</th>" +   //// ver1.1.8  /////////////
		"<th>Periodic<br>Linked<br>Variable</th>" +
        "<th>Counts<br>Linked<br>Variable</th>" 
            
        if (capabilitySelect == "4" || capabilitySelect == "5" || capabilitySelect == "6") { str +=    //// ver1.1.8 
            "<th>Tracker<br>Threshold </th>" + 
            "<th>Track<br>Above<br>Threshold? </th>"
            }     
        else if (capabilitySelect == "7") { str +=    //// ver1.1.8 
            "<th>Track<br>Heat or<br>Cool? </th>"
            }   
               
        str += 
        "<th>Allow<br>Remote<br>Reset?</th>" +      //// ver1.1.4 
        "<th>Variable<br>Data<br>Type?</th>" +    //// ver1.1.3
        "<th style='border-right:3px solid black'>Auto<br>Update<br>Variable?</th>" +     //// ver1.1.3
        "<th>${inDaysC ? "Cumulative<br>Total Days" : "Cumulative<br>Total Time"}</th>" +    //// ver1.1.6
        "<th>Reset<br>Total</th>"+   //// ver1.1.0
        "<th>Cumulative<br>Linked<br>Variable</th></tr></thead>"   //// ver1.1.4
	   
    DeVices.sort{it.displayName.toLowerCase()}.each {dev ->
        String thisVar = state.DeVices["$dev.id"].var
        String thisVarC = state.DeVices["$dev.id"].varC   //// ver1.1.4
        String thisVarCT = state.DeVices["$dev.id"].varCT   //// ver1.1.5
        String thisThresh = state.DeVices["$dev.id"].thresh   //// ver1.1.8
         
        ////////// Active/On Time Calc
        int counts = state.DeVices["$dev.id"].counts   //// ver1.1.5 
        int total = state.DeVices["$dev.id"].total / 1000    
        int intTime = total  //// Added ver1.1.0
        int hours = total / 3600
        total = total % 3600
	    int mins = total / 60
	    int secs = total % 60
	    String time = "$hours:${mins < 10 ? "0" : ""}$mins:${secs < 10 ? "0" : ""}$secs"
            
        ////////// Total All Cumalative Time Calc   //// ver1.1.3
        int allTotal = state.DeVices["$dev.id"].allTime /1000
        int intAllTime = allTotal
        int allHours = allTotal / 3600  
	    allTotal = allTotal % 3600
	    int allMins = allTotal / 60
	    int allSecs = allTotal % 60
        String allTime = "$allHours:${allMins < 10 ? "0" : ""}$allMins:${allSecs < 10 ? "0" : ""}$allSecs"
            float AllTimeDays = (intAllTime / 86400) as float //// ver1.1.6
            if (inDaysC) {allTimeT = String.format("%.3f", AllTimeDays)} // For table Only  //// ver1.1.6
            else {allTimeT = "$allHours:${allMins < 10 ? "0" : ""}$allMins:${allSecs < 10 ? "0" : ""}$allSecs"}  // For table Only
                       
        if (thisVar) {state.DeVices["$dev.id"].checkBox1 ? setGlobalVar(thisVar, intTime) : setGlobalVar(thisVar, time)}
        if (thisVarC) {state.DeVices["$dev.id"].checkBox1 ? setGlobalVar(thisVarC, intAllTime) : setGlobalVar(thisVarC, allTime)}  //// ver1.1.4 
        if (thisVarCT) {setGlobalVar(thisVarCT, counts)}  //// Added ver1.1.5 
        if (logEnableBool) {log.info "App: ${app.label} - Page Refresh, Device ${dev.id}, Var *${thisVar}* to ${time} or ${intTime}sec, Cumulative Var *${thisVarC}* ${allTime}time, ${AllTimeDays}days, ${intAllTime}sec, Counts Var *${thisVarC}* Counts=${counts}"}  //// Added ver1.1.3
                
        String devLink = "<a href='/device/edit/$dev.id' target='_blank' title='Open Device Page for $dev'>$dev"
		String reset = buttonLink("d$dev.id", "<iconify-icon icon='bx:reset'></iconify-icon>", "black", "23px")
        String resetTotal = buttonLink("t$dev.id", "<iconify-icon icon='bx:reset'></iconify-icon>", "black", "23px")  //// ver1.1.3
        String var = thisVar ? buttonLink("r$dev.id", thisVar, "purple") : buttonLink("n$dev.id", "Select", "green")
        String varC = thisVarC ? buttonLink("y$dev.id", thisVarC, "purple") : buttonLink("z$dev.id", "Select", "green")  //// ver1.1.4
        String varCT = thisVarCT ? buttonLink("v$dev.id", thisVarCT, "purple") : buttonLink("w$dev.id", "Select", "green")  //// ver1.1.5
        String varThresh = thisThresh ? buttonLink("q$dev.id", thisThresh, "purple") : buttonLink("u$dev.id", "Select", "green")  //// ver1.1.8
        
        String checkedBox1T = (state.DeVices["$dev.id"].checkBox1) ? buttonLink("a$dev.id", "<iconify-icon icon='material-symbols:check-box'></iconify-icon>", "green", "23px") : buttonLink("b$dev.id", "<iconify-icon icon='material-symbols:check-box-outline-blank'></iconify-icon>", "black", "23px")   //// ver1.1.3
        String checkedBox2T = (state.DeVices["$dev.id"].checkBox2) ? buttonLink("e$dev.id", "<iconify-icon icon='material-symbols:check-box'></iconify-icon>", "green", "23px") : buttonLink("f$dev.id", "<iconify-icon icon='material-symbols:check-box-outline-blank'></iconify-icon>", "black", "23px")   //// ver1.1.3
        String checkedBox3T = (state.DeVices["$dev.id"].checkBox3) ? buttonLink("g$dev.id", "<iconify-icon icon='material-symbols:check-box'></iconify-icon>", "green", "23px") : buttonLink("h$dev.id", "<iconify-icon icon='material-symbols:check-box-outline-blank'></iconify-icon>", "black", "23px")   //// ver1.1.4
        String checkedBox4T = (state.DeVices["$dev.id"].checkBox4) ? buttonLink("o$dev.id", "<iconify-icon icon='material-symbols:check-box'></iconify-icon>", "green", "23px") : buttonLink("p$dev.id", "<iconify-icon icon='material-symbols:check-box-outline-blank'></iconify-icon>", "black", "23px")   //// ver1.1.8
                              
        
        str += "<tr style='color:black'><td style='border-right:2px solid black'>$devLink</td>" 
		if (capabilitySelect == "1") { str += "<td style='font-weight:bold; color:${dev.currentSwitch == "on" ? "green" : "red"}'>$time</td>" + "<td style='color:${dev.currentSwitch == "on" ? "green" : "red"}'title='State $dev'>$dev.currentSwitch </td>"}
        else if (capabilitySelect == "2") {str += "<td style='font-weight:bold; color:${dev.currentContact == "open" ? "green" : "red"}'>$time</td>" + "<td style='color:${dev.currentContact == "open" ? "green" : "red"}'title='State $dev'>$dev.currentContact</td>" }
        else if (capabilitySelect == "3") {str += "<td style='font-weight:bold; color:${dev.currentContact == "closed" ? "green" : "red"}'>$time</td>" + "<td style='color:${dev.dev.currentContact == "closed" ? "green" : "red"}'title='State $dev'>$dev.currentContact</td>"} 
        else if (capabilitySelect == "4" && state.DeVices["$dev.id"].checkBox4) {str += "<td style='font-weight:bold; color:${dev.currentPower >= state.DeVices["$dev.id"].thresh ? "green" : "red"}'>$time</td>" + "<td style='color:${dev.currentPower >= state.DeVices["$dev.id"].thresh ? "green" : "red"}'title='State $dev'>$dev.currentPower</td>"} 
        else if (capabilitySelect == "4" && state.DeVices["$dev.id"].checkBox4 == false) {str += "<td style='font-weight:bold; color:${dev.currentPower >= state.DeVices["$dev.id"].thresh ? "red" : "green"}'>$time</td>" + "<td style='color:${dev.currentPower >= state.DeVices["$dev.id"].thresh ? "red" : "green"}'title='State $dev'>$dev.currentPower</td>"} 
        else if (capabilitySelect == "5" && state.DeVices["$dev.id"].checkBox4) {str += "<td style='font-weight:bold; color:${dev.currentTemperature >= state.DeVices["$dev.id"].thresh ? "green" : "red"}'>$time</td>" + "<td style='color:${dev.currentTemperature >= state.DeVices["$dev.id"].thresh ? "green" : "red"}'title='State $dev'>$dev.currentTemperature</td>"}   //// ver1.1.7
        else if (capabilitySelect == "5" && state.DeVices["$dev.id"].checkBox4 == false) {str += "<td style='font-weight:bold; color:${dev.currentTemperature >= state.DeVices["$dev.id"].thresh ? "red" : "green"}'>$time</td>" + "<td style='color:${dev.currentTemperature >= state.DeVices["$dev.id"].thresh ? "red" : "green"}'title='State $dev'>$dev.currentTemperature</td>"} 
        else if (capabilitySelect == "6" && state.DeVices["$dev.id"].checkBox4) {str += "<td style='font-weight:bold; color:${dev.currentVoltage >= state.DeVices["$dev.id"].thresh ? "green" : "red"}'>$time</td>" + "<td style='color:${dev.currentVoltage >= state.DeVices["$dev.id"].thresh ? "green" : "red"}'title='State $dev'>$dev.currentVoltage</td>"} 
        else if (capabilitySelect == "6" && state.DeVices["$dev.id"].checkBox4 == false) {str += "<td style='font-weight:bold; color:${dev.currentVoltage >= state.DeVices["$dev.id"].thresh ? "red" : "green"}'>$time</td>" + "<td style='color:${dev.currentVoltage >= state.DeVices["$dev.id"].thresh ? "red" : "green"}'title='State $dev'>$dev.currentVoltage</td>"} 
        else if (capabilitySelect == "7" && state.DeVices["$dev.id"].checkBox4) {str += "<td style='font-weight:bold; color:${dev.currentThermostatOperatingState == "heating" ? "green" : "red"}'>$time</td>" + "<td style='color:${dev.currentThermostatOperatingState == "heating" ? "green" : "red"}'title='State $dev'>$dev.currentThermostatOperatingState</td>"}  
        else if (capabilitySelect == "7" && state.DeVices["$dev.id"].checkBox4 == false) {str += "<td style='font-weight:bold; color:${dev.currentThermostatOperatingState == "cooling" ? "green" : "red"}'>$time</td>" + "<td style='color:${dev.currentThermostatOperatingState == "cooling" ? "green" : "red"}'title='State $dev'>$dev.currentThermostatOperatingState</td>"} 
        endif 
                           
        str += "<td style='font-weight:bold' title='Total On Counts' >${state.DeVices["$dev.id"].counts}</td>" +
        "<td title='Reset for $dev' style='padding:0px 0px'>$reset</td>" +
		"<td title='Time of last Reset for $dev'>${state.DeVices["$dev.id"].time ?: ""} </td>" +  
        "<td title='${thisVar ? "Deselect $thisVar" : "Select Hub Variable"}'>$var</td>" +
        "<td title='${thisVarCT ? "Deselect $thisVar" : "Select Hub NUMBER Variable"}'>$varCT</td>"    //// ver1.1.5
            
        if (capabilitySelect == "4" || capabilitySelect == "5" || capabilitySelect == "6") { str +=    //// ver1.1.8
            "<td title='${thisThresh ? "Click to Change Threshold Number" : "Select Threshold"}'>$varThresh</td>" +       
            "<td title='Check Box to Track Above threhold number, otherwise Track below. DO NOT change after initial set-up.'>$checkedBox4T</td>"           
             }
        else if (capabilitySelect == "7") { str +=    //// ver1.1.9
            "<td title='Check Box to Track Heating state, otherwise Track Cooling state. DO NOT change after initial set-up.'>$checkedBox4T</td>"           
             }
        str += 
        "<td title='Allow Remote reset for this device'>$checkedBox3T</td>" +     //// ver1.1.4    
        "<td title='Check Box to update Time variable in Number format XXXXsec, otherwise String time format XX:XX:XX'>$checkedBox1T</td>" +     //// ver1.1.3
        "<td style='border-right:3px solid black' title='Check Box to Apply Auto Variable refresh Update interval from below'>$checkedBox2T</td>" +   //// ver1.1.3  
        "<td style='font-weight:bold' title='${inDaysC ? "Total Cumulative Time in Days" : "Total Cumulative Time"}'>$allTimeT</td>" +   //// ver1.1.6     
        "<td title='Reset Cumulative Total for $dev' style='padding:0px 0px'>$resetTotal</td>" +  //// ver1.1.0
        "<td title='${thisVarC ? "Deselect $thisVarC" : "Select Hub Variable"}'>$varC</td></tr>"    //// ver1.1.4
        }
   	str += "</table></div>"
    str += "<script type='text/javascript'>\$(document).ready(function() { \$('#main-table').DataTable( {paging: false} ); } );</script>"
	str
 }

String buttonLink(String btnName, String linkText, color = "#1A77C9", font = "13px") {
   "<div class='form-group'><input type='hidden' name='${btnName}.type' value='button'></div><div><div class='submitOnChange' onclick='buttonClick(this)' style='color:$color;cursor:pointer;font-size:$font'>$linkText</div></div><input type='hidden' name='settings[$btnName]' value=''>"
}

//*****************************************************  Schedules and Subscribes ******************************************************//
void initialize() {
    log.debug "intialized"
    
    if (capabilitySelect == "1") {
	    subscribe(DeVices, "switch.on", onHandler)
	    subscribe(DeVices, "switch.off", offHandler)
    }
    else if (capabilitySelect == "2") {
	    subscribe(DeVices, "contact.open", onHandler)
        subscribe(DeVices, "contact.closed", offHandler)
    }
    else if (capabilitySelect == "3") {
	    subscribe(DeVices, "contact.open", offHandler)
	    subscribe(DeVices, "contact.closed", onHandler)
    }
    else if (capabilitySelect == "4") { //// ver1.0.2
        subscribe(DeVices, "power", powerHandler) 
    }    
    else if (capabilitySelect == "5") { //// ver1.1.7
        subscribe(DeVices, "temperature", tempHandler) 
    }
    else if (capabilitySelect == "6") { //// ver1.1.7
        subscribe(DeVices, "voltage", voltHandler) 
    }
    else if (capabilitySelect == "7") {  //// ver1.1.8
	    subscribe(DeVices, "thermostatOperatingState", thermostatHandler)
    } 
	endif  
        
    if (remoteResetVarBool && resetVar) {
        subscribe(location, "variable:${resetVar}.true", remoteReset)
        setGlobalVar(resetVar, false)
        }
    if (remoteResetVarBool && resetVarC) {  //// ver1.1.4
        subscribe(location, "variable:${resetVarC}.true", remoteReset)
        setGlobalVar(resetVarC, false) 
        }   
       
    if (autoResetBool) { schedule("2 0 ${resetHour} ? * * *", dailySaveCountsReset) } // Add 2sec after the hour so it doesnt potentially confict with Auto refresh at same time  //// Added ver1.0.1
   
  	if (autoRefresh == "Minutes") { schedule("0 */${refreshMinutes} * ? * * *", refreshHandler) }   //// ver1.0.3
    else if (autoRefresh == "Seconds") { schedule("*/${refreshSeconds} * * ? * * *", refreshHandler) }   //// ver1.1.2
    endif
}

//**********************************************************  Handlers *************************************************************//
def powerHandler(evt) {  //// ver1.1.6
    if (state.DeVices[evt.device.id].checkBox4 && evt.device.currentVoltage >= state.DeVices[evt.device.id].thresh && state.DeVices[evt.device.id].state == "off") {state.DeVices[evt.device.id].state = "on"; onHandler(evt)}
    else if (state.DeVices[evt.device.id].checkBox4 && evt.device.currentVoltage < state.DeVices[evt.device.id].thresh && state.DeVices[evt.device.id].state == "on") {state.DeVices[evt.device.id].state = "off"; offHandler(evt)}
    else if (state.DeVices[evt.device.id].checkBox4 == false && evt.currentVoltage < state.DeVices[evt.device.id].thresh && state.DeVices[evt.device.id].state == "off") {state.DeVices[evt.device.id].state = "on"; onHandler(evt)}
    else if (state.DeVices[evt.device.id].checkBox4 == false && evt.currentVoltage >= state.DeVices[evt.device.id].thresh && state.DeVices[evt.device.id].state == "on") {state.DeVices[evt.device.id].state = "off"; offHandler(evt)}
    endif
}
  
def tempHandler(evt) {  //// ver1.1.7
    if (state.DeVices[evt.device.id].checkBox4 && evt.device.currentTemperature >= state.DeVices[evt.device.id].thresh && state.DeVices[evt.device.id].state == "off") {state.DeVices[evt.device.id].state = "on"; onHandler(evt)}
    else if (state.DeVices[evt.device.id].checkBox4 && evt.device.currentTemperature < state.DeVices[evt.device.id].thresh && state.DeVices[evt.device.id].state == "on") {state.DeVices[evt.device.id].state = "off"; offHandler(evt)}
    else if (state.DeVices[evt.device.id].checkBox4 == false && evt.currentTemperature < state.DeVices[evt.device.id].thresh && state.DeVices[evt.device.id].state == "off") {state.DeVices[evt.device.id].state = "on"; onHandler(evt)}
    else if (state.DeVices[evt.device.id].checkBox4 == false && evt.currentTemperature >= state.DeVices[evt.device.id].thresh && state.DeVices[evt.device.id].state == "on") {state.DeVices[evt.device.id].state = "off"; offHandler(evt)}
    endif
} 

def voltHandler(evt) {  //// ver1.1.7
    if (state.DeVices[evt.device.id].checkBox4 && evt.device.currentVoltage >= state.DeVices[evt.device.id].thresh && state.DeVices[evt.device.id].state == "off") {state.DeVices[evt.device.id].state = "on"; onHandler(evt)}
    else if (state.DeVices[evt.device.id].checkBox4 && evt.device.currentVoltage < state.DeVices[evt.device.id].thresh && state.DeVices[evt.device.id].state == "on") {state.DeVices[evt.device.id].state = "off"; offHandler(evt)}
    else if (state.DeVices[evt.device.id].checkBox4 == false && evt.currentVoltage < state.DeVices[evt.device.id].thresh && state.DeVices[evt.device.id].state == "off") {state.DeVices[evt.device.id].state = "on"; onHandler(evt)}
    else if (state.DeVices[evt.device.id].checkBox4 == false && evt.currentVoltage >= state.DeVices[evt.device.id].thresh && state.DeVices[evt.device.id].state == "on") {state.DeVices[evt.device.id].state = "off"; offHandler(evt)}
    endif
} 
    
def thermostatHandler(evt) {  //// ver1.1.8
    if (state.DeVices[evt.device.id].checkBox4 && evt.device.currentThermostatOperatingState == "heating") {onHandler(evt)}
    else if (state.DeVices[evt.device.id].checkBox4 && evt.device.currentThermostatOperatingState != "heating") {offHandler(evt)}
    else if (state.DeVices[evt.device.id].checkBox4 == false && evt.device.currentThermostatOperatingState == "cooling") {onHandler(evt)}
    else if (state.DeVices[evt.device.id].checkBox4 == false && evt.device.currentThermostatOperatingState != "cooling") {offHandler(evt)}
    endif
} 
    
void onHandler(evt) {
    state.DeVices[evt.device.id].start = now()
    state.DeVices[evt.device.id].counts += 1  //// ver1.1.3
    if (lastResetTimeBool == false) {state.DeVices[evt.device.id].time = new Date().format("MM-dd-yyyy ${location.timeFormat == "12" ? "h:mm:ss a" : "HH:mm:ss"}")} //// ver1.1.8 
    if (resetWhenOnBool) {deviceOnSaveCountsReset()} //// ver1.1.0
}


void offHandler(evt) {
    state.DeVices[evt.device.id].total += now() - state.DeVices[evt.device.id].start
    state.DeVices[evt.device.id].allTime = state.DeVices[evt.device.id].allTime + (now() - state.DeVices[evt.device.id].start) //// ver 1.1.3
	      String thisVar = state.DeVices[evt.device.id].var
          String thisVarC = state.DeVices[evt.device.id].varC   //// ver1.1.4
          String thisVarCT = state.DeVices[evt.device.id].varCT   //// ver1.1.5
    
            ////////// Active/On Time Calc   
            int counts = state.DeVices[evt.device.id].counts    //// ver1.1.5   
            int total = state.DeVices[evt.device.id].total /1000    
            int intTime = total  //// ver1.1.0
            int hours = total / 3600
	        total = total % 3600
	        int mins = total / 60
	        int secs = total % 60
	        String time = "$hours:${mins < 10 ? "0" : ""}$mins:${secs < 10 ? "0" : ""}$secs"
            
            ////////// Total All Cumalative Time Calc   //// ver1.1.3
            int allTotal = state.DeVices[evt.device.id].allTime /1000      
            int intAllTime = allTotal
            int allHours = allTotal / 3600  
	        allTotal = allTotal % 3600
	        int allMins = allTotal / 60
	        int allSecs = allTotal % 60    
            String allTime = "$allHours:${allMins < 10 ? "0" : ""}$allMins:${allSecs < 10 ? "0" : ""}$allSecs"   
               
             if (thisVar) {state.DeVices[evt.device.id].checkBox1 ? setGlobalVar(thisVar, intTime) : setGlobalVar(thisVar, time) 
               if (logEnableBool) {log.info "App: ${app.label} - Device ${evt.device.id} now Inactive/Off, Periodic Var *${thisVar}* to ${time} or ${intTime}sec, Counts=${counts}"}  //// ver1.1.3                  
             }
             if (thisVarC) {state.DeVices[evt.device.id].checkBox1 ? setGlobalVar(thisVarC, intAllTime) : setGlobalVar(thisVarC, allTime)   //// ver1.1.4 
               if (logEnableBool) {log.info "App: ${app.label} - Device ${evt.device.id} now Inactive/Off, Cumulative Var *${thisVarC}* ${allTime} or ${intAllTime}sec, Counts=${counts}"}   
             }
             if (thisVarCT) {setGlobalVar(thisVarCT, counts)}  //// ver1.1.5 
}

void appButtonHandler(btn) {
    if (btn == "reset") resetTimers() //// ver1.0.1
    else if (btn == "refresh") refreshHandler()  //// ver1.0.3
    else if (btn.startsWith("n")) state.newVar = btn.minus("n")
    else if (btn.startsWith("r")) state.remVar = btn.minus("r")
    else if (btn.startsWith("z")) state.newVarC = btn.minus("z")   //// ver1.1.4
    else if (btn.startsWith("y")) state.remVarC = btn.minus("y")   //// ver1.1.4 
    else if (btn.startsWith("w")) state.newVarCT = btn.minus("w")   //// ver1.1.5
    else if (btn.startsWith("v")) state.remVarCT = btn.minus("v")   //// ver1.1.5     
    else if (btn.startsWith("t")) state.resetTotal = btn.minus("t")   //// ver1.1.3 
    else if (btn.startsWith("a")) state.uncheckedBox1 = btn.minus("a")  //// ver1.1.3   
    else if (btn.startsWith("b")) state.checkedBox1 = btn.minus("b")    //// ver1.1.3 
    else if (btn.startsWith("e")) state.uncheckedBox2 = btn.minus("e")  //// ver1.1.3  
    else if (btn.startsWith("f")) state.checkedBox2 = btn.minus("f")    //// ver1.1.3 
    else if (btn.startsWith("g")) state.uncheckedBox3 = btn.minus("g")   //// ver1.1.4  
    else if (btn.startsWith("h")) state.checkedBox3 = btn.minus("h")   //// ver1.1.4
    else if (btn.startsWith("o")) state.uncheckedBox4 = btn.minus("o")   //// ver1.1.8  
    else if (btn.startsWith("p")) state.checkedBox4 = btn.minus("p")   //// ver1.1.8       
    else if (btn.startsWith("q")) state.newThresh = btn.minus("q")   //// ver1.1.8
	else if (btn.startsWith("u")) state.remThresh = btn.minus("u")   //// ver1.1.8     
    else state.reset = btn.minus("d")
    }

//*************************************************** Refresh Functions ********************************************************//
def refreshHandler() {   //// Added ver 1.0.3
    state.DeVices.each {k, v ->
        def dev = DeVices.find{"$it.id" == k}
        ///////////// Update Times if Active/On
        if (capabilitySelect == "1" && dev.currentSwitch == "on") {
           	state.DeVices[k].total += now() - state.DeVices[k].start
			state.DeVices[k].allTime = state.DeVices[k].allTime + (now() - state.DeVices[k].start) //// ver1.1.3
            state.DeVices[k].start = now()
            }
        else if (capabilitySelect == "2" && dev.currentContact == "open") {
        	state.DeVices[k].total += now() - state.DeVices[k].start
            state.DeVices[k].allTime = state.DeVices[k].allTime + (now() - state.DeVices[k].start)  //// ver1.1.3
			state.DeVices[k].start = now()
            }
        else if (capabilitySelect == "3" && dev.currentContact == "closed") {
        	state.DeVices[k].total += now() - state.DeVices[k].start
            state.DeVices[k].allTime = state.DeVices[k].allTime + (now() - state.DeVices[k].start)  //// ver1.1.3
			state.DeVices[k].start = now()
		    }
        else if ((capabilitySelect == "4" && dev.currentPower >= state.DeVices[k].thresh && state.DeVices[k].checkBox4) || (capabilitySelect == "4" && dev.currentPower < state.DeVices[k].thresh && state.DeVices[k].checkBox4 == false)) { //// ver1.0.2
        	state.DeVices[k].total += now() - state.DeVices[k].start
            state.DeVices[k].allTime = state.DeVices[k].allTime + (now() - state.DeVices[k].start)  //// ver1.1.3
			state.DeVices[k].start = now()
		    }
        else if ((capabilitySelect == "5" && dev.currentTemperature >= state.DeVices[k].thresh && state.DeVices[k].checkBox4) || (capabilitySelect == "5" && dev.currentTemperature < state.DeVices[k].thresh && state.DeVices[k].checkBox4 == false)) { //// ver1.1.7
        	state.DeVices[k].total += now() - state.DeVices[k].start
            state.DeVices[k].allTime = state.DeVices[k].allTime + (now() - state.DeVices[k].start)   
			state.DeVices[k].start = now()
		    } 
        else if ((capabilitySelect == "6" && dev.currentVoltage >= state.DeVices[k].thresh && state.DeVices[k].checkBox4) || (capabilitySelect == "6" && dev.currentVoltage < state.DeVices[k].thresh && state.DeVices[k].checkBox4 == false)) { //// ver1.1.7
        	state.DeVices[k].total += now() - state.DeVices[k].start
            state.DeVices[k].allTime = state.DeVices[k].allTime + (now() - state.DeVices[k].start)   
			state.DeVices[k].start = now()
		    } 
        else if ((capabilitySelect == "7" && dev.currentThermostatOperatingState == "heating" && state.DeVices[k].checkBox4) || (capabilitySelect == "7" && dev.currentThermostatOperatingState == "cooling" && state.DeVices[k].checkBox4 == false)) { //// ver1.1.8
        	state.DeVices[k].total += now() - state.DeVices[k].start
            state.DeVices[k].allTime = state.DeVices[k].allTime + (now() - state.DeVices[k].start)   
			state.DeVices[k].start = now()
		    } 
        endif
       }
        //////////// Update Variables if Active/On  
        DeVices.sort{it.displayName.toLowerCase()}.each {dev ->
          String thisVar = state.DeVices["$dev.id"].var
          String thisVarC = state.DeVices["$dev.id"].varC   //// ver1.1.4
          String thisVarCT = state.DeVices["$dev.id"].varCT   //// ver1.1.5
            
            ////////// Active/On Time Calc   
            int counts = state.DeVices["$dev.id"].counts   //// ver1.1.5
            int total = state.DeVices["$dev.id"].total /1000    
            int intTime = total  //// Added ver1.1.0
            int hours = total / 3600
	        total = total % 3600
	        int mins = total / 60
	        int secs = total % 60
	        String time = "$hours:${mins < 10 ? "0" : ""}$mins:${secs < 10 ? "0" : ""}$secs"
            
            ////////// Total All Cumalative Time Calc   //// ver1.1.3
            int allTotal = state.DeVices["$dev.id"].allTime /1000      
            int intAllTime = allTotal
            int allHours = allTotal / 3600  
	        allTotal = allTotal % 3600
	        int allMins = allTotal / 60
	        int allSecs = allTotal % 60    
            String allTime = "$allHours:${allMins < 10 ? "0" : ""}$allMins:${allSecs < 10 ? "0" : ""}$allSecs"   
               
             if ((thisVar && state.DeVices["$dev.id"].checkBox2) || (thisVar && state.byPassBool)) {  //// ver1.1.3 
               state.DeVices["$dev.id"].checkBox1 ? setGlobalVar(thisVar, intTime) : setGlobalVar(thisVar, time) 
               if (logEnableBool) {log.info "App: ${app.label} - Device ${dev.id}, Periodic Var *${thisVar}* to ${time} or ${intTime}sec, Counts=${counts}"}  //// ver1.1.3                  
             }
             if ((thisVarC && state.DeVices["$dev.id"].checkBox2) || (thisVarC && state.byPassBool)) {  //// ver1.1.4 
               state.DeVices["$dev.id"].checkBox1 ? setGlobalVar(thisVarC, intAllTime) : setGlobalVar(thisVarC, allTime)
               if (logEnableBool) {log.info "App: ${app.label} - Device ${dev.id}, Cumulative Var *${thisVarC}* ${allTime} or ${intAllTime}sec, Counts=${counts}"}   
             }
             if (thisVarCT) {setGlobalVar(thisVarCT, counts)}  //// ver1.1.5 
                                                     
         }
    state.byPassBool = false  // Reset the bypass  //// ver1.1.3
 }

//*************************************************** Reset Functions ********************************************************//
void dailySaveCountsReset(evt = null) { //// Used by Auto reset daily hour rest to save counts or not  //// ver1.1.4
    if (dayCountsReset) {state.byPassBool = false}
    else state.byPassBool = true  
    resetTimers()
}

void deviceOnSaveCountsReset(evt = null) { //// Device On reset options to prevent counter reset  //// ver1.1.3
    state.byPassBool = true  
    resetTimers()
}

/////////////////// Remote Reset Timers and Variables  
void remoteReset(evt = null) {   //// ver1.1.4 
    state.DeVices.each{k, v ->
		def dev = DeVices.find{"$it.id" == k}
        if (state.DeVices[k].checkBox3) {
            state.DeVices[k].start = now()   
            if (lastResetTimeBool) {state.DeVices[k].time = new Date().format("MM-dd-yyyy ${location.timeFormat == "12" ? "h:mm:ss a" : "HH:mm:ss"}")}
		    state.DeVices[k].total = 0
            if (state.byPassBool == false) {state.DeVices[k].counts = 0}  //// ver1.1.3
            //if (resetVarAllBool && resetVar && state.DeVices[k].checkBox3) {state.DeVices[k].allTime = 0}  
            if (resetVarC && state.DeVices[k].checkBox3) {state.DeVices[k].allTime = 0 } 
            }
     }
    if (logEnableBool) {log.debug "App: ${app.label} - Remote Reset Selected Timers to 0 Happening ..........."}
    if(resetVar) setGlobalVar(resetVar, false)
    if(resetVarC) setGlobalVar(resetVarC, false)  
    refreshHandler()     
}

/////////////////// Auto and in App Reset Timers and Variables 
void resetTimers(evt = null) {
    state.DeVices.each{k, v ->
        def dev = DeVices.find{"$it.id" == k}
            state.DeVices[k].start = now()   
        if (lastResetTimeBool) {state.DeVices[k].time = new Date().format("MM-dd-yyyy ${location.timeFormat == "12" ? "h:mm:ss a" : "HH:mm:ss"}")}
		    state.DeVices[k].total = 0
            if (state.byPassBool == false) {state.DeVices[k].counts = 0}  //// ver1.1.3
        }
    if (logEnableBool) {log.debug "App: ${app.label} - App Periodic Active/On All Timers Reset to 0 Happening ..........."}
    refreshHandler() //// ver1.0.3
}
//****************************************************** Other Stuff ********************************************************//
def updated() {
    unsubscribe()
    unschedule()
    initialize()
}

def installed() {
}

def getFormat(type, myText="") {		
    if(type == "title") return "<h3 style='color:#0000ff;font-weight: bold'>${myText}</h3>"
    if(type == "header") return "<div style='color:#660000;font-weight: bold'>${myText}</div>"
	if(type == "red") return "<div style='color:#660000'>${myText}</div>"
	if(type == "importantBold") return "<div style='color:#32a4be;font-weight: bold'>${myText}</div>"
	if(type == "important") return "<div style='color:#32a4be'>${myText}</div>"
	if(type == "important2") return "<div style='color:#5a8200'>${myText}</div>"
	if(type == "important2Bold") return "<div style='color:#5a8200;font-weight: bold'>${myText}</div>"
	if(type == "lessImportant") return "<div style='color:green'>${myText}</div>"
}
def displayTitle() {
    setVersion()
    theName = app.label
    if(theName == null || theName == "") theName = "New Child App"
	section (getFormat("title",  "App: ${state.name} - ${"ver " + state.version}")) {}
}
